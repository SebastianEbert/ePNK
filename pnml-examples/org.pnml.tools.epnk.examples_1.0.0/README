This eclipse project contains example Petri nets in PNML format, which are
deployed together with the ePNK 1.0.0. The examples contain different
types of Petri nets, as supported by ISO/IEC 15909-2: P/T-Nets,
High-level Petri Net Graphs (HLPNGs), Symmetric Nets (SN-Nets), and
"DOT-Nets" -- P/T-Nets in the high-level representation.

Moreover, there are some HLPNGs, which are Petri net schemas and are
models of so-called network algorithms [1-4]. Together with a model of
an underlying communication network, they can be simulated by the new
simulator for high-level nets (Network Simulator App), which is
deployed from the ePNK update site.

The list below provides an overview of these examples, and where they
come from.

 * standard:
     contains some example that come from our are derived from
     models that are part of ISO/IEC 15909-2:2010
 
   + original:
       contains the two PNML documents that are part of
       ISO/IEC 15909-2 in the original version (see
       ISO/IEC 15909-2:2010 and www.pnml.org for more
       details):
               
     - samplePTnet.pnml:
         is a very simple P/T-Net.
     
     - sampleSNPrio.pnml:
         is a simple example of a Symmetric Net.
         
  + adjusted:
       PNML does not mandate any concrete syntax for labels
       of HLPNGs, and the size of Petri net nodes. The PNML
       files adjust some of the layout and add the concrete
       syntax for the labels as defined by the ePNK (actually,
       the concrete syntax was generated by an experimental
       tool that is devised with the ePNK: "Serialse HLPNG Labels").
       
     - samplePTnetAdjustedPositions.pnml:
         positions and size of samplePTnet.pnml adjusted, so that the
         Petri net elements do not overlap in the ePNK.
         
     - sampleSNPrioFixedNames.pnml:
         the names of some elements of the example sampleSNPrio.pnml
         from ISO/IEC 15909-2 contain special characters. Therefore,
         the serialisation of these names would not conform to the
         concrete syntax of the ePNK. In this example, the names
         of these elements have been replaced by names that do
         not contain special characters. And the text of the labels
         has been serialised, so that it can be parsed and edited
         by the ePNK now.
         
     - sampleSNPrioDeclarationsOnPage.pnml:
         The same as sampleSNPrioFixedNames.pnml; but the declarations
         are now moved to a page. Version 1.0.0 of the ePNK is able
         to handle declarations that are directly attached to a
         net and are not shown on a page. But, it is easier to show
         and edit them, when on a page.
         
 * hlpng:    
     contains different examples of HLPNGs.
     
   + algorithms:
       contains high-level nets for some simple algorithms.
    
    - factorize.pnml:
        simple algorithm for factorizing numbers. It can be simulated
        with the simulator for high-level Petri nets (Simulator App).
        But, the simulation needs some user interaction for finding
        possible variable bindings. 
        
    - factorize2.pnml:
        extended example factorize.pnml, which adds some Petri net
        mechanisms that avoid asking the user for inputs (but not
        very efficiently).
        
    - prime-factors.pnml:
        example for computing prime numbers (or factors of a number
        that are relative prime). this can be automatically simulated by
        the Simulator for high-level nets.
        
    - MinDistance.pnml:
        a network algorithm, which for some configuration of network
        nodes and communication channels between them calculates the
        minimum distance of all nodes to some distinguished root
        nodes. This is taken from [1-4,6,7]. The Petri net is a so-called
        net schema [1,3,4] and therefore, cannot be immediately simulated.
        But, together with the input of some network it can (see
        network-algorithms folder).
        
    + protocols:
        two high-level Petri net examples for a simple transmission
        protocol (ove non-lossy channel) and a transmission protocol        
        over lossy channels ("sliding-window-like protocol"). Both
        examples come from the masters thesis [8].
        
    + technical:
        contains some technical examples that exhibit some of the
        features of the ePNK
      
      - simple-dot-net.pnml:
          is an example of a P/T-net in high-level net representation.
          
      - lists.pnml:
          shows how to use sort List (comes from [8]).
          
      - runtimeValueEval.pnml:
          technical example for testing the simulator for high-level nets
          (from [8]).

 * network-algorithms:
     contains three different network algorithms, which together with the
     network models can be simulated with the network simulator from [8]
     (Network Simulator App). The examples have been introduced in [1-4]
     and used in [5-8]. The concrete networks for all these examples
     as well as the Petri net for the consensus algorithm where created 
     in [8].
     
     - consensus:
         A model of a protocol that guarantees that partners keep negotiation until
         the have agreed (see [2,4,5]). The file ConsensusInNetworks.pnml
         contains the net schema, the file ConsensusInNetworks.networkmodel
         the instance of an network on which the algorithm is simulated. 
         ConsensusInNetworks.networkmodel_diagram shows the diagram
         representation of the network (you can edit it, if you want
         to change the network on which the algorithm should be simulated).
         
     - echo:
         A model of the so-called echo algorithm; the algorithm is used
         for "diffusing" some information in a network of connected 
         agents, which makes sure that the originator of this "diffusion"
         gets a notification, once all (reachable) agents have received
         the information. See [2-4] for details. The file Echo.pnml
         contains the Petri net model of the algorithm, Echo.networkmodel
         the network, and Echo.networkmodel_diagram the graphical representation
         of the network.
         
     - min-distance:
         A model of a simple algorithm for computing the minimal distance to 
         some dedicated root notes of some network in a distributed way (see
         [1,2,4] for details). MinDistance.pnml contains the Petri net
         schema with the algorithm, and MinDistance.networkmodel and
         MinDistance.networkmodel_diagram the network and its graphical
         representation.
 

References:

[1] Kindler, E., Reisig, W.: Algebraic system nets for modelling distributed algorithms.
    Petri Net Newsletter 51 (1996) 16–31

[2] M. Weber, R. Walter, H. Völzer, T. Vesper, W. Reisig, S. Peuker, E. Kindler,
    J. Freiheit, and J. Desel. DAWN: Petrinetzmodelle zur Verifikation Verteilter Algorithmen.
    Informatik-Bericht 88, Humboldt-Universität zu Berlin, Dec. 1997.
    
    Revised and extended version of: R. Walter, H. Völzer, T. Vesper, W. Reisig, E. Kindler, 
    J. Freiheit, and J. Desel: Memorandum: Petrinetzmodelle zur Verifikation Verteilter Algorithmen.
    Informatik-Berichte der Humboldt-Universität zu Berlin No. 67, August 1996.

[3] E. Kindler, W. Reisig, H. Völzer, and R. Walter: Petri Net Based Verification of Distributed 
    Algorithms: An Example. Formal Aspects of Computing (1997) 9:409-424.

[4] W. Reisig. Elements of Distributed Algorithms -- Modeling and Analysis with Petri Nets.
    Springer, 1998. 

[5] T. Baar, E. Kindler, and H. Völzer: Verifying Intuition -- ILF checks DAWN proofs.
    In S. Donatelli, J. Kleijn (Eds.), Application and Theory of Petri Nets,
    20th International Conference, LNCS 1639, pp. 404-423. Springer, June 1999. 
        
[6] Kindler, E., Völzer, H.: Algebraic nets with flexible arcs. Theoretical Computer Science (2001)

[7] Kindler, E., Petrucci, L.: A framework for the definition of variants of high-level Petri nets.
    In: Jensen, K.(ed.): Tenth Workshop and Tutorial on Practical Use of Coloured Petri Nets and
    CPN Tools (CPN '09), Aarhus, Denmark, Oct. 2009, pp. 121-137.
               
[8] Laganeckas, M.: A Simulator for high level Petri Nets: Model based design and implementation.
    Master's thesis, Technical University of Denmark, DTU Informatics, IMM-M.Sc.-2012-101,
    September 2012. 


    

  
          