/*
* generated by Xtext
*/
grammar InternalHLPNGInscriptionLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.pnml.tools.epnk.pntypes.hlpngs.datatypes.concretesyntax.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.pnml.tools.epnk.pntypes.hlpngs.datatypes.concretesyntax.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.pnml.tools.epnk.pntypes.hlpngs.datatypes.concretesyntax.services.HLPNGInscriptionLanguageGrammarAccess;

}

@parser::members {

 	private HLPNGInscriptionLanguageGrammarAccess grammarAccess;
 	
    public InternalHLPNGInscriptionLanguageParser(TokenStream input, HLPNGInscriptionLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Document";	
   	}
   	
   	@Override
   	protected HLPNGInscriptionLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDocument
entryRuleDocument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDocumentRule()); }
	 iv_ruleDocument=ruleDocument 
	 { $current=$iv_ruleDocument.current; } 
	 EOF 
;

// Rule Document
ruleDocument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getDocumentAccess().getDeclarationsDeclarationsParserRuleCall_0_0_0()); 
	    }
		lv_declarations_0_0=ruleDeclarations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDocumentRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_0_0, 
        		"Declarations");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDocumentAccess().getSemicolonKeyword_0_1());
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getDocumentAccess().getTermTermParserRuleCall_1_0_0()); 
	    }
		lv_term_2_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDocumentRule());
	        }
       		add(
       			$current, 
       			"term",
        		lv_term_2_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDocumentAccess().getSemicolonKeyword_1_1());
    }
))*
;





// Entry rule entryRuleDeclarations
entryRuleDeclarations returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationsRule()); }
	 iv_ruleDeclarations=ruleDeclarations 
	 { $current=$iv_ruleDeclarations.current; } 
	 EOF 
;

// Rule Declarations
ruleDeclarations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDeclarationsAccess().getDeclarationsAction_0(),
            $current);
    }
)((	otherlv_1='sorts' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDeclarationsAccess().getSortsKeyword_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationsAccess().getDeclarationSortDeclParserRuleCall_1_0_1_0()); 
	    }
		lv_declaration_2_0=ruleSortDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationsRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_2_0, 
        		"SortDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDeclarationsAccess().getCommaKeyword_1_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationsAccess().getDeclarationSortDeclParserRuleCall_1_0_2_1_0()); 
	    }
		lv_declaration_4_0=ruleSortDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationsRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_4_0, 
        		"SortDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDeclarationsAccess().getSemicolonKeyword_1_0_3());
    }
)
    |(	otherlv_6='vars' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDeclarationsAccess().getVarsKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationsAccess().getDeclarationVariableDeclParserRuleCall_1_1_1_0()); 
	    }
		lv_declaration_7_0=ruleVariableDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationsRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_7_0, 
        		"VariableDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDeclarationsAccess().getCommaKeyword_1_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationsAccess().getDeclarationVariableDeclParserRuleCall_1_1_2_1_0()); 
	    }
		lv_declaration_9_0=ruleVariableDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationsRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_9_0, 
        		"VariableDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_10=';' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getDeclarationsAccess().getSemicolonKeyword_1_1_3());
    }
)
    |(	otherlv_11='ops' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getDeclarationsAccess().getOpsKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationsAccess().getDeclarationOperatorDeclParserRuleCall_1_2_1_0()); 
	    }
		lv_declaration_12_0=ruleOperatorDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationsRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_12_0, 
        		"OperatorDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_13=',' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getDeclarationsAccess().getCommaKeyword_1_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationsAccess().getDeclarationOperatorDeclParserRuleCall_1_2_2_1_0()); 
	    }
		lv_declaration_14_0=ruleOperatorDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationsRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_14_0, 
        		"OperatorDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_15=';' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getDeclarationsAccess().getSemicolonKeyword_1_2_3());
    }
)
    |(	otherlv_16='sortsymbols' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getDeclarationsAccess().getSortsymbolsKeyword_1_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationsAccess().getDeclarationArbitrarySortParserRuleCall_1_3_1_0()); 
	    }
		lv_declaration_17_0=ruleArbitrarySort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationsRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_17_0, 
        		"ArbitrarySort");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_18=',' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getDeclarationsAccess().getCommaKeyword_1_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationsAccess().getDeclarationArbitrarySortParserRuleCall_1_3_2_1_0()); 
	    }
		lv_declaration_19_0=ruleArbitrarySort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationsRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_19_0, 
        		"ArbitrarySort");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_20=';' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getDeclarationsAccess().getSemicolonKeyword_1_3_3());
    }
)
    |(	otherlv_21='opsymbols' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getDeclarationsAccess().getOpsymbolsKeyword_1_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationsAccess().getDeclarationArbitraryOperatorParserRuleCall_1_4_1_0()); 
	    }
		lv_declaration_22_0=ruleArbitraryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationsRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_22_0, 
        		"ArbitraryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_23=',' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getDeclarationsAccess().getCommaKeyword_1_4_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationsAccess().getDeclarationArbitraryOperatorParserRuleCall_1_4_2_1_0()); 
	    }
		lv_declaration_24_0=ruleArbitraryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationsRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_24_0, 
        		"ArbitraryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_25=';' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getDeclarationsAccess().getSemicolonKeyword_1_4_3());
    }
))*)
;







// Entry rule entryRuleSortDecl
entryRuleSortDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSortDeclRule()); }
	 iv_ruleSortDecl=ruleSortDecl 
	 { $current=$iv_ruleSortDecl.current; } 
	 EOF 
;

// Rule SortDecl
ruleSortDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSortDeclAccess().getNamedSortParserRuleCall_0()); 
    }
    this_NamedSort_0=ruleNamedSort
    { 
        $current = $this_NamedSort_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSortDeclAccess().getPartitionParserRuleCall_1()); 
    }
    this_Partition_1=rulePartition
    { 
        $current = $this_Partition_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVariableDecl
entryRuleVariableDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclRule()); }
	 iv_ruleVariableDecl=ruleVariableDecl 
	 { $current=$iv_ruleVariableDecl.current; } 
	 EOF 
;

// Rule VariableDecl
ruleVariableDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getVariableDeclAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableDeclAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclAccess().getSortSortParserRuleCall_2_0()); 
	    }
		lv_sort_2_0=ruleSort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclRule());
	        }
       		set(
       			$current, 
       			"sort",
        		lv_sort_2_0, 
        		"Sort");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNamedSort
entryRuleNamedSort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamedSortRule()); }
	 iv_ruleNamedSort=ruleNamedSort 
	 { $current=$iv_ruleNamedSort.current; } 
	 EOF 
;

// Rule NamedSort
ruleNamedSort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getNamedSortAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNamedSortRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNamedSortAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNamedSortAccess().getDefSortParserRuleCall_2_0()); 
	    }
		lv_def_2_0=ruleSort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedSortRule());
	        }
       		set(
       			$current, 
       			"def",
        		lv_def_2_0, 
        		"Sort");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOperatorDecl
entryRuleOperatorDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorDeclRule()); }
	 iv_ruleOperatorDecl=ruleOperatorDecl 
	 { $current=$iv_ruleOperatorDecl.current; } 
	 EOF 
;

// Rule OperatorDecl
ruleOperatorDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getOperatorDeclAccess().getNamedOperatorParserRuleCall()); 
    }
    this_NamedOperator_0=ruleNamedOperator
    { 
        $current = $this_NamedOperator_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleNamedOperator
entryRuleNamedOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamedOperatorRule()); }
	 iv_ruleNamedOperator=ruleNamedOperator 
	 { $current=$iv_ruleNamedOperator.current; } 
	 EOF 
;

// Rule NamedOperator
ruleNamedOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getNamedOperatorAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNamedOperatorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNamedOperatorAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getNamedOperatorAccess().getParametersVariableDeclParserRuleCall_2_0_0()); 
	    }
		lv_parameters_2_0=ruleVariableDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedOperatorRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"VariableDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNamedOperatorAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNamedOperatorAccess().getParametersVariableDeclParserRuleCall_2_1_1_0()); 
	    }
		lv_parameters_4_0=ruleVariableDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedOperatorRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_4_0, 
        		"VariableDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNamedOperatorAccess().getRightParenthesisKeyword_3());
    }
	otherlv_6='=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getNamedOperatorAccess().getEqualsSignKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNamedOperatorAccess().getDefTermParserRuleCall_5_0()); 
	    }
		lv_def_7_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedOperatorRule());
	        }
       		set(
       			$current, 
       			"def",
        		lv_def_7_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSort
entryRuleSort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSortRule()); }
	 iv_ruleSort=ruleSort 
	 { $current=$iv_ruleSort.current; } 
	 EOF 
;

// Rule Sort
ruleSort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSortAccess().getBuiltInSortParserRuleCall_0()); 
    }
    this_BuiltInSort_0=ruleBuiltInSort
    { 
        $current = $this_BuiltInSort_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSortAccess().getMultiSetSortParserRuleCall_1()); 
    }
    this_MultiSetSort_1=ruleMultiSetSort
    { 
        $current = $this_MultiSetSort_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSortAccess().getProductSortParserRuleCall_2()); 
    }
    this_ProductSort_2=ruleProductSort
    { 
        $current = $this_ProductSort_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSortAccess().getUserSortParserRuleCall_3()); 
    }
    this_UserSort_3=ruleUserSort
    { 
        $current = $this_UserSort_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMultiSetSort
entryRuleMultiSetSort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiSetSortRule()); }
	 iv_ruleMultiSetSort=ruleMultiSetSort 
	 { $current=$iv_ruleMultiSetSort.current; } 
	 EOF 
;

// Rule MultiSetSort
ruleMultiSetSort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='MS' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMultiSetSortAccess().getMSKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMultiSetSortAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiSetSortAccess().getBasisSortParserRuleCall_2_0()); 
	    }
		lv_basis_2_0=ruleSort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiSetSortRule());
	        }
       		set(
       			$current, 
       			"basis",
        		lv_basis_2_0, 
        		"Sort");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMultiSetSortAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleProductSort
entryRuleProductSort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProductSortRule()); }
	 iv_ruleProductSort=ruleProductSort 
	 { $current=$iv_ruleProductSort.current; } 
	 EOF 
;

// Rule ProductSort
ruleProductSort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProductSortAccess().getLeftParenthesisKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getProductSortAccess().getProductSortAction_1(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getProductSortAccess().getElementSortSortParserRuleCall_2_0_0()); 
	    }
		lv_elementSort_2_0=ruleSort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProductSortRule());
	        }
       		add(
       			$current, 
       			"elementSort",
        		lv_elementSort_2_0, 
        		"Sort");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='*' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProductSortAccess().getAsteriskKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProductSortAccess().getElementSortSortParserRuleCall_2_1_1_0()); 
	    }
		lv_elementSort_4_0=ruleSort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProductSortRule());
	        }
       		add(
       			$current, 
       			"elementSort",
        		lv_elementSort_4_0, 
        		"Sort");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getProductSortAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleUserSort
entryRuleUserSort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUserSortRule()); }
	 iv_ruleUserSort=ruleUserSort 
	 { $current=$iv_ruleUserSort.current; } 
	 EOF 
;

// Rule UserSort
ruleUserSort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getUserSortAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUserSortRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current; } 
	 EOF 
;

// Rule Term
ruleTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getTermAccess().getTerm1ParserRuleCall()); 
    }
    this_Term1_0=ruleTerm1
    { 
        $current = $this_Term1_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleTerm1
entryRuleTerm1 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerm1Rule()); }
	 iv_ruleTerm1=ruleTerm1 
	 { $current=$iv_ruleTerm1.current; } 
	 EOF 
;

// Rule Term1
ruleTerm1 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTerm1Access().getTerm2ParserRuleCall_0()); 
    }
    this_Term2_0=ruleTerm2
    { 
        $current = $this_Term2_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm1Access().getOrSubtermAction_1_0_0(),
            $current);
    }
)	otherlv_2='or' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTerm1Access().getOrKeyword_1_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm1Access().getSubtermTerm2ParserRuleCall_1_0_2_0()); 
	    }
		lv_subterm_3_0=ruleTerm2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm1Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_3_0, 
        		"Term2");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm1Access().getImplySubtermAction_1_1_0(),
            $current);
    }
)	otherlv_5='implies' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTerm1Access().getImpliesKeyword_1_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm1Access().getSubtermTerm2ParserRuleCall_1_1_2_0()); 
	    }
		lv_subterm_6_0=ruleTerm2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm1Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_6_0, 
        		"Term2");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleTerm2
entryRuleTerm2 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerm2Rule()); }
	 iv_ruleTerm2=ruleTerm2 
	 { $current=$iv_ruleTerm2.current; } 
	 EOF 
;

// Rule Term2
ruleTerm2 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTerm2Access().getTerm3ParserRuleCall_0()); 
    }
    this_Term3_0=ruleTerm3
    { 
        $current = $this_Term3_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm2Access().getAndSubtermAction_1_0(),
            $current);
    }
)	otherlv_2='and' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTerm2Access().getAndKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm2Access().getSubtermTerm3ParserRuleCall_1_2_0()); 
	    }
		lv_subterm_3_0=ruleTerm3		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm2Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_3_0, 
        		"Term3");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTerm3
entryRuleTerm3 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerm3Rule()); }
	 iv_ruleTerm3=ruleTerm3 
	 { $current=$iv_ruleTerm3.current; } 
	 EOF 
;

// Rule Term3
ruleTerm3 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTerm3Access().getTerm4ParserRuleCall_0()); 
    }
    this_Term4_0=ruleTerm4
    { 
        $current = $this_Term4_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_0_0(),
            $current);
    }
)	otherlv_2='>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTerm3Access().getGreaterThanSignKeyword_1_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_0_2_0()); 
	    }
		lv_subterm_3_0=ruleTerm4		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm3Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_3_0, 
        		"Term4");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_1_0(),
            $current);
    }
)	otherlv_5='>=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTerm3Access().getGreaterThanSignEqualsSignKeyword_1_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_1_2_0()); 
	    }
		lv_subterm_6_0=ruleTerm4		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm3Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_6_0, 
        		"Term4");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm3Access().getLessThanSubtermAction_1_2_0(),
            $current);
    }
)	otherlv_8='<' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTerm3Access().getLessThanSignKeyword_1_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_2_2_0()); 
	    }
		lv_subterm_9_0=ruleTerm4		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm3Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_9_0, 
        		"Term4");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_3_0(),
            $current);
    }
)	otherlv_11='<=' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTerm3Access().getLessThanSignEqualsSignKeyword_1_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_3_2_0()); 
	    }
		lv_subterm_12_0=ruleTerm4		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm3Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_12_0, 
        		"Term4");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm3Access().getContainsSubtermAction_1_4_0(),
            $current);
    }
)	otherlv_14='contains' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getTerm3Access().getContainsKeyword_1_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_4_2_0()); 
	    }
		lv_subterm_15_0=ruleTerm4		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm3Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_15_0, 
        		"Term4");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm3Access().getLessThanSubtermAction_1_5_0(),
            $current);
    }
)	otherlv_17='<r' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getTerm3Access().getRKeyword_1_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_5_2_0()); 
	    }
		lv_subterm_18_0=ruleTerm4		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm3Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_18_0, 
        		"Term4");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_6_0(),
            $current);
    }
)	otherlv_20='<=r' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getTerm3Access().getRKeyword_1_6_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_6_2_0()); 
	    }
		lv_subterm_21_0=ruleTerm4		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm3Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_21_0, 
        		"Term4");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_7_0(),
            $current);
    }
)	otherlv_23='>r' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getTerm3Access().getRKeyword_1_7_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_7_2_0()); 
	    }
		lv_subterm_24_0=ruleTerm4		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm3Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_24_0, 
        		"Term4");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_8_0(),
            $current);
    }
)	otherlv_26='>=r' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getTerm3Access().getRKeyword_1_8_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_8_2_0()); 
	    }
		lv_subterm_27_0=ruleTerm4		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm3Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_27_0, 
        		"Term4");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm3Access().getLessThanSubtermAction_1_9_0(),
            $current);
    }
)	otherlv_29='<p' 
    {
    	newLeafNode(otherlv_29, grammarAccess.getTerm3Access().getPKeyword_1_9_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_9_2_0()); 
	    }
		lv_subterm_30_0=ruleTerm4		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm3Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_30_0, 
        		"Term4");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_10_0(),
            $current);
    }
)	otherlv_32='>p' 
    {
    	newLeafNode(otherlv_32, grammarAccess.getTerm3Access().getPKeyword_1_10_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_10_2_0()); 
	    }
		lv_subterm_33_0=ruleTerm4		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm3Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_33_0, 
        		"Term4");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_11_0(),
            $current);
    }
)	otherlv_35='>=s' 
    {
    	newLeafNode(otherlv_35, grammarAccess.getTerm3Access().getSKeyword_1_11_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_11_2_0()); 
	    }
		lv_subterm_36_0=ruleTerm4		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm3Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_36_0, 
        		"Term4");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_12_0(),
            $current);
    }
)	otherlv_38='>s' 
    {
    	newLeafNode(otherlv_38, grammarAccess.getTerm3Access().getSKeyword_1_12_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_12_2_0()); 
	    }
		lv_subterm_39_0=ruleTerm4		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm3Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_39_0, 
        		"Term4");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_13_0(),
            $current);
    }
)	otherlv_41='<=s' 
    {
    	newLeafNode(otherlv_41, grammarAccess.getTerm3Access().getSKeyword_1_13_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_13_2_0()); 
	    }
		lv_subterm_42_0=ruleTerm4		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm3Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_42_0, 
        		"Term4");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm3Access().getLessThanSubtermAction_1_14_0(),
            $current);
    }
)	otherlv_44='<s' 
    {
    	newLeafNode(otherlv_44, grammarAccess.getTerm3Access().getSKeyword_1_14_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_14_2_0()); 
	    }
		lv_subterm_45_0=ruleTerm4		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm3Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_45_0, 
        		"Term4");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleTerm4
entryRuleTerm4 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerm4Rule()); }
	 iv_ruleTerm4=ruleTerm4 
	 { $current=$iv_ruleTerm4.current; } 
	 EOF 
;

// Rule Term4
ruleTerm4 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTerm4Access().getTerm5ParserRuleCall_0()); 
    }
    this_Term5_0=ruleTerm5
    { 
        $current = $this_Term5_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm4Access().getEqualitySubtermAction_1_0_0(),
            $current);
    }
)	otherlv_2='==' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTerm4Access().getEqualsSignEqualsSignKeyword_1_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm4Access().getSubtermTerm5ParserRuleCall_1_0_2_0()); 
	    }
		lv_subterm_3_0=ruleTerm5		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm4Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_3_0, 
        		"Term5");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm4Access().getInequalitySubtermAction_1_1_0(),
            $current);
    }
)	otherlv_5='!=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTerm4Access().getExclamationMarkEqualsSignKeyword_1_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm4Access().getSubtermTerm5ParserRuleCall_1_1_2_0()); 
	    }
		lv_subterm_6_0=ruleTerm5		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm4Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_6_0, 
        		"Term5");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleTerm5
entryRuleTerm5 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerm5Rule()); }
	 iv_ruleTerm5=ruleTerm5 
	 { $current=$iv_ruleTerm5.current; } 
	 EOF 
;

// Rule Term5
ruleTerm5 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTerm5Access().getTerm6ParserRuleCall_0()); 
    }
    this_Term6_0=ruleTerm6
    { 
        $current = $this_Term6_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm5Access().getAddSubtermAction_1_0_0(),
            $current);
    }
)	otherlv_2='++' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTerm5Access().getPlusSignPlusSignKeyword_1_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm5Access().getSubtermTerm6ParserRuleCall_1_0_2_0()); 
	    }
		lv_subterm_3_0=ruleTerm6		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm5Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_3_0, 
        		"Term6");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm5Access().getSubtractSubtermAction_1_1_0(),
            $current);
    }
)	otherlv_5='--' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTerm5Access().getHyphenMinusHyphenMinusKeyword_1_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm5Access().getSubtermTerm6ParserRuleCall_1_1_2_0()); 
	    }
		lv_subterm_6_0=ruleTerm6		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm5Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_6_0, 
        		"Term6");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleTerm6
entryRuleTerm6 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerm6Rule()); }
	 iv_ruleTerm6=ruleTerm6 
	 { $current=$iv_ruleTerm6.current; } 
	 EOF 
;

// Rule Term6
ruleTerm6 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTerm6Access().getTerm7ParserRuleCall_0()); 
    }
    this_Term7_0=ruleTerm7
    { 
        $current = $this_Term7_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm6Access().getNumberOfSubtermAction_1_0(),
            $current);
    }
)	otherlv_2='`' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTerm6Access().getGraveAccentKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm6Access().getSubtermTerm7ParserRuleCall_1_2_0()); 
	    }
		lv_subterm_3_0=ruleTerm7		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm6Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_3_0, 
        		"Term7");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTerm7
entryRuleTerm7 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerm7Rule()); }
	 iv_ruleTerm7=ruleTerm7 
	 { $current=$iv_ruleTerm7.current; } 
	 EOF 
;

// Rule Term7
ruleTerm7 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTerm7Access().getTerm8ParserRuleCall_0()); 
    }
    this_Term8_0=ruleTerm8
    { 
        $current = $this_Term8_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm7Access().getAdditionSubtermAction_1_0_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTerm7Access().getPlusSignKeyword_1_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm7Access().getSubtermTerm8ParserRuleCall_1_0_2_0()); 
	    }
		lv_subterm_3_0=ruleTerm8		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm7Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_3_0, 
        		"Term8");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm7Access().getSubtractionSubtermAction_1_1_0(),
            $current);
    }
)	otherlv_5='-' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTerm7Access().getHyphenMinusKeyword_1_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm7Access().getSubtermTerm8ParserRuleCall_1_1_2_0()); 
	    }
		lv_subterm_6_0=ruleTerm8		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm7Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_6_0, 
        		"Term8");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleTerm8
entryRuleTerm8 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerm8Rule()); }
	 iv_ruleTerm8=ruleTerm8 
	 { $current=$iv_ruleTerm8.current; } 
	 EOF 
;

// Rule Term8
ruleTerm8 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTerm8Access().getTerm9ParserRuleCall_0()); 
    }
    this_Term9_0=ruleTerm9
    { 
        $current = $this_Term9_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm8Access().getMultiplicationSubtermAction_1_0_0(),
            $current);
    }
)	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTerm8Access().getAsteriskKeyword_1_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm8Access().getSubtermTerm9ParserRuleCall_1_0_2_0()); 
	    }
		lv_subterm_3_0=ruleTerm9		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm8Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_3_0, 
        		"Term9");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm8Access().getScalarProductSubtermAction_1_1_0(),
            $current);
    }
)	otherlv_5='**' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTerm8Access().getAsteriskAsteriskKeyword_1_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm8Access().getSubtermTerm9ParserRuleCall_1_1_2_0()); 
	    }
		lv_subterm_6_0=ruleTerm9		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm8Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_6_0, 
        		"Term9");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm8Access().getDivisionSubtermAction_1_2_0(),
            $current);
    }
)	otherlv_8='/' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTerm8Access().getSolidusKeyword_1_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm8Access().getSubtermTerm9ParserRuleCall_1_2_2_0()); 
	    }
		lv_subterm_9_0=ruleTerm9		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm8Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_9_0, 
        		"Term9");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm8Access().getModuloSubtermAction_1_3_0(),
            $current);
    }
)	otherlv_11='%' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTerm8Access().getPercentSignKeyword_1_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm8Access().getSubtermTerm9ParserRuleCall_1_3_2_0()); 
	    }
		lv_subterm_12_0=ruleTerm9		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm8Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_12_0, 
        		"Term9");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleTerm9
entryRuleTerm9 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerm9Rule()); }
	 iv_ruleTerm9=ruleTerm9 
	 { $current=$iv_ruleTerm9.current; } 
	 EOF 
;

// Rule Term9
ruleTerm9 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='not' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTerm9Access().getNotKeyword_0_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerm9Access().getNotAction_0_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm9Access().getSubtermTerm9ParserRuleCall_0_2_0()); 
	    }
		lv_subterm_2_0=ruleTerm9		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm9Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_2_0, 
        		"Term9");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getTerm9Access().getTerm10ParserRuleCall_1()); 
    }
    this_Term10_3=ruleTerm10
    { 
        $current = $this_Term10_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTerm10
entryRuleTerm10 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerm10Rule()); }
	 iv_ruleTerm10=ruleTerm10 
	 { $current=$iv_ruleTerm10.current; } 
	 EOF 
;

// Rule Term10
ruleTerm10 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTerm10Access().getVariableParserRuleCall_0()); 
    }
    this_Variable_0=ruleVariable
    { 
        $current = $this_Variable_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerm10Access().getUserOperatorParserRuleCall_1()); 
    }
    this_UserOperator_1=ruleUserOperator
    { 
        $current = $this_UserOperator_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerm10Access().getOtherBuiltInOperatorParserRuleCall_2()); 
    }
    this_OtherBuiltInOperator_2=ruleOtherBuiltInOperator
    { 
        $current = $this_OtherBuiltInOperator_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerm10Access().getBuiltInConstParserRuleCall_3()); 
    }
    this_BuiltInConst_3=ruleBuiltInConst
    { 
        $current = $this_BuiltInConst_3.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTerm10Access().getLeftParenthesisKeyword_4_0());
    }

    { 
        newCompositeNode(grammarAccess.getTerm10Access().getTermParserRuleCall_4_1()); 
    }
    this_Term_5=ruleTerm
    { 
        $current = $this_Term_5.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTerm10Access().getRightParenthesisKeyword_4_2_0());
    }

    |(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTerm10Access().getCommaKeyword_4_2_1_0());
    }
(
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTerm10Access().getTupleSubtermAction_4_2_1_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm10Access().getSubtermTermParserRuleCall_4_2_1_2_0()); 
	    }
		lv_subterm_9_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm10Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_9_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTerm10Access().getCommaKeyword_4_2_1_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerm10Access().getSubtermTermParserRuleCall_4_2_1_3_1_0()); 
	    }
		lv_subterm_11_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerm10Rule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_11_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_12=')' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getTerm10Access().getRightParenthesisKeyword_4_2_1_4());
    }
))))
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleUserOperator
entryRuleUserOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUserOperatorRule()); }
	 iv_ruleUserOperator=ruleUserOperator 
	 { $current=$iv_ruleUserOperator.current; } 
	 EOF 
;

// Rule UserOperator
ruleUserOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getUserOperatorAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUserOperatorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUserOperatorAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getUserOperatorAccess().getSubtermTermParserRuleCall_2_0_0()); 
	    }
		lv_subterm_2_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUserOperatorRule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_2_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUserOperatorAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUserOperatorAccess().getSubtermTermParserRuleCall_2_1_1_0()); 
	    }
		lv_subterm_4_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUserOperatorRule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_4_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getUserOperatorAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleOtherBuiltInOperator
entryRuleOtherBuiltInOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOtherBuiltInOperatorRule()); }
	 iv_ruleOtherBuiltInOperator=ruleOtherBuiltInOperator 
	 { $current=$iv_ruleOtherBuiltInOperator.current; } 
	 EOF 
;

// Rule OtherBuiltInOperator
ruleOtherBuiltInOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='|' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOtherBuiltInOperatorAccess().getVerticalLineKeyword_0_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityAction_0_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOtherBuiltInOperatorAccess().getSubtermTerm10ParserRuleCall_0_2_0()); 
	    }
		lv_subterm_2_0=ruleTerm10		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOtherBuiltInOperatorRule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_2_0, 
        		"Term10");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='|' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOtherBuiltInOperatorAccess().getVerticalLineKeyword_0_3());
    }
)
    |(	otherlv_4='#(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOtherBuiltInOperatorAccess().getNumberSignLeftParenthesisKeyword_1_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityOfAction_1_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOtherBuiltInOperatorAccess().getSubtermTermParserRuleCall_1_2_0()); 
	    }
		lv_subterm_6_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOtherBuiltInOperatorRule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_6_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getOtherBuiltInOperatorAccess().getCommaKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOtherBuiltInOperatorAccess().getSubtermTermParserRuleCall_1_4_0()); 
	    }
		lv_subterm_8_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOtherBuiltInOperatorRule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_8_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getOtherBuiltInOperatorAccess().getRightParenthesisKeyword_1_5());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getOtherBuiltInOperatorAccess().getCyclicEnumsBuiltInOperatorParserRuleCall_2()); 
    }
    this_CyclicEnumsBuiltInOperator_10=ruleCyclicEnumsBuiltInOperator
    { 
        $current = $this_CyclicEnumsBuiltInOperator_10.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOtherBuiltInOperatorAccess().getPartitionsBuiltInOperatorParserRuleCall_3()); 
    }
    this_PartitionsBuiltInOperator_11=rulePartitionsBuiltInOperator
    { 
        $current = $this_PartitionsBuiltInOperator_11.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOtherBuiltInOperatorAccess().getStringsBuiltInOperatorParserRuleCall_4()); 
    }
    this_StringsBuiltInOperator_12=ruleStringsBuiltInOperator
    { 
        $current = $this_StringsBuiltInOperator_12.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOtherBuiltInOperatorAccess().getListsBuiltInOperatorParserRuleCall_5()); 
    }
    this_ListsBuiltInOperator_13=ruleListsBuiltInOperator
    { 
        $current = $this_ListsBuiltInOperator_13.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBuiltInSort
entryRuleBuiltInSort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuiltInSortRule()); }
	 iv_ruleBuiltInSort=ruleBuiltInSort 
	 { $current=$iv_ruleBuiltInSort.current; } 
	 EOF 
;

// Rule BuiltInSort
ruleBuiltInSort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBuiltInSortAccess().getDotParserRuleCall_0()); 
    }
    this_Dot_0=ruleDot
    { 
        $current = $this_Dot_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuiltInSortAccess().getBooleanParserRuleCall_1()); 
    }
    this_Boolean_1=ruleBoolean
    { 
        $current = $this_Boolean_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuiltInSortAccess().getNumberParserRuleCall_2()); 
    }
    this_Number_2=ruleNumber
    { 
        $current = $this_Number_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuiltInSortAccess().getFiniteEnumerationParserRuleCall_3()); 
    }
    this_FiniteEnumeration_3=ruleFiniteEnumeration
    { 
        $current = $this_FiniteEnumeration_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuiltInSortAccess().getCyclicEnumerationParserRuleCall_4()); 
    }
    this_CyclicEnumeration_4=ruleCyclicEnumeration
    { 
        $current = $this_CyclicEnumeration_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuiltInSortAccess().getFiniteIntRangeParserRuleCall_5()); 
    }
    this_FiniteIntRange_5=ruleFiniteIntRange
    { 
        $current = $this_FiniteIntRange_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuiltInSortAccess().getStringSortParserRuleCall_6()); 
    }
    this_StringSort_6=ruleStringSort
    { 
        $current = $this_StringSort_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuiltInSortAccess().getListSortParserRuleCall_7()); 
    }
    this_ListSort_7=ruleListSort
    { 
        $current = $this_ListSort_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBuiltInConst
entryRuleBuiltInConst returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuiltInConstRule()); }
	 iv_ruleBuiltInConst=ruleBuiltInConst 
	 { $current=$iv_ruleBuiltInConst.current; } 
	 EOF 
;

// Rule BuiltInConst
ruleBuiltInConst returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBuiltInConstAccess().getDotConstantParserRuleCall_0()); 
    }
    this_DotConstant_0=ruleDotConstant
    { 
        $current = $this_DotConstant_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuiltInConstAccess().getBooleanConstantParserRuleCall_1()); 
    }
    this_BooleanConstant_1=ruleBooleanConstant
    { 
        $current = $this_BooleanConstant_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuiltInConstAccess().getMultisetConstantParserRuleCall_2()); 
    }
    this_MultisetConstant_2=ruleMultisetConstant
    { 
        $current = $this_MultisetConstant_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuiltInConstAccess().getNumberConstantParserRuleCall_3()); 
    }
    this_NumberConstant_3=ruleNumberConstant
    { 
        $current = $this_NumberConstant_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuiltInConstAccess().getFiniteIntRangeConstantParserRuleCall_4()); 
    }
    this_FiniteIntRangeConstant_4=ruleFiniteIntRangeConstant
    { 
        $current = $this_FiniteIntRangeConstant_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuiltInConstAccess().getStringConstantParserRuleCall_5()); 
    }
    this_StringConstant_5=ruleStringConstant
    { 
        $current = $this_StringConstant_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBuiltInConstAccess().getListConstantParserRuleCall_6()); 
    }
    this_ListConstant_6=ruleListConstant
    { 
        $current = $this_ListConstant_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMultisetConstant
entryRuleMultisetConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultisetConstantRule()); }
	 iv_ruleMultisetConstant=ruleMultisetConstant 
	 { $current=$iv_ruleMultisetConstant.current; } 
	 EOF 
;

// Rule MultisetConstant
ruleMultisetConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='all' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMultisetConstantAccess().getAllKeyword_0_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getMultisetConstantAccess().getAllAction_0_1(),
            $current);
    }
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultisetConstantAccess().getColonKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultisetConstantAccess().getRefsortSortParserRuleCall_0_3_0()); 
	    }
		lv_refsort_3_0=ruleSort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultisetConstantRule());
	        }
       		set(
       			$current, 
       			"refsort",
        		lv_refsort_3_0, 
        		"Sort");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_4='empty' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMultisetConstantAccess().getEmptyKeyword_1_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getMultisetConstantAccess().getEmptyAction_1_1(),
            $current);
    }
)	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMultisetConstantAccess().getColonKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultisetConstantAccess().getRefsortSortParserRuleCall_1_3_0()); 
	    }
		lv_refsort_7_0=ruleSort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultisetConstantRule());
	        }
       		set(
       			$current, 
       			"refsort",
        		lv_refsort_7_0, 
        		"Sort");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleDot
entryRuleDot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDotRule()); }
	 iv_ruleDot=ruleDot 
	 { $current=$iv_ruleDot.current; } 
	 EOF 
;

// Rule Dot
ruleDot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='DOT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDotAccess().getDOTKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getDotAccess().getDotAction_1(),
            $current);
    }
))
;





// Entry rule entryRuleDotConstant
entryRuleDotConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDotConstantRule()); }
	 iv_ruleDotConstant=ruleDotConstant 
	 { $current=$iv_ruleDotConstant.current; } 
	 EOF 
;

// Rule DotConstant
ruleDotConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='dot' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDotConstantAccess().getDotKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getDotConstantAccess().getDotConstantAction_1(),
            $current);
    }
))
;





// Entry rule entryRuleBoolean
entryRuleBoolean returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanRule()); }
	 iv_ruleBoolean=ruleBoolean 
	 { $current=$iv_ruleBoolean.current; } 
	 EOF 
;

// Rule Boolean
ruleBoolean returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='BOOL' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBooleanAccess().getBOOLKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getBooleanAccess().getBoolAction_1(),
            $current);
    }
))
;





// Entry rule entryRuleBooleanConstant
entryRuleBooleanConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanConstantRule()); }
	 iv_ruleBooleanConstant=ruleBooleanConstant 
	 { $current=$iv_ruleBooleanConstant.current; } 
	 EOF 
;

// Rule BooleanConstant
ruleBooleanConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBooleanConstantAccess().getBooleanConstantAction_0(),
            $current);
    }
)((
(
		lv_value_1_0=	'true' 
    {
        newLeafNode(lv_value_1_0, grammarAccess.getBooleanConstantAccess().getValueTrueKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanConstantRule());
	        }
       		setWithLastConsumed($current, "value", true, "true");
	    }

)
)
    |	otherlv_2='false' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBooleanConstantAccess().getFalseKeyword_1_1());
    }
))
;





// Entry rule entryRuleNumber
entryRuleNumber returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	 iv_ruleNumber=ruleNumber 
	 { $current=$iv_ruleNumber.current; } 
	 EOF 
;

// Rule Number
ruleNumber returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='INT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNumberAccess().getINTKeyword_0_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getNumberAccess().getIntegerAction_0_1(),
            $current);
    }
))
    |(	otherlv_2='NAT' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNumberAccess().getNATKeyword_1_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getNumberAccess().getNaturalAction_1_1(),
            $current);
    }
))
    |(	otherlv_4='POS' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNumberAccess().getPOSKeyword_2_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getNumberAccess().getPositiveAction_2_1(),
            $current);
    }
)))
;





// Entry rule entryRuleNumberConstant
entryRuleNumberConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberConstantRule()); }
	 iv_ruleNumberConstant=ruleNumberConstant 
	 { $current=$iv_ruleNumberConstant.current; } 
	 EOF 
;

// Rule NumberConstant
ruleNumberConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNumberConstantAccess().getNumberConstantAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberConstantAccess().getValueINTEGERParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleINTEGER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberConstantRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INTEGER");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNumberConstantAccess().getColonKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberConstantAccess().getTypeNumberParserRuleCall_2_1_0()); 
	    }
		lv_type_3_0=ruleNumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberConstantRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"Number");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleINTEGER
entryRuleINTEGER returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getINTEGERRule()); } 
	 iv_ruleINTEGER=ruleINTEGER 
	 { $current=$iv_ruleINTEGER.current.getText(); }  
	 EOF 
;

// Rule INTEGER
ruleINTEGER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INTSTRING_0=RULE_INTSTRING    {
		$current.merge(this_INTSTRING_0);
    }

    { 
    newLeafNode(this_INTSTRING_0, grammarAccess.getINTEGERAccess().getINTSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleNAT
entryRuleNAT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNATRule()); } 
	 iv_ruleNAT=ruleNAT 
	 { $current=$iv_ruleNAT.current.getText(); }  
	 EOF 
;

// Rule NAT
ruleNAT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INTSTRING_0=RULE_INTSTRING    {
		$current.merge(this_INTSTRING_0);
    }

    { 
    newLeafNode(this_INTSTRING_0, grammarAccess.getNATAccess().getINTSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleFiniteEnumeration
entryRuleFiniteEnumeration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFiniteEnumerationRule()); }
	 iv_ruleFiniteEnumeration=ruleFiniteEnumeration 
	 { $current=$iv_ruleFiniteEnumeration.current; } 
	 EOF 
;

// Rule FiniteEnumeration
ruleFiniteEnumeration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='enum' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFiniteEnumerationAccess().getEnumKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFiniteEnumerationAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFiniteEnumerationAccess().getElementsFEConstantParserRuleCall_2_0()); 
	    }
		lv_elements_2_0=ruleFEConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFiniteEnumerationRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"FEConstant");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFiniteEnumerationAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFiniteEnumerationAccess().getElementsFEConstantParserRuleCall_3_1_0()); 
	    }
		lv_elements_4_0=ruleFEConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFiniteEnumerationRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_4_0, 
        		"FEConstant");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFiniteEnumerationAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleFEConstant
entryRuleFEConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFEConstantRule()); }
	 iv_ruleFEConstant=ruleFEConstant 
	 { $current=$iv_ruleFEConstant.current; } 
	 EOF 
;

// Rule FEConstant
ruleFEConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFEConstantAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFEConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleCyclicEnumeration
entryRuleCyclicEnumeration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCyclicEnumerationRule()); }
	 iv_ruleCyclicEnumeration=ruleCyclicEnumeration 
	 { $current=$iv_ruleCyclicEnumeration.current; } 
	 EOF 
;

// Rule CyclicEnumeration
ruleCyclicEnumeration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='cyclic' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCyclicEnumerationAccess().getCyclicKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCyclicEnumerationAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCyclicEnumerationAccess().getElementsFEConstantParserRuleCall_2_0()); 
	    }
		lv_elements_2_0=ruleFEConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCyclicEnumerationRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"FEConstant");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCyclicEnumerationAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCyclicEnumerationAccess().getElementsFEConstantParserRuleCall_3_1_0()); 
	    }
		lv_elements_4_0=ruleFEConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCyclicEnumerationRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_4_0, 
        		"FEConstant");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCyclicEnumerationAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleCyclicEnumsBuiltInOperator
entryRuleCyclicEnumsBuiltInOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCyclicEnumsBuiltInOperatorRule()); }
	 iv_ruleCyclicEnumsBuiltInOperator=ruleCyclicEnumsBuiltInOperator 
	 { $current=$iv_ruleCyclicEnumsBuiltInOperator.current; } 
	 EOF 
;

// Rule CyclicEnumsBuiltInOperator
ruleCyclicEnumsBuiltInOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='succ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getSuccKeyword_0_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getLeftParenthesisKeyword_0_1());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getSuccessorAction_0_2(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getSubtermTermParserRuleCall_0_3_0()); 
	    }
		lv_subterm_3_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCyclicEnumsBuiltInOperatorRule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_3_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getRightParenthesisKeyword_0_4());
    }
)
    |(	otherlv_5='pred' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getPredKeyword_1_0());
    }
	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getLeftParenthesisKeyword_1_1());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getPredecessorAction_1_2(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getSubtermTermParserRuleCall_1_3_0()); 
	    }
		lv_subterm_8_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCyclicEnumsBuiltInOperatorRule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_8_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getRightParenthesisKeyword_1_4());
    }
))
;





// Entry rule entryRuleFiniteIntRange
entryRuleFiniteIntRange returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFiniteIntRangeRule()); }
	 iv_ruleFiniteIntRange=ruleFiniteIntRange 
	 { $current=$iv_ruleFiniteIntRange.current; } 
	 EOF 
;

// Rule FiniteIntRange
ruleFiniteIntRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFiniteIntRangeAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFiniteIntRangeAccess().getStartINTEGERParserRuleCall_1_0()); 
	    }
		lv_start_1_0=ruleINTEGER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFiniteIntRangeRule());
	        }
       		set(
       			$current, 
       			"start",
        		lv_start_1_0, 
        		"INTEGER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='..' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFiniteIntRangeAccess().getFullStopFullStopKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFiniteIntRangeAccess().getEndINTEGERParserRuleCall_3_0()); 
	    }
		lv_end_3_0=ruleINTEGER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFiniteIntRangeRule());
	        }
       		set(
       			$current, 
       			"end",
        		lv_end_3_0, 
        		"INTEGER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFiniteIntRangeAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleFiniteIntRangeConstant
entryRuleFiniteIntRangeConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFiniteIntRangeConstantRule()); }
	 iv_ruleFiniteIntRangeConstant=ruleFiniteIntRangeConstant 
	 { $current=$iv_ruleFiniteIntRangeConstant.current; } 
	 EOF 
;

// Rule FiniteIntRangeConstant
ruleFiniteIntRangeConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFiniteIntRangeConstantAccess().getValueINTEGERParserRuleCall_0_0()); 
	    }
		lv_value_0_0=ruleINTEGER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFiniteIntRangeConstantRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INTEGER");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFiniteIntRangeConstantAccess().getRangeFiniteIntRangeParserRuleCall_1_0()); 
	    }
		lv_range_1_0=ruleFiniteIntRange		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFiniteIntRangeConstantRule());
	        }
       		set(
       			$current, 
       			"range",
        		lv_range_1_0, 
        		"FiniteIntRange");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePartition
entryRulePartition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPartitionRule()); }
	 iv_rulePartition=rulePartition 
	 { $current=$iv_rulePartition.current; } 
	 EOF 
;

// Rule Partition
rulePartition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='partition' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPartitionAccess().getPartitionKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPartitionAccess().getDefSortParserRuleCall_1_0()); 
	    }
		lv_def_1_0=ruleSort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPartitionRule());
	        }
       		set(
       			$current, 
       			"def",
        		lv_def_1_0, 
        		"Sort");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='in' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPartitionAccess().getInKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getPartitionAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPartitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPartitionAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPartitionAccess().getPartitionElementsPartitionElementParserRuleCall_5_0()); 
	    }
		lv_partitionElements_5_0=rulePartitionElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPartitionRule());
	        }
       		add(
       			$current, 
       			"partitionElements",
        		lv_partitionElements_5_0, 
        		"PartitionElement");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPartitionAccess().getSemicolonKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPartitionAccess().getPartitionElementsPartitionElementParserRuleCall_6_1_0()); 
	    }
		lv_partitionElements_7_0=rulePartitionElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPartitionRule());
	        }
       		add(
       			$current, 
       			"partitionElements",
        		lv_partitionElements_7_0, 
        		"PartitionElement");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getPartitionAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRulePartitionElement
entryRulePartitionElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPartitionElementRule()); }
	 iv_rulePartitionElement=rulePartitionElement 
	 { $current=$iv_rulePartitionElement.current; } 
	 EOF 
;

// Rule PartitionElement
rulePartitionElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getPartitionElementAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPartitionElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPartitionElementAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPartitionElementAccess().getPartitionelementconstantTermParserRuleCall_2_0()); 
	    }
		lv_partitionelementconstant_2_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPartitionElementRule());
	        }
       		add(
       			$current, 
       			"partitionelementconstant",
        		lv_partitionelementconstant_2_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPartitionElementAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPartitionElementAccess().getPartitionelementconstantTermParserRuleCall_3_1_0()); 
	    }
		lv_partitionelementconstant_4_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPartitionElementRule());
	        }
       		add(
       			$current, 
       			"partitionelementconstant",
        		lv_partitionelementconstant_4_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePartitionsBuiltInOperator
entryRulePartitionsBuiltInOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPartitionsBuiltInOperatorRule()); }
	 iv_rulePartitionsBuiltInOperator=rulePartitionsBuiltInOperator 
	 { $current=$iv_rulePartitionsBuiltInOperator.current; } 
	 EOF 
;

// Rule PartitionsBuiltInOperator
rulePartitionsBuiltInOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='partition' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPartitionsBuiltInOperatorAccess().getPartitionKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPartitionsBuiltInOperatorAccess().getColonKeyword_1());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getPartitionsBuiltInOperatorAccess().getPartitionElementOfAction_2(),
            $current);
    }
)(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getPartitionsBuiltInOperatorAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPartitionsBuiltInOperatorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPartitionsBuiltInOperatorAccess().getLeftParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPartitionsBuiltInOperatorAccess().getSubtermTermParserRuleCall_5_0()); 
	    }
		lv_subterm_5_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPartitionsBuiltInOperatorRule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_5_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPartitionsBuiltInOperatorAccess().getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRuleStringSort
entryRuleStringSort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringSortRule()); }
	 iv_ruleStringSort=ruleStringSort 
	 { $current=$iv_ruleStringSort.current; } 
	 EOF 
;

// Rule StringSort
ruleStringSort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='STRING' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStringSortAccess().getSTRINGKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getStringSortAccess().getStringAction_1(),
            $current);
    }
))
;





// Entry rule entryRuleStringsBuiltInOperator
entryRuleStringsBuiltInOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringsBuiltInOperatorRule()); }
	 iv_ruleStringsBuiltInOperator=ruleStringsBuiltInOperator 
	 { $current=$iv_ruleStringsBuiltInOperator.current; } 
	 EOF 
;

// Rule StringsBuiltInOperator
ruleStringsBuiltInOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='concatstring' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStringsBuiltInOperatorAccess().getConcatstringKeyword_0_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStringsBuiltInOperatorAccess().getLeftParenthesisKeyword_0_1());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getStringsBuiltInOperatorAccess().getConcatenationAction_0_2(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStringsBuiltInOperatorAccess().getSubtermTermParserRuleCall_0_3_0()); 
	    }
		lv_subterm_3_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringsBuiltInOperatorRule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_3_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStringsBuiltInOperatorAccess().getCommaKeyword_0_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringsBuiltInOperatorAccess().getSubtermTermParserRuleCall_0_5_0()); 
	    }
		lv_subterm_5_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringsBuiltInOperatorRule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_5_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStringsBuiltInOperatorAccess().getRightParenthesisKeyword_0_6());
    }
)
    |(	otherlv_7='stringlength' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getStringsBuiltInOperatorAccess().getStringlengthKeyword_1_0());
    }
	otherlv_8='(' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getStringsBuiltInOperatorAccess().getLeftParenthesisKeyword_1_1());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getStringsBuiltInOperatorAccess().getLengthAction_1_2(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStringsBuiltInOperatorAccess().getSubtermTermParserRuleCall_1_3_0()); 
	    }
		lv_subterm_10_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringsBuiltInOperatorRule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_10_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getStringsBuiltInOperatorAccess().getRightParenthesisKeyword_1_4());
    }
)
    |(	otherlv_12='substring' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getStringsBuiltInOperatorAccess().getSubstringKeyword_2_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getStringsBuiltInOperatorAccess().getSubstringAction_2_1(),
            $current);
    }
)	otherlv_14=':' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getStringsBuiltInOperatorAccess().getColonKeyword_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringsBuiltInOperatorAccess().getStartNATParserRuleCall_2_3_0()); 
	    }
		lv_start_15_0=ruleNAT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringsBuiltInOperatorRule());
	        }
       		set(
       			$current, 
       			"start",
        		lv_start_15_0, 
        		"NAT");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_16=',' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getStringsBuiltInOperatorAccess().getCommaKeyword_2_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringsBuiltInOperatorAccess().getLengthNATParserRuleCall_2_5_0()); 
	    }
		lv_length_17_0=ruleNAT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringsBuiltInOperatorRule());
	        }
       		set(
       			$current, 
       			"length",
        		lv_length_17_0, 
        		"NAT");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_18='(' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getStringsBuiltInOperatorAccess().getLeftParenthesisKeyword_2_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringsBuiltInOperatorAccess().getSubtermTermParserRuleCall_2_7_0()); 
	    }
		lv_subterm_19_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringsBuiltInOperatorRule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_19_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_20=')' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getStringsBuiltInOperatorAccess().getRightParenthesisKeyword_2_8());
    }
))
;





// Entry rule entryRuleStringConstant
entryRuleStringConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringConstantRule()); }
	 iv_ruleStringConstant=ruleStringConstant 
	 { $current=$iv_ruleStringConstant.current; } 
	 EOF 
;

// Rule StringConstant
ruleStringConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringConstantAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleListSort
entryRuleListSort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListSortRule()); }
	 iv_ruleListSort=ruleListSort 
	 { $current=$iv_ruleListSort.current; } 
	 EOF 
;

// Rule ListSort
ruleListSort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='LIST' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getListSortAccess().getLISTKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getListSortAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListSortAccess().getBasisSortParserRuleCall_2_0()); 
	    }
		lv_basis_2_0=ruleSort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListSortRule());
	        }
       		set(
       			$current, 
       			"basis",
        		lv_basis_2_0, 
        		"Sort");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleListsBuiltInOperator
entryRuleListsBuiltInOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListsBuiltInOperatorRule()); }
	 iv_ruleListsBuiltInOperator=ruleListsBuiltInOperator 
	 { $current=$iv_ruleListsBuiltInOperator.current; } 
	 EOF 
;

// Rule ListsBuiltInOperator
ruleListsBuiltInOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='concatlists' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getListsBuiltInOperatorAccess().getConcatlistsKeyword_0_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getListsBuiltInOperatorAccess().getLeftParenthesisKeyword_0_1());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getListsBuiltInOperatorAccess().getConcatenationAction_0_2(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getListsBuiltInOperatorAccess().getSubtermTermParserRuleCall_0_3_0()); 
	    }
		lv_subterm_3_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListsBuiltInOperatorRule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_3_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getListsBuiltInOperatorAccess().getCommaKeyword_0_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListsBuiltInOperatorAccess().getSubtermTermParserRuleCall_0_5_0()); 
	    }
		lv_subterm_5_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListsBuiltInOperatorRule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_5_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getListsBuiltInOperatorAccess().getRightParenthesisKeyword_0_6());
    }
)
    |(	otherlv_7='appendtolist' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getListsBuiltInOperatorAccess().getAppendtolistKeyword_1_0());
    }
	otherlv_8='(' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getListsBuiltInOperatorAccess().getLeftParenthesisKeyword_1_1());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getListsBuiltInOperatorAccess().getAppendAction_1_2(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getListsBuiltInOperatorAccess().getSubtermTermParserRuleCall_1_3_0()); 
	    }
		lv_subterm_10_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListsBuiltInOperatorRule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_10_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getListsBuiltInOperatorAccess().getCommaKeyword_1_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListsBuiltInOperatorAccess().getSubtermTermParserRuleCall_1_5_0()); 
	    }
		lv_subterm_12_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListsBuiltInOperatorRule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_12_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_13=')' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getListsBuiltInOperatorAccess().getRightParenthesisKeyword_1_6());
    }
)
    |(	otherlv_14='listlength' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getListsBuiltInOperatorAccess().getListlengthKeyword_2_0());
    }
	otherlv_15='(' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getListsBuiltInOperatorAccess().getLeftParenthesisKeyword_2_1());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getListsBuiltInOperatorAccess().getLengthAction_2_2(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getListsBuiltInOperatorAccess().getSubtermTermParserRuleCall_2_3_0()); 
	    }
		lv_subterm_17_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListsBuiltInOperatorRule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_17_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_18=')' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getListsBuiltInOperatorAccess().getRightParenthesisKeyword_2_4());
    }
)
    |(	otherlv_19='sublist' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getListsBuiltInOperatorAccess().getSublistKeyword_3_0());
    }
	otherlv_20=':' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getListsBuiltInOperatorAccess().getColonKeyword_3_1());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getListsBuiltInOperatorAccess().getSublistAction_3_2(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getListsBuiltInOperatorAccess().getStartNATParserRuleCall_3_3_0()); 
	    }
		lv_start_22_0=ruleNAT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListsBuiltInOperatorRule());
	        }
       		set(
       			$current, 
       			"start",
        		lv_start_22_0, 
        		"NAT");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_23=',' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getListsBuiltInOperatorAccess().getCommaKeyword_3_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListsBuiltInOperatorAccess().getLengthNATParserRuleCall_3_5_0()); 
	    }
		lv_length_24_0=ruleNAT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListsBuiltInOperatorRule());
	        }
       		set(
       			$current, 
       			"length",
        		lv_length_24_0, 
        		"NAT");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_25='(' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getListsBuiltInOperatorAccess().getLeftParenthesisKeyword_3_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListsBuiltInOperatorAccess().getSubtermTermParserRuleCall_3_7_0()); 
	    }
		lv_subterm_26_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListsBuiltInOperatorRule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_26_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_27=')' 
    {
    	newLeafNode(otherlv_27, grammarAccess.getListsBuiltInOperatorAccess().getRightParenthesisKeyword_3_8());
    }
)
    |(	otherlv_28='memberat' 
    {
    	newLeafNode(otherlv_28, grammarAccess.getListsBuiltInOperatorAccess().getMemberatKeyword_4_0());
    }
	otherlv_29=':' 
    {
    	newLeafNode(otherlv_29, grammarAccess.getListsBuiltInOperatorAccess().getColonKeyword_4_1());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getListsBuiltInOperatorAccess().getMemberAtIndexAction_4_2(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getListsBuiltInOperatorAccess().getIndexNATParserRuleCall_4_3_0()); 
	    }
		lv_index_31_0=ruleNAT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListsBuiltInOperatorRule());
	        }
       		set(
       			$current, 
       			"index",
        		lv_index_31_0, 
        		"NAT");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_32='(' 
    {
    	newLeafNode(otherlv_32, grammarAccess.getListsBuiltInOperatorAccess().getLeftParenthesisKeyword_4_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListsBuiltInOperatorAccess().getSubtermTermParserRuleCall_4_5_0()); 
	    }
		lv_subterm_33_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListsBuiltInOperatorRule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_33_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_34=')' 
    {
    	newLeafNode(otherlv_34, grammarAccess.getListsBuiltInOperatorAccess().getRightParenthesisKeyword_4_6());
    }
)
    |(	otherlv_35='makelist' 
    {
    	newLeafNode(otherlv_35, grammarAccess.getListsBuiltInOperatorAccess().getMakelistKeyword_5_0());
    }
	otherlv_36=':' 
    {
    	newLeafNode(otherlv_36, grammarAccess.getListsBuiltInOperatorAccess().getColonKeyword_5_1());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getListsBuiltInOperatorAccess().getMakeListAction_5_2(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getListsBuiltInOperatorAccess().getRefsortSortParserRuleCall_5_3_0()); 
	    }
		lv_refsort_38_0=ruleSort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListsBuiltInOperatorRule());
	        }
       		set(
       			$current, 
       			"refsort",
        		lv_refsort_38_0, 
        		"Sort");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_39='(' 
    {
    	newLeafNode(otherlv_39, grammarAccess.getListsBuiltInOperatorAccess().getLeftParenthesisKeyword_5_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getListsBuiltInOperatorAccess().getSubtermTermParserRuleCall_5_5_0_0()); 
	    }
		lv_subterm_40_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListsBuiltInOperatorRule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_40_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_41=',' 
    {
    	newLeafNode(otherlv_41, grammarAccess.getListsBuiltInOperatorAccess().getCommaKeyword_5_5_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListsBuiltInOperatorAccess().getSubtermTermParserRuleCall_5_5_1_1_0()); 
	    }
		lv_subterm_42_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListsBuiltInOperatorRule());
	        }
       		add(
       			$current, 
       			"subterm",
        		lv_subterm_42_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_43=')' 
    {
    	newLeafNode(otherlv_43, grammarAccess.getListsBuiltInOperatorAccess().getRightParenthesisKeyword_5_6());
    }
))
;





// Entry rule entryRuleListConstant
entryRuleListConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListConstantRule()); }
	 iv_ruleListConstant=ruleListConstant 
	 { $current=$iv_ruleListConstant.current; } 
	 EOF 
;

// Rule ListConstant
ruleListConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='emptylist' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getListConstantAccess().getEmptylistKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getListConstantAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListConstantAccess().getRefsortSortParserRuleCall_2_0()); 
	    }
		lv_refsort_2_0=ruleSort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListConstantRule());
	        }
       		set(
       			$current, 
       			"refsort",
        		lv_refsort_2_0, 
        		"Sort");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleArbitrarySort
entryRuleArbitrarySort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArbitrarySortRule()); }
	 iv_ruleArbitrarySort=ruleArbitrarySort 
	 { $current=$iv_ruleArbitrarySort.current; } 
	 EOF 
;

// Rule ArbitrarySort
ruleArbitrarySort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getArbitrarySortAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArbitrarySortRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleArbitraryOperator
entryRuleArbitraryOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArbitraryOperatorRule()); }
	 iv_ruleArbitraryOperator=ruleArbitraryOperator 
	 { $current=$iv_ruleArbitraryOperator.current; } 
	 EOF 
;

// Rule ArbitraryOperator
ruleArbitraryOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getArbitraryOperatorAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArbitraryOperatorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArbitraryOperatorAccess().getColonKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getArbitraryOperatorAccess().getInputSortParserRuleCall_2_0_0()); 
	    }
		lv_input_2_0=ruleSort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArbitraryOperatorRule());
	        }
       		add(
       			$current, 
       			"input",
        		lv_input_2_0, 
        		"Sort");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArbitraryOperatorAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArbitraryOperatorAccess().getInputSortParserRuleCall_2_1_1_0()); 
	    }
		lv_input_4_0=ruleSort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArbitraryOperatorRule());
	        }
       		add(
       			$current, 
       			"input",
        		lv_input_4_0, 
        		"Sort");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5='->' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getArbitraryOperatorAccess().getHyphenMinusGreaterThanSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArbitraryOperatorAccess().getOutputSortParserRuleCall_4_0()); 
	    }
		lv_output_6_0=ruleSort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArbitraryOperatorRule());
	        }
       		set(
       			$current, 
       			"output",
        		lv_output_6_0, 
        		"Sort");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





RULE_INTSTRING : '-'? ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


