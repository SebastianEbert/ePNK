/*
* generated by Xtext
*/
package org.pnml.tools.epnk.pntypes.hlpngs.datatypes.concretesyntax.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.pnml.tools.epnk.pntypes.hlpngs.datatypes.concretesyntax.services.HLPNGInscriptionLanguageGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class HLPNGInscriptionLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private HLPNGInscriptionLanguageGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Document_Alternatives(this, this, 0, inst);
			case 1: return new Declarations_Group(this, this, 1, inst);
			case 2: return new Declaration_Alternatives(this, this, 2, inst);
			case 3: return new SortDecl_Alternatives(this, this, 3, inst);
			case 4: return new VariableDecl_Group(this, this, 4, inst);
			case 5: return new NamedSort_Group(this, this, 5, inst);
			case 6: return new OperatorDecl_NamedOperatorParserRuleCall(this, this, 6, inst);
			case 7: return new NamedOperator_Group(this, this, 7, inst);
			case 8: return new Sort_Alternatives(this, this, 8, inst);
			case 9: return new MultiSetSort_Group(this, this, 9, inst);
			case 10: return new ProductSort_Group(this, this, 10, inst);
			case 11: return new UserSort_NameAssignment(this, this, 11, inst);
			case 12: return new Term_Term1ParserRuleCall(this, this, 12, inst);
			case 13: return new Term1_Group(this, this, 13, inst);
			case 14: return new Term2_Group(this, this, 14, inst);
			case 15: return new Term3_Group(this, this, 15, inst);
			case 16: return new Term4_Group(this, this, 16, inst);
			case 17: return new Term5_Group(this, this, 17, inst);
			case 18: return new Term6_Group(this, this, 18, inst);
			case 19: return new Term7_Group(this, this, 19, inst);
			case 20: return new Term8_Group(this, this, 20, inst);
			case 21: return new Term9_Alternatives(this, this, 21, inst);
			case 22: return new Term10_Alternatives(this, this, 22, inst);
			case 23: return new Variable_NameAssignment(this, this, 23, inst);
			case 24: return new UserOperator_Group(this, this, 24, inst);
			case 25: return new OtherBuiltInOperator_Alternatives(this, this, 25, inst);
			case 26: return new BuiltInSort_Alternatives(this, this, 26, inst);
			case 27: return new BuiltInConst_Alternatives(this, this, 27, inst);
			case 28: return new MultisetConstant_Alternatives(this, this, 28, inst);
			case 29: return new Dot_Group(this, this, 29, inst);
			case 30: return new DotConstant_Group(this, this, 30, inst);
			case 31: return new Boolean_Group(this, this, 31, inst);
			case 32: return new BooleanConstant_Group(this, this, 32, inst);
			case 33: return new Number_Alternatives(this, this, 33, inst);
			case 34: return new NumberConstant_Group(this, this, 34, inst);
			case 35: return new FiniteEnumeration_Group(this, this, 35, inst);
			case 36: return new FEConstant_NameAssignment(this, this, 36, inst);
			case 37: return new CyclicEnumeration_Group(this, this, 37, inst);
			case 38: return new CyclicEnumsBuiltInOperator_Alternatives(this, this, 38, inst);
			case 39: return new FiniteIntRange_Group(this, this, 39, inst);
			case 40: return new FiniteIntRangeConstant_Group(this, this, 40, inst);
			case 41: return new Partition_Group(this, this, 41, inst);
			case 42: return new PartitionElement_Group(this, this, 42, inst);
			case 43: return new PartitionsBuiltInOperator_Group(this, this, 43, inst);
			case 44: return new StringSort_Group(this, this, 44, inst);
			case 45: return new StringsBuiltInOperator_Alternatives(this, this, 45, inst);
			case 46: return new StringConstant_ValueAssignment(this, this, 46, inst);
			case 47: return new ListSort_Group(this, this, 47, inst);
			case 48: return new ListsBuiltInOperator_Alternatives(this, this, 48, inst);
			case 49: return new ListConstant_Group(this, this, 49, inst);
			case 50: return new ArbitrarySort_NameAssignment(this, this, 50, inst);
			case 51: return new ArbitraryOperator_Group(this, this, 51, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Document ****************
 *
 * / * -------------------------------------------------------------
 *  * Concrete syntax for package hlpnginscriptiondocument
 *  * ------------------------------------------------------------- * /
 * 
 * Document returns document::HLPNGInscriptionDocument:
 * 
 * 	(declarations+=Declarations ";" | term+=Term ";")*;
 *
 **/

// (declarations+=Declarations ";" | term+=Term ";")*
protected class Document_Alternatives extends AlternativesToken {

	public Document_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDocumentAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Document_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Document_Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// declarations+=Declarations ";"
protected class Document_Group_0 extends GroupToken {
	
	public Document_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDocumentAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Document_SemicolonKeyword_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// declarations+=Declarations
protected class Document_DeclarationsAssignment_0_0 extends AssignmentToken  {
	
	public Document_DeclarationsAssignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDocumentAccess().getDeclarationsAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declarations",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declarations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDeclarationsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDocumentAccess().getDeclarationsDeclarationsParserRuleCall_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Document_Alternatives(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// ";"
protected class Document_SemicolonKeyword_0_1 extends KeywordToken  {
	
	public Document_SemicolonKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDocumentAccess().getSemicolonKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Document_DeclarationsAssignment_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// term+=Term ";"
protected class Document_Group_1 extends GroupToken {
	
	public Document_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDocumentAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Document_SemicolonKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// term+=Term
protected class Document_TermAssignment_1_0 extends AssignmentToken  {
	
	public Document_TermAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDocumentAccess().getTermAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("term",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("term");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDocumentAccess().getTermTermParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Document_Alternatives(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// ";"
protected class Document_SemicolonKeyword_1_1 extends KeywordToken  {
	
	public Document_SemicolonKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDocumentAccess().getSemicolonKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Document_TermAssignment_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule Document ****************/


/************ begin Rule Declarations ****************
 *
 * // We did not yet define a syntax for terms, so it
 * 
 * 
 * // is just a single keyword 'term' for now and return a DotConstant.
 * 
 * 
 * // The syntax for Terms needs to be added though.
 *  // Term returns terms::Term :
 * 
 * 
 * //    'term' {dots::DotConstant} ';';    
 * 
 * 
 * / * -------------------------------------------------------------
 *  * Concrete syntax for package terms
 *  * ------------------------------------------------------------- * /
 * 
 * Declarations returns terms::Declarations:
 * 
 * 	{terms::Declarations} ("sorts" declaration+=SortDecl ("," declaration+=SortDecl)* ";" | "vars"
 * 
 * 	declaration+=VariableDecl ("," declaration+=VariableDecl)* ";" | "ops" declaration+=OperatorDecl (","
 * 
 * 	declaration+=OperatorDecl)* ";" | "sortsymbols" declaration+=ArbitrarySort ("," declaration+=ArbitrarySort)* ";" |
 * 
 * 	"opsymbols" declaration+=ArbitraryOperator ("," declaration+=ArbitraryOperator)* ";")*;
 *
 **/

// {terms::Declarations} ("sorts" declaration+=SortDecl ("," declaration+=SortDecl)* ";" | "vars" declaration+=VariableDecl
// 
// ("," declaration+=VariableDecl)* ";" | "ops" declaration+=OperatorDecl ("," declaration+=OperatorDecl)* ";" |
// 
// "sortsymbols" declaration+=ArbitrarySort ("," declaration+=ArbitrarySort)* ";" | "opsymbols"
// 
// declaration+=ArbitraryOperator ("," declaration+=ArbitraryOperator)* ";")*
protected class Declarations_Group extends GroupToken {
	
	public Declarations_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Declarations_DeclarationsAction_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDeclarationsAccess().getDeclarationsAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {terms::Declarations}
protected class Declarations_DeclarationsAction_0 extends ActionToken  {

	public Declarations_DeclarationsAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getDeclarationsAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// ("sorts" declaration+=SortDecl ("," declaration+=SortDecl)* ";" | "vars" declaration+=VariableDecl (","
// 
// declaration+=VariableDecl)* ";" | "ops" declaration+=OperatorDecl ("," declaration+=OperatorDecl)* ";" | "sortsymbols"
// 
// declaration+=ArbitrarySort ("," declaration+=ArbitrarySort)* ";" | "opsymbols" declaration+=ArbitraryOperator (","
// 
// declaration+=ArbitraryOperator)* ";")*
protected class Declarations_Alternatives_1 extends AlternativesToken {

	public Declarations_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_Group_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Declarations_Group_1_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Declarations_Group_1_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Declarations_Group_1_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Declarations_Group_1_4(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

}

// "sorts" declaration+=SortDecl ("," declaration+=SortDecl)* ";"
protected class Declarations_Group_1_0 extends GroupToken {
	
	public Declarations_Group_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_SemicolonKeyword_1_0_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "sorts"
protected class Declarations_SortsKeyword_1_0_0 extends KeywordToken  {
	
	public Declarations_SortsKeyword_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getSortsKeyword_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Declarations_DeclarationsAction_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// declaration+=SortDecl
protected class Declarations_DeclarationAssignment_1_0_1 extends AssignmentToken  {
	
	public Declarations_DeclarationAssignment_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getDeclarationAssignment_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SortDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declaration",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declaration");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSortDeclRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDeclarationsAccess().getDeclarationSortDeclParserRuleCall_1_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Declarations_SortsKeyword_1_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," declaration+=SortDecl)*
protected class Declarations_Group_1_0_2 extends GroupToken {
	
	public Declarations_Group_1_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getGroup_1_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_DeclarationAssignment_1_0_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class Declarations_CommaKeyword_1_0_2_0 extends KeywordToken  {
	
	public Declarations_CommaKeyword_1_0_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getCommaKeyword_1_0_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_Group_1_0_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Declarations_DeclarationAssignment_1_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// declaration+=SortDecl
protected class Declarations_DeclarationAssignment_1_0_2_1 extends AssignmentToken  {
	
	public Declarations_DeclarationAssignment_1_0_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getDeclarationAssignment_1_0_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SortDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declaration",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declaration");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSortDeclRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDeclarationsAccess().getDeclarationSortDeclParserRuleCall_1_0_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Declarations_CommaKeyword_1_0_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ";"
protected class Declarations_SemicolonKeyword_1_0_3 extends KeywordToken  {
	
	public Declarations_SemicolonKeyword_1_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getSemicolonKeyword_1_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_Group_1_0_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Declarations_DeclarationAssignment_1_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


// "vars" declaration+=VariableDecl ("," declaration+=VariableDecl)* ";"
protected class Declarations_Group_1_1 extends GroupToken {
	
	public Declarations_Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_SemicolonKeyword_1_1_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "vars"
protected class Declarations_VarsKeyword_1_1_0 extends KeywordToken  {
	
	public Declarations_VarsKeyword_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getVarsKeyword_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Declarations_DeclarationsAction_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// declaration+=VariableDecl
protected class Declarations_DeclarationAssignment_1_1_1 extends AssignmentToken  {
	
	public Declarations_DeclarationAssignment_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getDeclarationAssignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declaration",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declaration");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVariableDeclRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDeclarationsAccess().getDeclarationVariableDeclParserRuleCall_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Declarations_VarsKeyword_1_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," declaration+=VariableDecl)*
protected class Declarations_Group_1_1_2 extends GroupToken {
	
	public Declarations_Group_1_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getGroup_1_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_DeclarationAssignment_1_1_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class Declarations_CommaKeyword_1_1_2_0 extends KeywordToken  {
	
	public Declarations_CommaKeyword_1_1_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getCommaKeyword_1_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_Group_1_1_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Declarations_DeclarationAssignment_1_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// declaration+=VariableDecl
protected class Declarations_DeclarationAssignment_1_1_2_1 extends AssignmentToken  {
	
	public Declarations_DeclarationAssignment_1_1_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getDeclarationAssignment_1_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declaration",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declaration");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVariableDeclRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDeclarationsAccess().getDeclarationVariableDeclParserRuleCall_1_1_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Declarations_CommaKeyword_1_1_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ";"
protected class Declarations_SemicolonKeyword_1_1_3 extends KeywordToken  {
	
	public Declarations_SemicolonKeyword_1_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getSemicolonKeyword_1_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_Group_1_1_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Declarations_DeclarationAssignment_1_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


// "ops" declaration+=OperatorDecl ("," declaration+=OperatorDecl)* ";"
protected class Declarations_Group_1_2 extends GroupToken {
	
	public Declarations_Group_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getGroup_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_SemicolonKeyword_1_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "ops"
protected class Declarations_OpsKeyword_1_2_0 extends KeywordToken  {
	
	public Declarations_OpsKeyword_1_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getOpsKeyword_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Declarations_DeclarationsAction_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// declaration+=OperatorDecl
protected class Declarations_DeclarationAssignment_1_2_1 extends AssignmentToken  {
	
	public Declarations_DeclarationAssignment_1_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getDeclarationAssignment_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OperatorDecl_NamedOperatorParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declaration",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declaration");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOperatorDeclRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDeclarationsAccess().getDeclarationOperatorDeclParserRuleCall_1_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Declarations_OpsKeyword_1_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," declaration+=OperatorDecl)*
protected class Declarations_Group_1_2_2 extends GroupToken {
	
	public Declarations_Group_1_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getGroup_1_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_DeclarationAssignment_1_2_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class Declarations_CommaKeyword_1_2_2_0 extends KeywordToken  {
	
	public Declarations_CommaKeyword_1_2_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getCommaKeyword_1_2_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_Group_1_2_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Declarations_DeclarationAssignment_1_2_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// declaration+=OperatorDecl
protected class Declarations_DeclarationAssignment_1_2_2_1 extends AssignmentToken  {
	
	public Declarations_DeclarationAssignment_1_2_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getDeclarationAssignment_1_2_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OperatorDecl_NamedOperatorParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declaration",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declaration");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOperatorDeclRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDeclarationsAccess().getDeclarationOperatorDeclParserRuleCall_1_2_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Declarations_CommaKeyword_1_2_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ";"
protected class Declarations_SemicolonKeyword_1_2_3 extends KeywordToken  {
	
	public Declarations_SemicolonKeyword_1_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getSemicolonKeyword_1_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_Group_1_2_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Declarations_DeclarationAssignment_1_2_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


// "sortsymbols" declaration+=ArbitrarySort ("," declaration+=ArbitrarySort)* ";"
protected class Declarations_Group_1_3 extends GroupToken {
	
	public Declarations_Group_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getGroup_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_SemicolonKeyword_1_3_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "sortsymbols"
protected class Declarations_SortsymbolsKeyword_1_3_0 extends KeywordToken  {
	
	public Declarations_SortsymbolsKeyword_1_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getSortsymbolsKeyword_1_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Declarations_DeclarationsAction_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// declaration+=ArbitrarySort
protected class Declarations_DeclarationAssignment_1_3_1 extends AssignmentToken  {
	
	public Declarations_DeclarationAssignment_1_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getDeclarationAssignment_1_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArbitrarySort_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declaration",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declaration");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArbitrarySortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDeclarationsAccess().getDeclarationArbitrarySortParserRuleCall_1_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Declarations_SortsymbolsKeyword_1_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," declaration+=ArbitrarySort)*
protected class Declarations_Group_1_3_2 extends GroupToken {
	
	public Declarations_Group_1_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getGroup_1_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_DeclarationAssignment_1_3_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class Declarations_CommaKeyword_1_3_2_0 extends KeywordToken  {
	
	public Declarations_CommaKeyword_1_3_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getCommaKeyword_1_3_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_Group_1_3_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Declarations_DeclarationAssignment_1_3_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// declaration+=ArbitrarySort
protected class Declarations_DeclarationAssignment_1_3_2_1 extends AssignmentToken  {
	
	public Declarations_DeclarationAssignment_1_3_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getDeclarationAssignment_1_3_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArbitrarySort_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declaration",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declaration");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArbitrarySortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDeclarationsAccess().getDeclarationArbitrarySortParserRuleCall_1_3_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Declarations_CommaKeyword_1_3_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ";"
protected class Declarations_SemicolonKeyword_1_3_3 extends KeywordToken  {
	
	public Declarations_SemicolonKeyword_1_3_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getSemicolonKeyword_1_3_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_Group_1_3_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Declarations_DeclarationAssignment_1_3_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


// "opsymbols" declaration+=ArbitraryOperator ("," declaration+=ArbitraryOperator)* ";"
protected class Declarations_Group_1_4 extends GroupToken {
	
	public Declarations_Group_1_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getGroup_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_SemicolonKeyword_1_4_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "opsymbols"
protected class Declarations_OpsymbolsKeyword_1_4_0 extends KeywordToken  {
	
	public Declarations_OpsymbolsKeyword_1_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getOpsymbolsKeyword_1_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Declarations_DeclarationsAction_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// declaration+=ArbitraryOperator
protected class Declarations_DeclarationAssignment_1_4_1 extends AssignmentToken  {
	
	public Declarations_DeclarationAssignment_1_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getDeclarationAssignment_1_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArbitraryOperator_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declaration",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declaration");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArbitraryOperatorRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDeclarationsAccess().getDeclarationArbitraryOperatorParserRuleCall_1_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Declarations_OpsymbolsKeyword_1_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," declaration+=ArbitraryOperator)*
protected class Declarations_Group_1_4_2 extends GroupToken {
	
	public Declarations_Group_1_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getGroup_1_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_DeclarationAssignment_1_4_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class Declarations_CommaKeyword_1_4_2_0 extends KeywordToken  {
	
	public Declarations_CommaKeyword_1_4_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getCommaKeyword_1_4_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_Group_1_4_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Declarations_DeclarationAssignment_1_4_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// declaration+=ArbitraryOperator
protected class Declarations_DeclarationAssignment_1_4_2_1 extends AssignmentToken  {
	
	public Declarations_DeclarationAssignment_1_4_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getDeclarationAssignment_1_4_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArbitraryOperator_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declaration",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declaration");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArbitraryOperatorRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDeclarationsAccess().getDeclarationArbitraryOperatorParserRuleCall_1_4_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Declarations_CommaKeyword_1_4_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ";"
protected class Declarations_SemicolonKeyword_1_4_3 extends KeywordToken  {
	
	public Declarations_SemicolonKeyword_1_4_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDeclarationsAccess().getSemicolonKeyword_1_4_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declarations_Group_1_4_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Declarations_DeclarationAssignment_1_4_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}




/************ end Rule Declarations ****************/


/************ begin Rule Declaration ****************
 *
 * Declaration returns terms::Declaration:
 * 
 * 	SortDecl | VariableDecl;
 *
 **/

// SortDecl | VariableDecl
protected class Declaration_Alternatives extends AlternativesToken {

	public Declaration_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDeclarationAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Declaration_SortDeclParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Declaration_VariableDeclParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNamedSortRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPartitionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SortDecl
protected class Declaration_SortDeclParserRuleCall_0 extends RuleCallToken {
	
	public Declaration_SortDeclParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDeclarationAccess().getSortDeclParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SortDecl_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNamedSortRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPartitionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SortDecl_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// VariableDecl
protected class Declaration_VariableDeclParserRuleCall_1 extends RuleCallToken {
	
	public Declaration_VariableDeclParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDeclarationAccess().getVariableDeclParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVariableDeclRule().getType().getClassifier())
			return null;
		if(checkForRecursion(VariableDecl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Declaration ****************/


/************ begin Rule SortDecl ****************
 *
 * SortDecl returns terms::SortDecl: // for now there are only named sorts as sort declarations
 *  // but there will be more
 * 
 * 
 * 	NamedSort | Partition;
 *
 **/

// // for now there are only named sorts as sort declarations
//  // but there will be more
//  NamedSort | Partition
protected class SortDecl_Alternatives extends AlternativesToken {

	public SortDecl_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSortDeclAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SortDecl_NamedSortParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SortDecl_PartitionParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNamedSortRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPartitionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// // for now there are only named sorts as sort declarations
//  // but there will be more
//  NamedSort
protected class SortDecl_NamedSortParserRuleCall_0 extends RuleCallToken {
	
	public SortDecl_NamedSortParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSortDeclAccess().getNamedSortParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NamedSort_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNamedSortRule().getType().getClassifier())
			return null;
		if(checkForRecursion(NamedSort_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Partition
protected class SortDecl_PartitionParserRuleCall_1 extends RuleCallToken {
	
	public SortDecl_PartitionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSortDeclAccess().getPartitionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Partition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPartitionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Partition_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule SortDecl ****************/


/************ begin Rule VariableDecl ****************
 *
 * VariableDecl returns terms::VariableDecl:
 * 
 * 	name=ID ":" sort=Sort;
 *
 **/

// name=ID ":" sort=Sort
protected class VariableDecl_Group extends GroupToken {
	
	public VariableDecl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVariableDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableDecl_SortAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVariableDeclRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class VariableDecl_NameAssignment_0 extends AssignmentToken  {
	
	public VariableDecl_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableDeclAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getVariableDeclAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getVariableDeclAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class VariableDecl_ColonKeyword_1 extends KeywordToken  {
	
	public VariableDecl_ColonKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getVariableDeclAccess().getColonKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableDecl_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// sort=Sort
protected class VariableDecl_SortAssignment_2 extends AssignmentToken  {
	
	public VariableDecl_SortAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableDeclAccess().getSortAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sort_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("sort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("sort");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getVariableDeclAccess().getSortSortParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new VariableDecl_ColonKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule VariableDecl ****************/


/************ begin Rule NamedSort ****************
 *
 * NamedSort returns terms::NamedSort:
 * 
 * 	name=ID "=" def=Sort;
 *
 **/

// name=ID "=" def=Sort
protected class NamedSort_Group extends GroupToken {
	
	public NamedSort_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNamedSortAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NamedSort_DefAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNamedSortRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class NamedSort_NameAssignment_0 extends AssignmentToken  {
	
	public NamedSort_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNamedSortAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNamedSortAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getNamedSortAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class NamedSort_EqualsSignKeyword_1 extends KeywordToken  {
	
	public NamedSort_EqualsSignKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNamedSortAccess().getEqualsSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NamedSort_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// def=Sort
protected class NamedSort_DefAssignment_2 extends AssignmentToken  {
	
	public NamedSort_DefAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNamedSortAccess().getDefAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sort_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("def",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("def");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNamedSortAccess().getDefSortParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NamedSort_EqualsSignKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule NamedSort ****************/


/************ begin Rule OperatorDecl ****************
 *
 * OperatorDecl returns terms::OperatorDecl:
 * 
 * 	NamedOperator;
 *
 **/

// NamedOperator
protected class OperatorDecl_NamedOperatorParserRuleCall extends RuleCallToken {
	
	public OperatorDecl_NamedOperatorParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOperatorDeclAccess().getNamedOperatorParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NamedOperator_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNamedOperatorRule().getType().getClassifier())
			return null;
		if(checkForRecursion(NamedOperator_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule OperatorDecl ****************/


/************ begin Rule NamedOperator ****************
 *
 * NamedOperator returns terms::NamedOperator:
 * 
 * 	name=ID "(" (parameters+=VariableDecl ("," parameters+=VariableDecl)*)? ")" "=" def=Term;
 *
 **/

// name=ID "(" (parameters+=VariableDecl ("," parameters+=VariableDecl)*)? ")" "=" def=Term
protected class NamedOperator_Group extends GroupToken {
	
	public NamedOperator_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNamedOperatorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NamedOperator_DefAssignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNamedOperatorRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class NamedOperator_NameAssignment_0 extends AssignmentToken  {
	
	public NamedOperator_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNamedOperatorAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNamedOperatorAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getNamedOperatorAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class NamedOperator_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public NamedOperator_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNamedOperatorAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NamedOperator_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (parameters+=VariableDecl ("," parameters+=VariableDecl)*)?
protected class NamedOperator_Group_2 extends GroupToken {
	
	public NamedOperator_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNamedOperatorAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NamedOperator_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NamedOperator_ParametersAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// parameters+=VariableDecl
protected class NamedOperator_ParametersAssignment_2_0 extends AssignmentToken  {
	
	public NamedOperator_ParametersAssignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNamedOperatorAccess().getParametersAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameters",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVariableDeclRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNamedOperatorAccess().getParametersVariableDeclParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NamedOperator_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," parameters+=VariableDecl)*
protected class NamedOperator_Group_2_1 extends GroupToken {
	
	public NamedOperator_Group_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNamedOperatorAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NamedOperator_ParametersAssignment_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class NamedOperator_CommaKeyword_2_1_0 extends KeywordToken  {
	
	public NamedOperator_CommaKeyword_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNamedOperatorAccess().getCommaKeyword_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NamedOperator_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NamedOperator_ParametersAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// parameters+=VariableDecl
protected class NamedOperator_ParametersAssignment_2_1_1 extends AssignmentToken  {
	
	public NamedOperator_ParametersAssignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNamedOperatorAccess().getParametersAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameters",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVariableDeclRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNamedOperatorAccess().getParametersVariableDeclParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NamedOperator_CommaKeyword_2_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class NamedOperator_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public NamedOperator_RightParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNamedOperatorAccess().getRightParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NamedOperator_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NamedOperator_LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "="
protected class NamedOperator_EqualsSignKeyword_4 extends KeywordToken  {
	
	public NamedOperator_EqualsSignKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNamedOperatorAccess().getEqualsSignKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NamedOperator_RightParenthesisKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// def=Term
protected class NamedOperator_DefAssignment_5 extends AssignmentToken  {
	
	public NamedOperator_DefAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNamedOperatorAccess().getDefAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("def",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("def");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNamedOperatorAccess().getDefTermParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NamedOperator_EqualsSignKeyword_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule NamedOperator ****************/


/************ begin Rule Sort ****************
 *
 * Sort returns terms::Sort:
 * 
 * 	BuiltInSort | MultiSetSort | ProductSort | UserSort;
 *
 **/

// BuiltInSort | MultiSetSort | ProductSort | UserSort
protected class Sort_Alternatives extends AlternativesToken {

	public Sort_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSortAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sort_BuiltInSortParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Sort_MultiSetSortParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Sort_ProductSortParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Sort_UserSortParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanAccess().getBoolAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumerationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDotAccess().getDotAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFiniteEnumerationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFiniteIntRangeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberAccess().getIntegerAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListSortRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultiSetSortRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberAccess().getNaturalAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberAccess().getPositiveAction_2_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getProductSortAccess().getProductSortAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringSortAccess().getStringAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUserSortRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// BuiltInSort
protected class Sort_BuiltInSortParserRuleCall_0 extends RuleCallToken {
	
	public Sort_BuiltInSortParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSortAccess().getBuiltInSortParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BuiltInSort_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanAccess().getBoolAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumerationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDotAccess().getDotAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFiniteEnumerationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFiniteIntRangeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberAccess().getIntegerAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListSortRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberAccess().getNaturalAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberAccess().getPositiveAction_2_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringSortAccess().getStringAction_1().getType().getClassifier())
			return null;
		if(checkForRecursion(BuiltInSort_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// MultiSetSort
protected class Sort_MultiSetSortParserRuleCall_1 extends RuleCallToken {
	
	public Sort_MultiSetSortParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSortAccess().getMultiSetSortParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultiSetSort_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultiSetSortRule().getType().getClassifier())
			return null;
		if(checkForRecursion(MultiSetSort_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ProductSort
protected class Sort_ProductSortParserRuleCall_2 extends RuleCallToken {
	
	public Sort_ProductSortParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSortAccess().getProductSortParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProductSort_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProductSortAccess().getProductSortAction_1().getType().getClassifier())
			return null;
		if(checkForRecursion(ProductSort_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// UserSort
protected class Sort_UserSortParserRuleCall_3 extends RuleCallToken {
	
	public Sort_UserSortParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSortAccess().getUserSortParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UserSort_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUserSortRule().getType().getClassifier())
			return null;
		if(checkForRecursion(UserSort_NameAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Sort ****************/


/************ begin Rule MultiSetSort ****************
 *
 * MultiSetSort returns terms::MultiSetSort:
 * 
 * 	"MS" "(" basis=Sort ")";
 *
 **/

// "MS" "(" basis=Sort ")"
protected class MultiSetSort_Group extends GroupToken {
	
	public MultiSetSort_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultiSetSortAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultiSetSort_RightParenthesisKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultiSetSortRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "MS"
protected class MultiSetSort_MSKeyword_0 extends KeywordToken  {
	
	public MultiSetSort_MSKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMultiSetSortAccess().getMSKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class MultiSetSort_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public MultiSetSort_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMultiSetSortAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultiSetSort_MSKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// basis=Sort
protected class MultiSetSort_BasisAssignment_2 extends AssignmentToken  {
	
	public MultiSetSort_BasisAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiSetSortAccess().getBasisAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sort_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("basis",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("basis");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMultiSetSortAccess().getBasisSortParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MultiSetSort_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class MultiSetSort_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public MultiSetSort_RightParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMultiSetSortAccess().getRightParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultiSetSort_BasisAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule MultiSetSort ****************/


/************ begin Rule ProductSort ****************
 *
 * ProductSort returns terms::ProductSort:
 * 
 * 	"(" {terms::ProductSort} (elementSort+=Sort ("*" elementSort+=Sort)*)? ")";
 *
 **/

// "(" {terms::ProductSort} (elementSort+=Sort ("*" elementSort+=Sort)*)? ")"
protected class ProductSort_Group extends GroupToken {
	
	public ProductSort_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProductSortAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProductSort_RightParenthesisKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProductSortAccess().getProductSortAction_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "("
protected class ProductSort_LeftParenthesisKeyword_0 extends KeywordToken  {
	
	public ProductSort_LeftParenthesisKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProductSortAccess().getLeftParenthesisKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// {terms::ProductSort}
protected class ProductSort_ProductSortAction_1 extends ActionToken  {

	public ProductSort_ProductSortAction_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getProductSortAccess().getProductSortAction_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProductSort_LeftParenthesisKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// (elementSort+=Sort ("*" elementSort+=Sort)*)?
protected class ProductSort_Group_2 extends GroupToken {
	
	public ProductSort_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProductSortAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProductSort_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProductSort_ElementSortAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// elementSort+=Sort
protected class ProductSort_ElementSortAssignment_2_0 extends AssignmentToken  {
	
	public ProductSort_ElementSortAssignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProductSortAccess().getElementSortAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sort_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elementSort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elementSort");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProductSortAccess().getElementSortSortParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProductSort_ProductSortAction_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("*" elementSort+=Sort)*
protected class ProductSort_Group_2_1 extends GroupToken {
	
	public ProductSort_Group_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProductSortAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProductSort_ElementSortAssignment_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "*"
protected class ProductSort_AsteriskKeyword_2_1_0 extends KeywordToken  {
	
	public ProductSort_AsteriskKeyword_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProductSortAccess().getAsteriskKeyword_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProductSort_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProductSort_ElementSortAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// elementSort+=Sort
protected class ProductSort_ElementSortAssignment_2_1_1 extends AssignmentToken  {
	
	public ProductSort_ElementSortAssignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProductSortAccess().getElementSortAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sort_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elementSort",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elementSort");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProductSortAccess().getElementSortSortParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ProductSort_AsteriskKeyword_2_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class ProductSort_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public ProductSort_RightParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getProductSortAccess().getRightParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ProductSort_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ProductSort_ProductSortAction_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ProductSort ****************/


/************ begin Rule UserSort ****************
 *
 * UserSort returns terms::UserSort: // declaration = [terms::SortDecl|SortDecl];
 * 
 * 
 * // Unfortunately, crossreferencing works for
 *  // simple datatypes only; but I will use my own
 * 
 * 
 * // linker anyway, so setting the name of the
 *  // SymbolUse is fine for now:
 *  name=ID;
 *
 **/

// // declaration = [terms::SortDecl|SortDecl];
//  // Unfortunately, crossreferencing works for
// 
// 
// // simple datatypes only; but I will use my own
//  // linker anyway, so setting the name of the
// 
// 
// // SymbolUse is fine for now:
//  name=ID
protected class UserSort_NameAssignment extends AssignmentToken  {
	
	public UserSort_NameAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUserSortAccess().getNameAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUserSortRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getUserSortAccess().getNameIDTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getUserSortAccess().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule UserSort ****************/


/************ begin Rule Term ****************
 *
 * Term returns terms::Term:
 * 
 * 	Term1;
 *
 **/

// Term1
protected class Term_Term1ParserRuleCall extends RuleCallToken {
	
	public Term_Term1ParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getTerm1ParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term1_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm5Access().getAddSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm7Access().getAdditionSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getAllAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm2Access().getAndSubtermAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getAppendAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantAccess().getBooleanConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityOfAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getContainsSubtermAction_1_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getDivisionSubtermAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDotConstantAccess().getDotConstantAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getEmptyAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm4Access().getEqualitySubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFiniteIntRangeConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_7_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_10_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_12_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_8_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_11_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm1Access().getImplySubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm4Access().getInequalitySubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getLengthAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getLengthAction_2_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_9_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_14_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_13_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMakeListAction_5_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMemberAtIndexAction_4_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getModuloSubtermAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getMultiplicationSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm9Access().getNotAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberConstantAccess().getNumberConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm6Access().getNumberOfSubtermAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm1Access().getOrSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPartitionsBuiltInOperatorAccess().getPartitionElementOfAction_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getPredecessorAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getScalarProductSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getSublistAction_3_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getSubstringAction_2_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm5Access().getSubtractSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm7Access().getSubtractionSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getSuccessorAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm10Access().getTupleSubtermAction_4_2_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUserOperatorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Term1_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule Term ****************/


/************ begin Rule Term1 ****************
 *
 * Term1 returns terms::Term:
 * 
 * 	Term2 ({booleans::Or.subterm+=current} "or" subterm+=Term2 | {booleans::Imply.subterm+=current} "implies"
 * 
 * 	subterm+=Term2)*;
 *
 **/

// Term2 ({booleans::Or.subterm+=current} "or" subterm+=Term2 | {booleans::Imply.subterm+=current} "implies"
// 
// subterm+=Term2)*
protected class Term1_Group extends GroupToken {
	
	public Term1_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm1Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term1_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term1_Term2ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm5Access().getAddSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm7Access().getAdditionSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getAllAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm2Access().getAndSubtermAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getAppendAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantAccess().getBooleanConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityOfAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getContainsSubtermAction_1_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getDivisionSubtermAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDotConstantAccess().getDotConstantAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getEmptyAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm4Access().getEqualitySubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFiniteIntRangeConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_7_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_10_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_12_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_8_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_11_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm1Access().getImplySubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm4Access().getInequalitySubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getLengthAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getLengthAction_2_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_9_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_14_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_13_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMakeListAction_5_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMemberAtIndexAction_4_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getModuloSubtermAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getMultiplicationSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm9Access().getNotAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberConstantAccess().getNumberConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm6Access().getNumberOfSubtermAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm1Access().getOrSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPartitionsBuiltInOperatorAccess().getPartitionElementOfAction_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getPredecessorAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getScalarProductSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getSublistAction_3_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getSubstringAction_2_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm5Access().getSubtractSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm7Access().getSubtractionSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getSuccessorAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm10Access().getTupleSubtermAction_4_2_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUserOperatorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Term2
protected class Term1_Term2ParserRuleCall_0 extends RuleCallToken {
	
	public Term1_Term2ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTerm1Access().getTerm2ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term2_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Term2_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({booleans::Or.subterm+=current} "or" subterm+=Term2 | {booleans::Imply.subterm+=current} "implies" subterm+=Term2)*
protected class Term1_Alternatives_1 extends AlternativesToken {

	public Term1_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTerm1Access().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term1_Group_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term1_Group_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm1Access().getImplySubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm1Access().getOrSubtermAction_1_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {booleans::Or.subterm+=current} "or" subterm+=Term2
protected class Term1_Group_1_0 extends GroupToken {
	
	public Term1_Group_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm1Access().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term1_SubtermAssignment_1_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm1Access().getOrSubtermAction_1_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {booleans::Or.subterm+=current}
protected class Term1_OrSubtermAction_1_0_0 extends ActionToken  {

	public Term1_OrSubtermAction_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm1Access().getOrSubtermAction_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term1_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term1_Term2ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "or"
protected class Term1_OrKeyword_1_0_1 extends KeywordToken  {
	
	public Term1_OrKeyword_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm1Access().getOrKeyword_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term1_OrSubtermAction_1_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term2
protected class Term1_SubtermAssignment_1_0_2 extends AssignmentToken  {
	
	public Term1_SubtermAssignment_1_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm1Access().getSubtermAssignment_1_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term2_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm2Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm1Access().getSubtermTerm2ParserRuleCall_1_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term1_OrKeyword_1_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// {booleans::Imply.subterm+=current} "implies" subterm+=Term2
protected class Term1_Group_1_1 extends GroupToken {
	
	public Term1_Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm1Access().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term1_SubtermAssignment_1_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm1Access().getImplySubtermAction_1_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {booleans::Imply.subterm+=current}
protected class Term1_ImplySubtermAction_1_1_0 extends ActionToken  {

	public Term1_ImplySubtermAction_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm1Access().getImplySubtermAction_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term1_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term1_Term2ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "implies"
protected class Term1_ImpliesKeyword_1_1_1 extends KeywordToken  {
	
	public Term1_ImpliesKeyword_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm1Access().getImpliesKeyword_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term1_ImplySubtermAction_1_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term2
protected class Term1_SubtermAssignment_1_1_2 extends AssignmentToken  {
	
	public Term1_SubtermAssignment_1_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm1Access().getSubtermAssignment_1_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term2_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm2Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm1Access().getSubtermTerm2ParserRuleCall_1_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term1_ImpliesKeyword_1_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule Term1 ****************/


/************ begin Rule Term2 ****************
 *
 * Term2 returns terms::Term:
 * 
 * 	Term3 ({booleans::And.subterm+=current} "and" subterm+=Term3)*;
 *
 **/

// Term3 ({booleans::And.subterm+=current} "and" subterm+=Term3)*
protected class Term2_Group extends GroupToken {
	
	public Term2_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm2Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term2_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term2_Term3ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm5Access().getAddSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm7Access().getAdditionSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getAllAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm2Access().getAndSubtermAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getAppendAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantAccess().getBooleanConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityOfAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getContainsSubtermAction_1_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getDivisionSubtermAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDotConstantAccess().getDotConstantAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getEmptyAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm4Access().getEqualitySubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFiniteIntRangeConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_7_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_10_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_12_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_8_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_11_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm1Access().getImplySubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm4Access().getInequalitySubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getLengthAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getLengthAction_2_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_9_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_14_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_13_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMakeListAction_5_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMemberAtIndexAction_4_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getModuloSubtermAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getMultiplicationSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm9Access().getNotAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberConstantAccess().getNumberConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm6Access().getNumberOfSubtermAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm1Access().getOrSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPartitionsBuiltInOperatorAccess().getPartitionElementOfAction_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getPredecessorAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getScalarProductSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getSublistAction_3_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getSubstringAction_2_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm5Access().getSubtractSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm7Access().getSubtractionSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getSuccessorAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm10Access().getTupleSubtermAction_4_2_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUserOperatorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Term3
protected class Term2_Term3ParserRuleCall_0 extends RuleCallToken {
	
	public Term2_Term3ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTerm2Access().getTerm3ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Term3_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({booleans::And.subterm+=current} "and" subterm+=Term3)*
protected class Term2_Group_1 extends GroupToken {
	
	public Term2_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm2Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term2_SubtermAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm2Access().getAndSubtermAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {booleans::And.subterm+=current}
protected class Term2_AndSubtermAction_1_0 extends ActionToken  {

	public Term2_AndSubtermAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm2Access().getAndSubtermAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term2_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term2_Term3ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "and"
protected class Term2_AndKeyword_1_1 extends KeywordToken  {
	
	public Term2_AndKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm2Access().getAndKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term2_AndSubtermAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term3
protected class Term2_SubtermAssignment_1_2 extends AssignmentToken  {
	
	public Term2_SubtermAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm2Access().getSubtermAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm3Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm2Access().getSubtermTerm3ParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term2_AndKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Term2 ****************/


/************ begin Rule Term3 ****************
 *
 * Term3 returns terms::Term:
 * 
 * 	Term4 ({integers::GreaterThan.subterm+=current} ">" subterm+=Term4 | {integers::GreaterThanOrEqual.subterm+=current}
 * 
 * 	">=" subterm+=Term4 | {integers::LessThan.subterm+=current} "<" subterm+=Term4 |
 * 
 * 	{integers::LessThanOrEqual.subterm+=current} "<=" subterm+=Term4 | {multisets::Contains.subterm+=current} "contains"
 * 
 * 	subterm+=Term4 | {finiteintranges::LessThan.subterm+=current} "<r" subterm+=Term4 |
 * 
 * 	{finiteintranges::LessThanOrEqual.subterm+=current} "<=r" subterm+=Term4 |
 * 
 * 	{finiteintranges::GreaterThan.subterm+=current} ">r" subterm+=Term4 |
 * 
 * 	{finiteintranges::GreaterThanOrEqual.subterm+=current} ">=r" subterm+=Term4 | {partitions::LessThan.subterm+=current}
 * 
 * 	"<p" subterm+=Term4 | {partitions::GreaterThan.subterm+=current} ">p" subterm+=Term4 |
 * 
 * 	{strings::GreaterThanOrEqual.subterm+=current} ">=s" subterm+=Term4 | {strings::GreaterThan.subterm+=current} ">s"
 * 
 * 	subterm+=Term4 | {strings::LessThanOrEqual.subterm+=current} "<=s" subterm+=Term4 |
 * 
 * 	{strings::LessThan.subterm+=current} "<s" subterm+=Term4)*;
 *
 **/

// Term4 ({integers::GreaterThan.subterm+=current} ">" subterm+=Term4 | {integers::GreaterThanOrEqual.subterm+=current}
// 
// ">=" subterm+=Term4 | {integers::LessThan.subterm+=current} "<" subterm+=Term4 |
// 
// {integers::LessThanOrEqual.subterm+=current} "<=" subterm+=Term4 | {multisets::Contains.subterm+=current} "contains"
// 
// subterm+=Term4 | {finiteintranges::LessThan.subterm+=current} "<r" subterm+=Term4 |
// 
// {finiteintranges::LessThanOrEqual.subterm+=current} "<=r" subterm+=Term4 |
// 
// {finiteintranges::GreaterThan.subterm+=current} ">r" subterm+=Term4 |
// 
// {finiteintranges::GreaterThanOrEqual.subterm+=current} ">=r" subterm+=Term4 | {partitions::LessThan.subterm+=current}
// 
// "<p" subterm+=Term4 | {partitions::GreaterThan.subterm+=current} ">p" subterm+=Term4 |
// 
// {strings::GreaterThanOrEqual.subterm+=current} ">=s" subterm+=Term4 | {strings::GreaterThan.subterm+=current} ">s"
// 
// subterm+=Term4 | {strings::LessThanOrEqual.subterm+=current} "<=s" subterm+=Term4 |
// 
// {strings::LessThan.subterm+=current} "<s" subterm+=Term4)*
protected class Term3_Group extends GroupToken {
	
	public Term3_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm3Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term3_Term4ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm5Access().getAddSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm7Access().getAdditionSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getAllAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm2Access().getAndSubtermAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getAppendAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantAccess().getBooleanConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityOfAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getContainsSubtermAction_1_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getDivisionSubtermAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDotConstantAccess().getDotConstantAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getEmptyAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm4Access().getEqualitySubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFiniteIntRangeConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_7_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_10_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_12_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_8_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_11_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm1Access().getImplySubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm4Access().getInequalitySubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getLengthAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getLengthAction_2_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_9_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_14_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_13_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMakeListAction_5_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMemberAtIndexAction_4_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getModuloSubtermAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getMultiplicationSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm9Access().getNotAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberConstantAccess().getNumberConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm6Access().getNumberOfSubtermAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm1Access().getOrSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPartitionsBuiltInOperatorAccess().getPartitionElementOfAction_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getPredecessorAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getScalarProductSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getSublistAction_3_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getSubstringAction_2_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm5Access().getSubtractSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm7Access().getSubtractionSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getSuccessorAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm10Access().getTupleSubtermAction_4_2_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUserOperatorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Term4
protected class Term3_Term4ParserRuleCall_0 extends RuleCallToken {
	
	public Term3_Term4ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTerm3Access().getTerm4ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term4_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Term4_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({integers::GreaterThan.subterm+=current} ">" subterm+=Term4 | {integers::GreaterThanOrEqual.subterm+=current} ">="
// 
// subterm+=Term4 | {integers::LessThan.subterm+=current} "<" subterm+=Term4 |
// 
// {integers::LessThanOrEqual.subterm+=current} "<=" subterm+=Term4 | {multisets::Contains.subterm+=current} "contains"
// 
// subterm+=Term4 | {finiteintranges::LessThan.subterm+=current} "<r" subterm+=Term4 |
// 
// {finiteintranges::LessThanOrEqual.subterm+=current} "<=r" subterm+=Term4 |
// 
// {finiteintranges::GreaterThan.subterm+=current} ">r" subterm+=Term4 |
// 
// {finiteintranges::GreaterThanOrEqual.subterm+=current} ">=r" subterm+=Term4 | {partitions::LessThan.subterm+=current}
// 
// "<p" subterm+=Term4 | {partitions::GreaterThan.subterm+=current} ">p" subterm+=Term4 |
// 
// {strings::GreaterThanOrEqual.subterm+=current} ">=s" subterm+=Term4 | {strings::GreaterThan.subterm+=current} ">s"
// 
// subterm+=Term4 | {strings::LessThanOrEqual.subterm+=current} "<=s" subterm+=Term4 |
// 
// {strings::LessThan.subterm+=current} "<s" subterm+=Term4)*
protected class Term3_Alternatives_1 extends AlternativesToken {

	public Term3_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTerm3Access().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_Group_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term3_Group_1_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Term3_Group_1_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Term3_Group_1_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Term3_Group_1_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Term3_Group_1_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Term3_Group_1_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Term3_Group_1_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Term3_Group_1_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new Term3_Group_1_9(lastRuleCallOrigin, this, 9, inst);
			case 10: return new Term3_Group_1_10(lastRuleCallOrigin, this, 10, inst);
			case 11: return new Term3_Group_1_11(lastRuleCallOrigin, this, 11, inst);
			case 12: return new Term3_Group_1_12(lastRuleCallOrigin, this, 12, inst);
			case 13: return new Term3_Group_1_13(lastRuleCallOrigin, this, 13, inst);
			case 14: return new Term3_Group_1_14(lastRuleCallOrigin, this, 14, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm3Access().getContainsSubtermAction_1_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_7_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_10_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_12_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_8_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_11_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_9_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_14_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_13_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {integers::GreaterThan.subterm+=current} ">" subterm+=Term4
protected class Term3_Group_1_0 extends GroupToken {
	
	public Term3_Group_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm3Access().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_SubtermAssignment_1_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {integers::GreaterThan.subterm+=current}
protected class Term3_GreaterThanSubtermAction_1_0_0 extends ActionToken  {

	public Term3_GreaterThanSubtermAction_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term3_Term4ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// ">"
protected class Term3_GreaterThanSignKeyword_1_0_1 extends KeywordToken  {
	
	public Term3_GreaterThanSignKeyword_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm3Access().getGreaterThanSignKeyword_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_GreaterThanSubtermAction_1_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term4
protected class Term3_SubtermAssignment_1_0_2 extends AssignmentToken  {
	
	public Term3_SubtermAssignment_1_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm3Access().getSubtermAssignment_1_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term4_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm4Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term3_GreaterThanSignKeyword_1_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// {integers::GreaterThanOrEqual.subterm+=current} ">=" subterm+=Term4
protected class Term3_Group_1_1 extends GroupToken {
	
	public Term3_Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm3Access().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_SubtermAssignment_1_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {integers::GreaterThanOrEqual.subterm+=current}
protected class Term3_GreaterThanOrEqualSubtermAction_1_1_0 extends ActionToken  {

	public Term3_GreaterThanOrEqualSubtermAction_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term3_Term4ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// ">="
protected class Term3_GreaterThanSignEqualsSignKeyword_1_1_1 extends KeywordToken  {
	
	public Term3_GreaterThanSignEqualsSignKeyword_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm3Access().getGreaterThanSignEqualsSignKeyword_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_GreaterThanOrEqualSubtermAction_1_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term4
protected class Term3_SubtermAssignment_1_1_2 extends AssignmentToken  {
	
	public Term3_SubtermAssignment_1_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm3Access().getSubtermAssignment_1_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term4_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm4Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term3_GreaterThanSignEqualsSignKeyword_1_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// {integers::LessThan.subterm+=current} "<" subterm+=Term4
protected class Term3_Group_1_2 extends GroupToken {
	
	public Term3_Group_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm3Access().getGroup_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_SubtermAssignment_1_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {integers::LessThan.subterm+=current}
protected class Term3_LessThanSubtermAction_1_2_0 extends ActionToken  {

	public Term3_LessThanSubtermAction_1_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm3Access().getLessThanSubtermAction_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term3_Term4ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "<"
protected class Term3_LessThanSignKeyword_1_2_1 extends KeywordToken  {
	
	public Term3_LessThanSignKeyword_1_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm3Access().getLessThanSignKeyword_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_LessThanSubtermAction_1_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term4
protected class Term3_SubtermAssignment_1_2_2 extends AssignmentToken  {
	
	public Term3_SubtermAssignment_1_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm3Access().getSubtermAssignment_1_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term4_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm4Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_2_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term3_LessThanSignKeyword_1_2_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// {integers::LessThanOrEqual.subterm+=current} "<=" subterm+=Term4
protected class Term3_Group_1_3 extends GroupToken {
	
	public Term3_Group_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm3Access().getGroup_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_SubtermAssignment_1_3_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_3_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {integers::LessThanOrEqual.subterm+=current}
protected class Term3_LessThanOrEqualSubtermAction_1_3_0 extends ActionToken  {

	public Term3_LessThanOrEqualSubtermAction_1_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term3_Term4ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "<="
protected class Term3_LessThanSignEqualsSignKeyword_1_3_1 extends KeywordToken  {
	
	public Term3_LessThanSignEqualsSignKeyword_1_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm3Access().getLessThanSignEqualsSignKeyword_1_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_LessThanOrEqualSubtermAction_1_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term4
protected class Term3_SubtermAssignment_1_3_2 extends AssignmentToken  {
	
	public Term3_SubtermAssignment_1_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm3Access().getSubtermAssignment_1_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term4_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm4Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_3_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term3_LessThanSignEqualsSignKeyword_1_3_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// {multisets::Contains.subterm+=current} "contains" subterm+=Term4
protected class Term3_Group_1_4 extends GroupToken {
	
	public Term3_Group_1_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm3Access().getGroup_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_SubtermAssignment_1_4_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm3Access().getContainsSubtermAction_1_4_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {multisets::Contains.subterm+=current}
protected class Term3_ContainsSubtermAction_1_4_0 extends ActionToken  {

	public Term3_ContainsSubtermAction_1_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm3Access().getContainsSubtermAction_1_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term3_Term4ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "contains"
protected class Term3_ContainsKeyword_1_4_1 extends KeywordToken  {
	
	public Term3_ContainsKeyword_1_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm3Access().getContainsKeyword_1_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_ContainsSubtermAction_1_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term4
protected class Term3_SubtermAssignment_1_4_2 extends AssignmentToken  {
	
	public Term3_SubtermAssignment_1_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm3Access().getSubtermAssignment_1_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term4_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm4Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_4_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term3_ContainsKeyword_1_4_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// {finiteintranges::LessThan.subterm+=current} "<r" subterm+=Term4
protected class Term3_Group_1_5 extends GroupToken {
	
	public Term3_Group_1_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm3Access().getGroup_1_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_SubtermAssignment_1_5_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_5_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {finiteintranges::LessThan.subterm+=current}
protected class Term3_LessThanSubtermAction_1_5_0 extends ActionToken  {

	public Term3_LessThanSubtermAction_1_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm3Access().getLessThanSubtermAction_1_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term3_Term4ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "<r"
protected class Term3_RKeyword_1_5_1 extends KeywordToken  {
	
	public Term3_RKeyword_1_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm3Access().getRKeyword_1_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_LessThanSubtermAction_1_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term4
protected class Term3_SubtermAssignment_1_5_2 extends AssignmentToken  {
	
	public Term3_SubtermAssignment_1_5_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm3Access().getSubtermAssignment_1_5_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term4_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm4Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_5_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term3_RKeyword_1_5_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// {finiteintranges::LessThanOrEqual.subterm+=current} "<=r" subterm+=Term4
protected class Term3_Group_1_6 extends GroupToken {
	
	public Term3_Group_1_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm3Access().getGroup_1_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_SubtermAssignment_1_6_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_6_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {finiteintranges::LessThanOrEqual.subterm+=current}
protected class Term3_LessThanOrEqualSubtermAction_1_6_0 extends ActionToken  {

	public Term3_LessThanOrEqualSubtermAction_1_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term3_Term4ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "<=r"
protected class Term3_RKeyword_1_6_1 extends KeywordToken  {
	
	public Term3_RKeyword_1_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm3Access().getRKeyword_1_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_LessThanOrEqualSubtermAction_1_6_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term4
protected class Term3_SubtermAssignment_1_6_2 extends AssignmentToken  {
	
	public Term3_SubtermAssignment_1_6_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm3Access().getSubtermAssignment_1_6_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term4_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm4Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_6_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term3_RKeyword_1_6_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// {finiteintranges::GreaterThan.subterm+=current} ">r" subterm+=Term4
protected class Term3_Group_1_7 extends GroupToken {
	
	public Term3_Group_1_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm3Access().getGroup_1_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_SubtermAssignment_1_7_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_7_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {finiteintranges::GreaterThan.subterm+=current}
protected class Term3_GreaterThanSubtermAction_1_7_0 extends ActionToken  {

	public Term3_GreaterThanSubtermAction_1_7_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term3_Term4ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// ">r"
protected class Term3_RKeyword_1_7_1 extends KeywordToken  {
	
	public Term3_RKeyword_1_7_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm3Access().getRKeyword_1_7_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_GreaterThanSubtermAction_1_7_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term4
protected class Term3_SubtermAssignment_1_7_2 extends AssignmentToken  {
	
	public Term3_SubtermAssignment_1_7_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm3Access().getSubtermAssignment_1_7_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term4_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm4Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_7_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term3_RKeyword_1_7_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// {finiteintranges::GreaterThanOrEqual.subterm+=current} ">=r" subterm+=Term4
protected class Term3_Group_1_8 extends GroupToken {
	
	public Term3_Group_1_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm3Access().getGroup_1_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_SubtermAssignment_1_8_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_8_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {finiteintranges::GreaterThanOrEqual.subterm+=current}
protected class Term3_GreaterThanOrEqualSubtermAction_1_8_0 extends ActionToken  {

	public Term3_GreaterThanOrEqualSubtermAction_1_8_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_8_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term3_Term4ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// ">=r"
protected class Term3_RKeyword_1_8_1 extends KeywordToken  {
	
	public Term3_RKeyword_1_8_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm3Access().getRKeyword_1_8_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_GreaterThanOrEqualSubtermAction_1_8_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term4
protected class Term3_SubtermAssignment_1_8_2 extends AssignmentToken  {
	
	public Term3_SubtermAssignment_1_8_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm3Access().getSubtermAssignment_1_8_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term4_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm4Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_8_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term3_RKeyword_1_8_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// {partitions::LessThan.subterm+=current} "<p" subterm+=Term4
protected class Term3_Group_1_9 extends GroupToken {
	
	public Term3_Group_1_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm3Access().getGroup_1_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_SubtermAssignment_1_9_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_9_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {partitions::LessThan.subterm+=current}
protected class Term3_LessThanSubtermAction_1_9_0 extends ActionToken  {

	public Term3_LessThanSubtermAction_1_9_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm3Access().getLessThanSubtermAction_1_9_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term3_Term4ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "<p"
protected class Term3_PKeyword_1_9_1 extends KeywordToken  {
	
	public Term3_PKeyword_1_9_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm3Access().getPKeyword_1_9_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_LessThanSubtermAction_1_9_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term4
protected class Term3_SubtermAssignment_1_9_2 extends AssignmentToken  {
	
	public Term3_SubtermAssignment_1_9_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm3Access().getSubtermAssignment_1_9_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term4_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm4Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_9_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term3_PKeyword_1_9_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// {partitions::GreaterThan.subterm+=current} ">p" subterm+=Term4
protected class Term3_Group_1_10 extends GroupToken {
	
	public Term3_Group_1_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm3Access().getGroup_1_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_SubtermAssignment_1_10_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_10_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {partitions::GreaterThan.subterm+=current}
protected class Term3_GreaterThanSubtermAction_1_10_0 extends ActionToken  {

	public Term3_GreaterThanSubtermAction_1_10_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_10_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term3_Term4ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// ">p"
protected class Term3_PKeyword_1_10_1 extends KeywordToken  {
	
	public Term3_PKeyword_1_10_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm3Access().getPKeyword_1_10_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_GreaterThanSubtermAction_1_10_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term4
protected class Term3_SubtermAssignment_1_10_2 extends AssignmentToken  {
	
	public Term3_SubtermAssignment_1_10_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm3Access().getSubtermAssignment_1_10_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term4_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm4Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_10_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term3_PKeyword_1_10_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// {strings::GreaterThanOrEqual.subterm+=current} ">=s" subterm+=Term4
protected class Term3_Group_1_11 extends GroupToken {
	
	public Term3_Group_1_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm3Access().getGroup_1_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_SubtermAssignment_1_11_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_11_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {strings::GreaterThanOrEqual.subterm+=current}
protected class Term3_GreaterThanOrEqualSubtermAction_1_11_0 extends ActionToken  {

	public Term3_GreaterThanOrEqualSubtermAction_1_11_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_11_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term3_Term4ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// ">=s"
protected class Term3_SKeyword_1_11_1 extends KeywordToken  {
	
	public Term3_SKeyword_1_11_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm3Access().getSKeyword_1_11_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_GreaterThanOrEqualSubtermAction_1_11_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term4
protected class Term3_SubtermAssignment_1_11_2 extends AssignmentToken  {
	
	public Term3_SubtermAssignment_1_11_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm3Access().getSubtermAssignment_1_11_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term4_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm4Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_11_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term3_SKeyword_1_11_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// {strings::GreaterThan.subterm+=current} ">s" subterm+=Term4
protected class Term3_Group_1_12 extends GroupToken {
	
	public Term3_Group_1_12(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm3Access().getGroup_1_12();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_SubtermAssignment_1_12_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_12_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {strings::GreaterThan.subterm+=current}
protected class Term3_GreaterThanSubtermAction_1_12_0 extends ActionToken  {

	public Term3_GreaterThanSubtermAction_1_12_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_12_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term3_Term4ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// ">s"
protected class Term3_SKeyword_1_12_1 extends KeywordToken  {
	
	public Term3_SKeyword_1_12_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm3Access().getSKeyword_1_12_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_GreaterThanSubtermAction_1_12_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term4
protected class Term3_SubtermAssignment_1_12_2 extends AssignmentToken  {
	
	public Term3_SubtermAssignment_1_12_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm3Access().getSubtermAssignment_1_12_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term4_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm4Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_12_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term3_SKeyword_1_12_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// {strings::LessThanOrEqual.subterm+=current} "<=s" subterm+=Term4
protected class Term3_Group_1_13 extends GroupToken {
	
	public Term3_Group_1_13(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm3Access().getGroup_1_13();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_SubtermAssignment_1_13_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_13_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {strings::LessThanOrEqual.subterm+=current}
protected class Term3_LessThanOrEqualSubtermAction_1_13_0 extends ActionToken  {

	public Term3_LessThanOrEqualSubtermAction_1_13_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_13_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term3_Term4ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "<=s"
protected class Term3_SKeyword_1_13_1 extends KeywordToken  {
	
	public Term3_SKeyword_1_13_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm3Access().getSKeyword_1_13_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_LessThanOrEqualSubtermAction_1_13_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term4
protected class Term3_SubtermAssignment_1_13_2 extends AssignmentToken  {
	
	public Term3_SubtermAssignment_1_13_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm3Access().getSubtermAssignment_1_13_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term4_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm4Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_13_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term3_SKeyword_1_13_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// {strings::LessThan.subterm+=current} "<s" subterm+=Term4
protected class Term3_Group_1_14 extends GroupToken {
	
	public Term3_Group_1_14(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm3Access().getGroup_1_14();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_SubtermAssignment_1_14_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_14_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {strings::LessThan.subterm+=current}
protected class Term3_LessThanSubtermAction_1_14_0 extends ActionToken  {

	public Term3_LessThanSubtermAction_1_14_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm3Access().getLessThanSubtermAction_1_14_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term3_Term4ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "<s"
protected class Term3_SKeyword_1_14_1 extends KeywordToken  {
	
	public Term3_SKeyword_1_14_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm3Access().getSKeyword_1_14_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term3_LessThanSubtermAction_1_14_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term4
protected class Term3_SubtermAssignment_1_14_2 extends AssignmentToken  {
	
	public Term3_SubtermAssignment_1_14_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm3Access().getSubtermAssignment_1_14_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term4_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm4Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm3Access().getSubtermTerm4ParserRuleCall_1_14_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term3_SKeyword_1_14_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule Term3 ****************/


/************ begin Rule Term4 ****************
 *
 * Term4 returns terms::Term:
 * 
 * 	Term5 ({booleans::Equality.subterm+=current} "==" subterm+=Term5 | {booleans::Inequality.subterm+=current} "!="
 * 
 * 	subterm+=Term5)*;
 *
 **/

// Term5 ({booleans::Equality.subterm+=current} "==" subterm+=Term5 | {booleans::Inequality.subterm+=current} "!="
// 
// subterm+=Term5)*
protected class Term4_Group extends GroupToken {
	
	public Term4_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm4Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term4_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term4_Term5ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm5Access().getAddSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm7Access().getAdditionSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getAllAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm2Access().getAndSubtermAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getAppendAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantAccess().getBooleanConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityOfAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getContainsSubtermAction_1_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getDivisionSubtermAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDotConstantAccess().getDotConstantAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getEmptyAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm4Access().getEqualitySubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFiniteIntRangeConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_7_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_10_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_12_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_8_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_11_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm1Access().getImplySubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm4Access().getInequalitySubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getLengthAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getLengthAction_2_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_9_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_14_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_13_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMakeListAction_5_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMemberAtIndexAction_4_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getModuloSubtermAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getMultiplicationSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm9Access().getNotAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberConstantAccess().getNumberConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm6Access().getNumberOfSubtermAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm1Access().getOrSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPartitionsBuiltInOperatorAccess().getPartitionElementOfAction_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getPredecessorAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getScalarProductSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getSublistAction_3_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getSubstringAction_2_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm5Access().getSubtractSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm7Access().getSubtractionSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getSuccessorAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm10Access().getTupleSubtermAction_4_2_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUserOperatorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Term5
protected class Term4_Term5ParserRuleCall_0 extends RuleCallToken {
	
	public Term4_Term5ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTerm4Access().getTerm5ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term5_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Term5_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({booleans::Equality.subterm+=current} "==" subterm+=Term5 | {booleans::Inequality.subterm+=current} "!="
// 
// subterm+=Term5)*
protected class Term4_Alternatives_1 extends AlternativesToken {

	public Term4_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTerm4Access().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term4_Group_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term4_Group_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm4Access().getEqualitySubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm4Access().getInequalitySubtermAction_1_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {booleans::Equality.subterm+=current} "==" subterm+=Term5
protected class Term4_Group_1_0 extends GroupToken {
	
	public Term4_Group_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm4Access().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term4_SubtermAssignment_1_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm4Access().getEqualitySubtermAction_1_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {booleans::Equality.subterm+=current}
protected class Term4_EqualitySubtermAction_1_0_0 extends ActionToken  {

	public Term4_EqualitySubtermAction_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm4Access().getEqualitySubtermAction_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term4_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term4_Term5ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "=="
protected class Term4_EqualsSignEqualsSignKeyword_1_0_1 extends KeywordToken  {
	
	public Term4_EqualsSignEqualsSignKeyword_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm4Access().getEqualsSignEqualsSignKeyword_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term4_EqualitySubtermAction_1_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term5
protected class Term4_SubtermAssignment_1_0_2 extends AssignmentToken  {
	
	public Term4_SubtermAssignment_1_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm4Access().getSubtermAssignment_1_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term5_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm5Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm4Access().getSubtermTerm5ParserRuleCall_1_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term4_EqualsSignEqualsSignKeyword_1_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// {booleans::Inequality.subterm+=current} "!=" subterm+=Term5
protected class Term4_Group_1_1 extends GroupToken {
	
	public Term4_Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm4Access().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term4_SubtermAssignment_1_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm4Access().getInequalitySubtermAction_1_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {booleans::Inequality.subterm+=current}
protected class Term4_InequalitySubtermAction_1_1_0 extends ActionToken  {

	public Term4_InequalitySubtermAction_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm4Access().getInequalitySubtermAction_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term4_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term4_Term5ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "!="
protected class Term4_ExclamationMarkEqualsSignKeyword_1_1_1 extends KeywordToken  {
	
	public Term4_ExclamationMarkEqualsSignKeyword_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm4Access().getExclamationMarkEqualsSignKeyword_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term4_InequalitySubtermAction_1_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term5
protected class Term4_SubtermAssignment_1_1_2 extends AssignmentToken  {
	
	public Term4_SubtermAssignment_1_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm4Access().getSubtermAssignment_1_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term5_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm5Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm4Access().getSubtermTerm5ParserRuleCall_1_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term4_ExclamationMarkEqualsSignKeyword_1_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule Term4 ****************/


/************ begin Rule Term5 ****************
 *
 * Term5 returns terms::Term:
 * 
 * 	Term6 ({multisets::Add.subterm+=current} "++" subterm+=Term6 | {multisets::Subtract.subterm+=current} "--"
 * 
 * 	subterm+=Term6)*;
 *
 **/

// Term6 ({multisets::Add.subterm+=current} "++" subterm+=Term6 | {multisets::Subtract.subterm+=current} "--"
// 
// subterm+=Term6)*
protected class Term5_Group extends GroupToken {
	
	public Term5_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm5Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term5_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term5_Term6ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm5Access().getAddSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm7Access().getAdditionSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getAllAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm2Access().getAndSubtermAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getAppendAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantAccess().getBooleanConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityOfAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getContainsSubtermAction_1_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getDivisionSubtermAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDotConstantAccess().getDotConstantAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getEmptyAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm4Access().getEqualitySubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFiniteIntRangeConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_7_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_10_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_12_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_8_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_11_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm1Access().getImplySubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm4Access().getInequalitySubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getLengthAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getLengthAction_2_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_9_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_14_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_13_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMakeListAction_5_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMemberAtIndexAction_4_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getModuloSubtermAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getMultiplicationSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm9Access().getNotAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberConstantAccess().getNumberConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm6Access().getNumberOfSubtermAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm1Access().getOrSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPartitionsBuiltInOperatorAccess().getPartitionElementOfAction_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getPredecessorAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getScalarProductSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getSublistAction_3_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getSubstringAction_2_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm5Access().getSubtractSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm7Access().getSubtractionSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getSuccessorAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm10Access().getTupleSubtermAction_4_2_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUserOperatorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Term6
protected class Term5_Term6ParserRuleCall_0 extends RuleCallToken {
	
	public Term5_Term6ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTerm5Access().getTerm6ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term6_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Term6_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({multisets::Add.subterm+=current} "++" subterm+=Term6 | {multisets::Subtract.subterm+=current} "--" subterm+=Term6)*
protected class Term5_Alternatives_1 extends AlternativesToken {

	public Term5_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTerm5Access().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term5_Group_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term5_Group_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm5Access().getAddSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm5Access().getSubtractSubtermAction_1_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {multisets::Add.subterm+=current} "++" subterm+=Term6
protected class Term5_Group_1_0 extends GroupToken {
	
	public Term5_Group_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm5Access().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term5_SubtermAssignment_1_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm5Access().getAddSubtermAction_1_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {multisets::Add.subterm+=current}
protected class Term5_AddSubtermAction_1_0_0 extends ActionToken  {

	public Term5_AddSubtermAction_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm5Access().getAddSubtermAction_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term5_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term5_Term6ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "++"
protected class Term5_PlusSignPlusSignKeyword_1_0_1 extends KeywordToken  {
	
	public Term5_PlusSignPlusSignKeyword_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm5Access().getPlusSignPlusSignKeyword_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term5_AddSubtermAction_1_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term6
protected class Term5_SubtermAssignment_1_0_2 extends AssignmentToken  {
	
	public Term5_SubtermAssignment_1_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm5Access().getSubtermAssignment_1_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term6_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm6Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm5Access().getSubtermTerm6ParserRuleCall_1_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term5_PlusSignPlusSignKeyword_1_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// {multisets::Subtract.subterm+=current} "--" subterm+=Term6
protected class Term5_Group_1_1 extends GroupToken {
	
	public Term5_Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm5Access().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term5_SubtermAssignment_1_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm5Access().getSubtractSubtermAction_1_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {multisets::Subtract.subterm+=current}
protected class Term5_SubtractSubtermAction_1_1_0 extends ActionToken  {

	public Term5_SubtractSubtermAction_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm5Access().getSubtractSubtermAction_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term5_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term5_Term6ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "--"
protected class Term5_HyphenMinusHyphenMinusKeyword_1_1_1 extends KeywordToken  {
	
	public Term5_HyphenMinusHyphenMinusKeyword_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm5Access().getHyphenMinusHyphenMinusKeyword_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term5_SubtractSubtermAction_1_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term6
protected class Term5_SubtermAssignment_1_1_2 extends AssignmentToken  {
	
	public Term5_SubtermAssignment_1_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm5Access().getSubtermAssignment_1_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term6_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm6Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm5Access().getSubtermTerm6ParserRuleCall_1_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term5_HyphenMinusHyphenMinusKeyword_1_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule Term5 ****************/


/************ begin Rule Term6 ****************
 *
 * Term6 returns terms::Term:
 * 
 * 	Term7 ({multisets::NumberOf.subterm+=current} "`" subterm+=Term7)*;
 *
 **/

// Term7 ({multisets::NumberOf.subterm+=current} "`" subterm+=Term7)*
protected class Term6_Group extends GroupToken {
	
	public Term6_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm6Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term6_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term6_Term7ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm5Access().getAddSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm7Access().getAdditionSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getAllAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm2Access().getAndSubtermAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getAppendAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantAccess().getBooleanConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityOfAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getContainsSubtermAction_1_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getDivisionSubtermAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDotConstantAccess().getDotConstantAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getEmptyAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm4Access().getEqualitySubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFiniteIntRangeConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_7_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_10_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_12_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_8_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_11_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm1Access().getImplySubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm4Access().getInequalitySubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getLengthAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getLengthAction_2_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_9_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_14_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_13_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMakeListAction_5_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMemberAtIndexAction_4_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getModuloSubtermAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getMultiplicationSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm9Access().getNotAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberConstantAccess().getNumberConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm6Access().getNumberOfSubtermAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm1Access().getOrSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPartitionsBuiltInOperatorAccess().getPartitionElementOfAction_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getPredecessorAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getScalarProductSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getSublistAction_3_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getSubstringAction_2_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm5Access().getSubtractSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm7Access().getSubtractionSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getSuccessorAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm10Access().getTupleSubtermAction_4_2_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUserOperatorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Term7
protected class Term6_Term7ParserRuleCall_0 extends RuleCallToken {
	
	public Term6_Term7ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTerm6Access().getTerm7ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term7_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Term7_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({multisets::NumberOf.subterm+=current} "`" subterm+=Term7)*
protected class Term6_Group_1 extends GroupToken {
	
	public Term6_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm6Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term6_SubtermAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm6Access().getNumberOfSubtermAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {multisets::NumberOf.subterm+=current}
protected class Term6_NumberOfSubtermAction_1_0 extends ActionToken  {

	public Term6_NumberOfSubtermAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm6Access().getNumberOfSubtermAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term6_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term6_Term7ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "`"
protected class Term6_GraveAccentKeyword_1_1 extends KeywordToken  {
	
	public Term6_GraveAccentKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm6Access().getGraveAccentKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term6_NumberOfSubtermAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term7
protected class Term6_SubtermAssignment_1_2 extends AssignmentToken  {
	
	public Term6_SubtermAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm6Access().getSubtermAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term7_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm7Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm6Access().getSubtermTerm7ParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term6_GraveAccentKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Term6 ****************/


/************ begin Rule Term7 ****************
 *
 * Term7 returns terms::Term:
 * 
 * 	Term8 ({integers::Addition.subterm+=current} "+" subterm+=Term8 | {integers::Subtraction.subterm+=current} "-"
 * 
 * 	subterm+=Term8)*;
 *
 **/

// Term8 ({integers::Addition.subterm+=current} "+" subterm+=Term8 | {integers::Subtraction.subterm+=current} "-"
// 
// subterm+=Term8)*
protected class Term7_Group extends GroupToken {
	
	public Term7_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm7Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term7_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term7_Term8ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm5Access().getAddSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm7Access().getAdditionSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getAllAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm2Access().getAndSubtermAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getAppendAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantAccess().getBooleanConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityOfAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getContainsSubtermAction_1_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getDivisionSubtermAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDotConstantAccess().getDotConstantAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getEmptyAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm4Access().getEqualitySubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFiniteIntRangeConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_7_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_10_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_12_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_8_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_11_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm1Access().getImplySubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm4Access().getInequalitySubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getLengthAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getLengthAction_2_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_9_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_14_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_13_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMakeListAction_5_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMemberAtIndexAction_4_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getModuloSubtermAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getMultiplicationSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm9Access().getNotAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberConstantAccess().getNumberConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm6Access().getNumberOfSubtermAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm1Access().getOrSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPartitionsBuiltInOperatorAccess().getPartitionElementOfAction_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getPredecessorAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getScalarProductSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getSublistAction_3_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getSubstringAction_2_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm5Access().getSubtractSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm7Access().getSubtractionSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getSuccessorAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm10Access().getTupleSubtermAction_4_2_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUserOperatorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Term8
protected class Term7_Term8ParserRuleCall_0 extends RuleCallToken {
	
	public Term7_Term8ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTerm7Access().getTerm8ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term8_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Term8_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({integers::Addition.subterm+=current} "+" subterm+=Term8 | {integers::Subtraction.subterm+=current} "-"
// 
// subterm+=Term8)*
protected class Term7_Alternatives_1 extends AlternativesToken {

	public Term7_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTerm7Access().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term7_Group_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term7_Group_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm7Access().getAdditionSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm7Access().getSubtractionSubtermAction_1_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {integers::Addition.subterm+=current} "+" subterm+=Term8
protected class Term7_Group_1_0 extends GroupToken {
	
	public Term7_Group_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm7Access().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term7_SubtermAssignment_1_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm7Access().getAdditionSubtermAction_1_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {integers::Addition.subterm+=current}
protected class Term7_AdditionSubtermAction_1_0_0 extends ActionToken  {

	public Term7_AdditionSubtermAction_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm7Access().getAdditionSubtermAction_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term7_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term7_Term8ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "+"
protected class Term7_PlusSignKeyword_1_0_1 extends KeywordToken  {
	
	public Term7_PlusSignKeyword_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm7Access().getPlusSignKeyword_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term7_AdditionSubtermAction_1_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term8
protected class Term7_SubtermAssignment_1_0_2 extends AssignmentToken  {
	
	public Term7_SubtermAssignment_1_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm7Access().getSubtermAssignment_1_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term8_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm8Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm7Access().getSubtermTerm8ParserRuleCall_1_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term7_PlusSignKeyword_1_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// {integers::Subtraction.subterm+=current} "-" subterm+=Term8
protected class Term7_Group_1_1 extends GroupToken {
	
	public Term7_Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm7Access().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term7_SubtermAssignment_1_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm7Access().getSubtractionSubtermAction_1_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {integers::Subtraction.subterm+=current}
protected class Term7_SubtractionSubtermAction_1_1_0 extends ActionToken  {

	public Term7_SubtractionSubtermAction_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm7Access().getSubtractionSubtermAction_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term7_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term7_Term8ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "-"
protected class Term7_HyphenMinusKeyword_1_1_1 extends KeywordToken  {
	
	public Term7_HyphenMinusKeyword_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm7Access().getHyphenMinusKeyword_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term7_SubtractionSubtermAction_1_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term8
protected class Term7_SubtermAssignment_1_1_2 extends AssignmentToken  {
	
	public Term7_SubtermAssignment_1_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm7Access().getSubtermAssignment_1_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term8_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm8Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm7Access().getSubtermTerm8ParserRuleCall_1_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term7_HyphenMinusKeyword_1_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule Term7 ****************/


/************ begin Rule Term8 ****************
 *
 * Term8 returns terms::Term:
 * 
 * 	Term9 ({integers::Multiplication.subterm+=current} "*" subterm+=Term9 | {multisets::ScalarProduct.subterm+=current}
 * 
 * 	"**" subterm+=Term9 | {integers::Division.subterm+=current} "/" subterm+=Term9 | {integers::Modulo.subterm+=current}
 * 
 * 	"%" subterm+=Term9)*;
 *
 **/

// Term9 ({integers::Multiplication.subterm+=current} "*" subterm+=Term9 | {multisets::ScalarProduct.subterm+=current} "**"
// 
// subterm+=Term9 | {integers::Division.subterm+=current} "/" subterm+=Term9 | {integers::Modulo.subterm+=current} "%"
// 
// subterm+=Term9)*
protected class Term8_Group extends GroupToken {
	
	public Term8_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm8Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term8_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term8_Term9ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm5Access().getAddSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm7Access().getAdditionSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getAllAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm2Access().getAndSubtermAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getAppendAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantAccess().getBooleanConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityOfAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getContainsSubtermAction_1_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getDivisionSubtermAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDotConstantAccess().getDotConstantAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getEmptyAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm4Access().getEqualitySubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFiniteIntRangeConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_7_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_10_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_12_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_8_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_11_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm1Access().getImplySubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm4Access().getInequalitySubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getLengthAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getLengthAction_2_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_9_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_14_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_13_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMakeListAction_5_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMemberAtIndexAction_4_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getModuloSubtermAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getMultiplicationSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm9Access().getNotAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberConstantAccess().getNumberConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm6Access().getNumberOfSubtermAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm1Access().getOrSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPartitionsBuiltInOperatorAccess().getPartitionElementOfAction_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getPredecessorAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getScalarProductSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getSublistAction_3_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getSubstringAction_2_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm5Access().getSubtractSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm7Access().getSubtractionSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getSuccessorAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm10Access().getTupleSubtermAction_4_2_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUserOperatorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Term9
protected class Term8_Term9ParserRuleCall_0 extends RuleCallToken {
	
	public Term8_Term9ParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTerm8Access().getTerm9ParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term9_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Term9_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({integers::Multiplication.subterm+=current} "*" subterm+=Term9 | {multisets::ScalarProduct.subterm+=current} "**"
// 
// subterm+=Term9 | {integers::Division.subterm+=current} "/" subterm+=Term9 | {integers::Modulo.subterm+=current} "%"
// 
// subterm+=Term9)*
protected class Term8_Alternatives_1 extends AlternativesToken {

	public Term8_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTerm8Access().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term8_Group_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term8_Group_1_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Term8_Group_1_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Term8_Group_1_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm8Access().getDivisionSubtermAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getModuloSubtermAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getMultiplicationSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getScalarProductSubtermAction_1_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {integers::Multiplication.subterm+=current} "*" subterm+=Term9
protected class Term8_Group_1_0 extends GroupToken {
	
	public Term8_Group_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm8Access().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term8_SubtermAssignment_1_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm8Access().getMultiplicationSubtermAction_1_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {integers::Multiplication.subterm+=current}
protected class Term8_MultiplicationSubtermAction_1_0_0 extends ActionToken  {

	public Term8_MultiplicationSubtermAction_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm8Access().getMultiplicationSubtermAction_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term8_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term8_Term9ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "*"
protected class Term8_AsteriskKeyword_1_0_1 extends KeywordToken  {
	
	public Term8_AsteriskKeyword_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm8Access().getAsteriskKeyword_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term8_MultiplicationSubtermAction_1_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term9
protected class Term8_SubtermAssignment_1_0_2 extends AssignmentToken  {
	
	public Term8_SubtermAssignment_1_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm8Access().getSubtermAssignment_1_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term9_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm9Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm8Access().getSubtermTerm9ParserRuleCall_1_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term8_AsteriskKeyword_1_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// {multisets::ScalarProduct.subterm+=current} "**" subterm+=Term9
protected class Term8_Group_1_1 extends GroupToken {
	
	public Term8_Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm8Access().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term8_SubtermAssignment_1_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm8Access().getScalarProductSubtermAction_1_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {multisets::ScalarProduct.subterm+=current}
protected class Term8_ScalarProductSubtermAction_1_1_0 extends ActionToken  {

	public Term8_ScalarProductSubtermAction_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm8Access().getScalarProductSubtermAction_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term8_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term8_Term9ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "**"
protected class Term8_AsteriskAsteriskKeyword_1_1_1 extends KeywordToken  {
	
	public Term8_AsteriskAsteriskKeyword_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm8Access().getAsteriskAsteriskKeyword_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term8_ScalarProductSubtermAction_1_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term9
protected class Term8_SubtermAssignment_1_1_2 extends AssignmentToken  {
	
	public Term8_SubtermAssignment_1_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm8Access().getSubtermAssignment_1_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term9_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm9Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm8Access().getSubtermTerm9ParserRuleCall_1_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term8_AsteriskAsteriskKeyword_1_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// {integers::Division.subterm+=current} "/" subterm+=Term9
protected class Term8_Group_1_2 extends GroupToken {
	
	public Term8_Group_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm8Access().getGroup_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term8_SubtermAssignment_1_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm8Access().getDivisionSubtermAction_1_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {integers::Division.subterm+=current}
protected class Term8_DivisionSubtermAction_1_2_0 extends ActionToken  {

	public Term8_DivisionSubtermAction_1_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm8Access().getDivisionSubtermAction_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term8_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term8_Term9ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "/"
protected class Term8_SolidusKeyword_1_2_1 extends KeywordToken  {
	
	public Term8_SolidusKeyword_1_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm8Access().getSolidusKeyword_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term8_DivisionSubtermAction_1_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term9
protected class Term8_SubtermAssignment_1_2_2 extends AssignmentToken  {
	
	public Term8_SubtermAssignment_1_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm8Access().getSubtermAssignment_1_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term9_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm9Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm8Access().getSubtermTerm9ParserRuleCall_1_2_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term8_SolidusKeyword_1_2_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// {integers::Modulo.subterm+=current} "%" subterm+=Term9
protected class Term8_Group_1_3 extends GroupToken {
	
	public Term8_Group_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm8Access().getGroup_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term8_SubtermAssignment_1_3_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm8Access().getModuloSubtermAction_1_3_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {integers::Modulo.subterm+=current}
protected class Term8_ModuloSubtermAction_1_3_0 extends ActionToken  {

	public Term8_ModuloSubtermAction_1_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm8Access().getModuloSubtermAction_1_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term8_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term8_Term9ParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "%"
protected class Term8_PercentSignKeyword_1_3_1 extends KeywordToken  {
	
	public Term8_PercentSignKeyword_1_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm8Access().getPercentSignKeyword_1_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term8_ModuloSubtermAction_1_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term9
protected class Term8_SubtermAssignment_1_3_2 extends AssignmentToken  {
	
	public Term8_SubtermAssignment_1_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm8Access().getSubtermAssignment_1_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term9_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm9Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm8Access().getSubtermTerm9ParserRuleCall_1_3_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term8_PercentSignKeyword_1_3_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule Term8 ****************/


/************ begin Rule Term9 ****************
 *
 * Term9 returns terms::Term:
 * 
 * 	"not" {booleans::Not} subterm+=Term9 | Term10;
 *
 **/

// "not" {booleans::Not} subterm+=Term9 | Term10
protected class Term9_Alternatives extends AlternativesToken {

	public Term9_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTerm9Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term9_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term9_Term10ParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm5Access().getAddSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm7Access().getAdditionSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getAllAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm2Access().getAndSubtermAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getAppendAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantAccess().getBooleanConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityOfAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getContainsSubtermAction_1_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getDivisionSubtermAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDotConstantAccess().getDotConstantAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getEmptyAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm4Access().getEqualitySubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFiniteIntRangeConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_7_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_10_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_12_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_8_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_11_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm1Access().getImplySubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm4Access().getInequalitySubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getLengthAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getLengthAction_2_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_9_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_14_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_13_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMakeListAction_5_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMemberAtIndexAction_4_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getModuloSubtermAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getMultiplicationSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm9Access().getNotAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberConstantAccess().getNumberConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm6Access().getNumberOfSubtermAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm1Access().getOrSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPartitionsBuiltInOperatorAccess().getPartitionElementOfAction_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getPredecessorAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getScalarProductSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getSublistAction_3_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getSubstringAction_2_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm5Access().getSubtractSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm7Access().getSubtractionSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getSuccessorAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm10Access().getTupleSubtermAction_4_2_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUserOperatorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "not" {booleans::Not} subterm+=Term9
protected class Term9_Group_0 extends GroupToken {
	
	public Term9_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm9Access().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term9_SubtermAssignment_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm9Access().getNotAction_0_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "not"
protected class Term9_NotKeyword_0_0 extends KeywordToken  {
	
	public Term9_NotKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm9Access().getNotKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// {booleans::Not}
protected class Term9_NotAction_0_1 extends ActionToken  {

	public Term9_NotAction_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm9Access().getNotAction_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term9_NotKeyword_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// subterm+=Term9
protected class Term9_SubtermAssignment_0_2 extends AssignmentToken  {
	
	public Term9_SubtermAssignment_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm9Access().getSubtermAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term9_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm9Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm9Access().getSubtermTerm9ParserRuleCall_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term9_NotAction_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// Term10
protected class Term9_Term10ParserRuleCall_1 extends RuleCallToken {
	
	public Term9_Term10ParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTerm9Access().getTerm10ParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term10_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Term10_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Term9 ****************/


/************ begin Rule Term10 ****************
 *
 * Term10 returns terms::Term:
 * 
 * 	Variable | UserOperator | OtherBuiltInOperator | BuiltInConst | "(" Term (")" | "," {terms::Tuple.subterm+=current}
 * 
 * 	subterm+=Term ("," subterm+=Term)* ")");
 *
 **/

// Variable | UserOperator | OtherBuiltInOperator | BuiltInConst | "(" Term (")" | "," {terms::Tuple.subterm+=current}
// 
// subterm+=Term ("," subterm+=Term)* ")")
protected class Term10_Alternatives extends AlternativesToken {

	public Term10_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTerm10Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term10_VariableParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term10_UserOperatorParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Term10_OtherBuiltInOperatorParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Term10_BuiltInConstParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Term10_Group_4(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm5Access().getAddSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm7Access().getAdditionSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getAllAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm2Access().getAndSubtermAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getAppendAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantAccess().getBooleanConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityOfAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getContainsSubtermAction_1_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getDivisionSubtermAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDotConstantAccess().getDotConstantAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getEmptyAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm4Access().getEqualitySubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFiniteIntRangeConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_7_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_10_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanSubtermAction_1_12_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_8_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getGreaterThanOrEqualSubtermAction_1_11_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm1Access().getImplySubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm4Access().getInequalitySubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getLengthAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getLengthAction_2_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_9_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanSubtermAction_1_14_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm3Access().getLessThanOrEqualSubtermAction_1_13_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMakeListAction_5_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMemberAtIndexAction_4_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getModuloSubtermAction_1_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getMultiplicationSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm9Access().getNotAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberConstantAccess().getNumberConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm6Access().getNumberOfSubtermAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm1Access().getOrSubtermAction_1_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPartitionsBuiltInOperatorAccess().getPartitionElementOfAction_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getPredecessorAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm8Access().getScalarProductSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getSublistAction_3_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getSubstringAction_2_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm5Access().getSubtractSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm7Access().getSubtractionSubtermAction_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getSuccessorAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTerm10Access().getTupleSubtermAction_4_2_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUserOperatorRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Variable
protected class Term10_VariableParserRuleCall_0 extends RuleCallToken {
	
	public Term10_VariableParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTerm10Access().getVariableParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Variable_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Variable_NameAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// UserOperator
protected class Term10_UserOperatorParserRuleCall_1 extends RuleCallToken {
	
	public Term10_UserOperatorParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTerm10Access().getUserOperatorParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UserOperator_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUserOperatorRule().getType().getClassifier())
			return null;
		if(checkForRecursion(UserOperator_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// OtherBuiltInOperator
protected class Term10_OtherBuiltInOperatorParserRuleCall_2 extends RuleCallToken {
	
	public Term10_OtherBuiltInOperatorParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTerm10Access().getOtherBuiltInOperatorParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OtherBuiltInOperator_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getAppendAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityOfAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getLengthAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getLengthAction_2_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMakeListAction_5_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMemberAtIndexAction_4_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPartitionsBuiltInOperatorAccess().getPartitionElementOfAction_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getPredecessorAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getSublistAction_3_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getSubstringAction_2_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getSuccessorAction_0_2().getType().getClassifier())
			return null;
		if(checkForRecursion(OtherBuiltInOperator_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// BuiltInConst
protected class Term10_BuiltInConstParserRuleCall_3 extends RuleCallToken {
	
	public Term10_BuiltInConstParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTerm10Access().getBuiltInConstParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BuiltInConst_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getAllAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantAccess().getBooleanConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDotConstantAccess().getDotConstantAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getEmptyAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFiniteIntRangeConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberConstantAccess().getNumberConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantRule().getType().getClassifier())
			return null;
		if(checkForRecursion(BuiltInConst_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// "(" Term (")" | "," {terms::Tuple.subterm+=current} subterm+=Term ("," subterm+=Term)* ")")
protected class Term10_Group_4 extends GroupToken {
	
	public Term10_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm10Access().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term10_Alternatives_4_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class Term10_LeftParenthesisKeyword_4_0 extends KeywordToken  {
	
	public Term10_LeftParenthesisKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm10Access().getLeftParenthesisKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// Term
protected class Term10_TermParserRuleCall_4_1 extends RuleCallToken {
	
	public Term10_TermParserRuleCall_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTerm10Access().getTermParserRuleCall_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Term_Term1ParserRuleCall.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term10_LeftParenthesisKeyword_4_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// ")" | "," {terms::Tuple.subterm+=current} subterm+=Term ("," subterm+=Term)* ")"
protected class Term10_Alternatives_4_2 extends AlternativesToken {

	public Term10_Alternatives_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTerm10Access().getAlternatives_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term10_RightParenthesisKeyword_4_2_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term10_Group_4_2_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ")"
protected class Term10_RightParenthesisKeyword_4_2_0 extends KeywordToken  {
	
	public Term10_RightParenthesisKeyword_4_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm10Access().getRightParenthesisKeyword_4_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term10_TermParserRuleCall_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "," {terms::Tuple.subterm+=current} subterm+=Term ("," subterm+=Term)* ")"
protected class Term10_Group_4_2_1 extends GroupToken {
	
	public Term10_Group_4_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm10Access().getGroup_4_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term10_RightParenthesisKeyword_4_2_1_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTerm10Access().getTupleSubtermAction_4_2_1_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ","
protected class Term10_CommaKeyword_4_2_1_0 extends KeywordToken  {
	
	public Term10_CommaKeyword_4_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm10Access().getCommaKeyword_4_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term10_TermParserRuleCall_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// {terms::Tuple.subterm+=current}
protected class Term10_TupleSubtermAction_4_2_1_1 extends ActionToken  {

	public Term10_TupleSubtermAction_4_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTerm10Access().getTupleSubtermAction_4_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term10_CommaKeyword_4_2_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("subterm", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("subterm")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// subterm+=Term
protected class Term10_SubtermAssignment_4_2_1_2 extends AssignmentToken  {
	
	public Term10_SubtermAssignment_4_2_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm10Access().getSubtermAssignment_4_2_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm10Access().getSubtermTermParserRuleCall_4_2_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term10_TupleSubtermAction_4_2_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," subterm+=Term)*
protected class Term10_Group_4_2_1_3 extends GroupToken {
	
	public Term10_Group_4_2_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTerm10Access().getGroup_4_2_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term10_SubtermAssignment_4_2_1_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class Term10_CommaKeyword_4_2_1_3_0 extends KeywordToken  {
	
	public Term10_CommaKeyword_4_2_1_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm10Access().getCommaKeyword_4_2_1_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term10_Group_4_2_1_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term10_SubtermAssignment_4_2_1_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// subterm+=Term
protected class Term10_SubtermAssignment_4_2_1_3_1 extends AssignmentToken  {
	
	public Term10_SubtermAssignment_4_2_1_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTerm10Access().getSubtermAssignment_4_2_1_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTerm10Access().getSubtermTermParserRuleCall_4_2_1_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term10_CommaKeyword_4_2_1_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ")"
protected class Term10_RightParenthesisKeyword_4_2_1_4 extends KeywordToken  {
	
	public Term10_RightParenthesisKeyword_4_2_1_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTerm10Access().getRightParenthesisKeyword_4_2_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term10_Group_4_2_1_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term10_SubtermAssignment_4_2_1_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}





/************ end Rule Term10 ****************/


/************ begin Rule Variable ****************
 *
 * Variable returns terms::Variable:
 * 
 * 	name=ID;
 *
 **/

// name=ID
protected class Variable_NameAssignment extends AssignmentToken  {
	
	public Variable_NameAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableAccess().getNameAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVariableRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule Variable ****************/


/************ begin Rule UserOperator ****************
 *
 * UserOperator returns terms::UserOperator:
 * 
 * //    '$' {terms::UserOperator} name = ID '(' ( subterm += Term (',' subterm += Term )* )?  ')' ;
 *  name=ID "("
 * 
 * 	(subterm+=Term ("," subterm+=Term)*)? ")";
 *
 **/

// //    '$' {terms::UserOperator} name = ID '(' ( subterm += Term (',' subterm += Term )* )?  ')' ;
//  name=ID "("
// 
// (subterm+=Term ("," subterm+=Term)*)? ")"
protected class UserOperator_Group extends GroupToken {
	
	public UserOperator_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUserOperatorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UserOperator_RightParenthesisKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUserOperatorRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// //    '$' {terms::UserOperator} name = ID '(' ( subterm += Term (',' subterm += Term )* )?  ')' ;
//  name=ID
protected class UserOperator_NameAssignment_0 extends AssignmentToken  {
	
	public UserOperator_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUserOperatorAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getUserOperatorAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getUserOperatorAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class UserOperator_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public UserOperator_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUserOperatorAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UserOperator_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (subterm+=Term ("," subterm+=Term)*)?
protected class UserOperator_Group_2 extends GroupToken {
	
	public UserOperator_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUserOperatorAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UserOperator_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new UserOperator_SubtermAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// subterm+=Term
protected class UserOperator_SubtermAssignment_2_0 extends AssignmentToken  {
	
	public UserOperator_SubtermAssignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUserOperatorAccess().getSubtermAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getUserOperatorAccess().getSubtermTermParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new UserOperator_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," subterm+=Term)*
protected class UserOperator_Group_2_1 extends GroupToken {
	
	public UserOperator_Group_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUserOperatorAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UserOperator_SubtermAssignment_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class UserOperator_CommaKeyword_2_1_0 extends KeywordToken  {
	
	public UserOperator_CommaKeyword_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUserOperatorAccess().getCommaKeyword_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UserOperator_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new UserOperator_SubtermAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// subterm+=Term
protected class UserOperator_SubtermAssignment_2_1_1 extends AssignmentToken  {
	
	public UserOperator_SubtermAssignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUserOperatorAccess().getSubtermAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getUserOperatorAccess().getSubtermTermParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new UserOperator_CommaKeyword_2_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class UserOperator_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public UserOperator_RightParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUserOperatorAccess().getRightParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UserOperator_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new UserOperator_LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule UserOperator ****************/


/************ begin Rule OtherBuiltInOperator ****************
 *
 * OtherBuiltInOperator returns terms::Term:
 * 
 * 	"|" {multisets::Cardinality} subterm+=Term10 "|" | "#(" {multisets::CardinalityOf} subterm+=Term "," subterm+=Term
 * 
 * 	")" | CyclicEnumsBuiltInOperator | PartitionsBuiltInOperator | StringsBuiltInOperator | ListsBuiltInOperator;
 *
 **/

// "|" {multisets::Cardinality} subterm+=Term10 "|" | "#(" {multisets::CardinalityOf} subterm+=Term "," subterm+=Term ")" |
// 
// CyclicEnumsBuiltInOperator | PartitionsBuiltInOperator | StringsBuiltInOperator | ListsBuiltInOperator
protected class OtherBuiltInOperator_Alternatives extends AlternativesToken {

	public OtherBuiltInOperator_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getOtherBuiltInOperatorAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OtherBuiltInOperator_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OtherBuiltInOperator_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new OtherBuiltInOperator_CyclicEnumsBuiltInOperatorParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new OtherBuiltInOperator_PartitionsBuiltInOperatorParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new OtherBuiltInOperator_StringsBuiltInOperatorParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new OtherBuiltInOperator_ListsBuiltInOperatorParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getAppendAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityOfAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getLengthAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getLengthAction_2_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMakeListAction_5_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMemberAtIndexAction_4_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPartitionsBuiltInOperatorAccess().getPartitionElementOfAction_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getPredecessorAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getSublistAction_3_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getSubstringAction_2_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getSuccessorAction_0_2().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "|" {multisets::Cardinality} subterm+=Term10 "|"
protected class OtherBuiltInOperator_Group_0 extends GroupToken {
	
	public OtherBuiltInOperator_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOtherBuiltInOperatorAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OtherBuiltInOperator_VerticalLineKeyword_0_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityAction_0_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "|"
protected class OtherBuiltInOperator_VerticalLineKeyword_0_0 extends KeywordToken  {
	
	public OtherBuiltInOperator_VerticalLineKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOtherBuiltInOperatorAccess().getVerticalLineKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// {multisets::Cardinality}
protected class OtherBuiltInOperator_CardinalityAction_0_1 extends ActionToken  {

	public OtherBuiltInOperator_CardinalityAction_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityAction_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OtherBuiltInOperator_VerticalLineKeyword_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// subterm+=Term10
protected class OtherBuiltInOperator_SubtermAssignment_0_2 extends AssignmentToken  {
	
	public OtherBuiltInOperator_SubtermAssignment_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOtherBuiltInOperatorAccess().getSubtermAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term10_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTerm10Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOtherBuiltInOperatorAccess().getSubtermTerm10ParserRuleCall_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OtherBuiltInOperator_CardinalityAction_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "|"
protected class OtherBuiltInOperator_VerticalLineKeyword_0_3 extends KeywordToken  {
	
	public OtherBuiltInOperator_VerticalLineKeyword_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOtherBuiltInOperatorAccess().getVerticalLineKeyword_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OtherBuiltInOperator_SubtermAssignment_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// "#(" {multisets::CardinalityOf} subterm+=Term "," subterm+=Term ")"
protected class OtherBuiltInOperator_Group_1 extends GroupToken {
	
	public OtherBuiltInOperator_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOtherBuiltInOperatorAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OtherBuiltInOperator_RightParenthesisKeyword_1_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityOfAction_1_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#("
protected class OtherBuiltInOperator_NumberSignLeftParenthesisKeyword_1_0 extends KeywordToken  {
	
	public OtherBuiltInOperator_NumberSignLeftParenthesisKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOtherBuiltInOperatorAccess().getNumberSignLeftParenthesisKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// {multisets::CardinalityOf}
protected class OtherBuiltInOperator_CardinalityOfAction_1_1 extends ActionToken  {

	public OtherBuiltInOperator_CardinalityOfAction_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOtherBuiltInOperatorAccess().getCardinalityOfAction_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OtherBuiltInOperator_NumberSignLeftParenthesisKeyword_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// subterm+=Term
protected class OtherBuiltInOperator_SubtermAssignment_1_2 extends AssignmentToken  {
	
	public OtherBuiltInOperator_SubtermAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOtherBuiltInOperatorAccess().getSubtermAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOtherBuiltInOperatorAccess().getSubtermTermParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OtherBuiltInOperator_CardinalityOfAction_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class OtherBuiltInOperator_CommaKeyword_1_3 extends KeywordToken  {
	
	public OtherBuiltInOperator_CommaKeyword_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOtherBuiltInOperatorAccess().getCommaKeyword_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OtherBuiltInOperator_SubtermAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term
protected class OtherBuiltInOperator_SubtermAssignment_1_4 extends AssignmentToken  {
	
	public OtherBuiltInOperator_SubtermAssignment_1_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOtherBuiltInOperatorAccess().getSubtermAssignment_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOtherBuiltInOperatorAccess().getSubtermTermParserRuleCall_1_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OtherBuiltInOperator_CommaKeyword_1_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class OtherBuiltInOperator_RightParenthesisKeyword_1_5 extends KeywordToken  {
	
	public OtherBuiltInOperator_RightParenthesisKeyword_1_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOtherBuiltInOperatorAccess().getRightParenthesisKeyword_1_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OtherBuiltInOperator_SubtermAssignment_1_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// CyclicEnumsBuiltInOperator
protected class OtherBuiltInOperator_CyclicEnumsBuiltInOperatorParserRuleCall_2 extends RuleCallToken {
	
	public OtherBuiltInOperator_CyclicEnumsBuiltInOperatorParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOtherBuiltInOperatorAccess().getCyclicEnumsBuiltInOperatorParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CyclicEnumsBuiltInOperator_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getPredecessorAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getSuccessorAction_0_2().getType().getClassifier())
			return null;
		if(checkForRecursion(CyclicEnumsBuiltInOperator_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// PartitionsBuiltInOperator
protected class OtherBuiltInOperator_PartitionsBuiltInOperatorParserRuleCall_3 extends RuleCallToken {
	
	public OtherBuiltInOperator_PartitionsBuiltInOperatorParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOtherBuiltInOperatorAccess().getPartitionsBuiltInOperatorParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PartitionsBuiltInOperator_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPartitionsBuiltInOperatorAccess().getPartitionElementOfAction_2().getType().getClassifier())
			return null;
		if(checkForRecursion(PartitionsBuiltInOperator_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// StringsBuiltInOperator
protected class OtherBuiltInOperator_StringsBuiltInOperatorParserRuleCall_4 extends RuleCallToken {
	
	public OtherBuiltInOperator_StringsBuiltInOperatorParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOtherBuiltInOperatorAccess().getStringsBuiltInOperatorParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringsBuiltInOperator_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getLengthAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getSubstringAction_2_1().getType().getClassifier())
			return null;
		if(checkForRecursion(StringsBuiltInOperator_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ListsBuiltInOperator
protected class OtherBuiltInOperator_ListsBuiltInOperatorParserRuleCall_5 extends RuleCallToken {
	
	public OtherBuiltInOperator_ListsBuiltInOperatorParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOtherBuiltInOperatorAccess().getListsBuiltInOperatorParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getAppendAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getLengthAction_2_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMakeListAction_5_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMemberAtIndexAction_4_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getSublistAction_3_2().getType().getClassifier())
			return null;
		if(checkForRecursion(ListsBuiltInOperator_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule OtherBuiltInOperator ****************/


/************ begin Rule BuiltInSort ****************
 *
 * / * -------------------------------------------------------------
 *  * Dispatch for concrete syntax for BuiltInSort
 *  * ------------------------------------------------------------- * /
 * 
 * BuiltInSort returns terms::BuiltInSort:
 * 
 * 	Dot | Boolean | Number | FiniteEnumeration | CyclicEnumeration | FiniteIntRange | StringSort | ListSort;
 *
 **/

// Dot | Boolean | Number | FiniteEnumeration | CyclicEnumeration | FiniteIntRange | StringSort | ListSort
protected class BuiltInSort_Alternatives extends AlternativesToken {

	public BuiltInSort_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getBuiltInSortAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BuiltInSort_DotParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new BuiltInSort_BooleanParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new BuiltInSort_NumberParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new BuiltInSort_FiniteEnumerationParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new BuiltInSort_CyclicEnumerationParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new BuiltInSort_FiniteIntRangeParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new BuiltInSort_StringSortParserRuleCall_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new BuiltInSort_ListSortParserRuleCall_7(lastRuleCallOrigin, this, 7, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanAccess().getBoolAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumerationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDotAccess().getDotAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFiniteEnumerationRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFiniteIntRangeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberAccess().getIntegerAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListSortRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberAccess().getNaturalAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberAccess().getPositiveAction_2_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringSortAccess().getStringAction_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Dot
protected class BuiltInSort_DotParserRuleCall_0 extends RuleCallToken {
	
	public BuiltInSort_DotParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBuiltInSortAccess().getDotParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dot_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDotAccess().getDotAction_1().getType().getClassifier())
			return null;
		if(checkForRecursion(Dot_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Boolean
protected class BuiltInSort_BooleanParserRuleCall_1 extends RuleCallToken {
	
	public BuiltInSort_BooleanParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBuiltInSortAccess().getBooleanParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Boolean_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanAccess().getBoolAction_1().getType().getClassifier())
			return null;
		if(checkForRecursion(Boolean_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Number
protected class BuiltInSort_NumberParserRuleCall_2 extends RuleCallToken {
	
	public BuiltInSort_NumberParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBuiltInSortAccess().getNumberParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Number_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNumberAccess().getIntegerAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberAccess().getNaturalAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberAccess().getPositiveAction_2_1().getType().getClassifier())
			return null;
		if(checkForRecursion(Number_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// FiniteEnumeration
protected class BuiltInSort_FiniteEnumerationParserRuleCall_3 extends RuleCallToken {
	
	public BuiltInSort_FiniteEnumerationParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBuiltInSortAccess().getFiniteEnumerationParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FiniteEnumeration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFiniteEnumerationRule().getType().getClassifier())
			return null;
		if(checkForRecursion(FiniteEnumeration_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// CyclicEnumeration
protected class BuiltInSort_CyclicEnumerationParserRuleCall_4 extends RuleCallToken {
	
	public BuiltInSort_CyclicEnumerationParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBuiltInSortAccess().getCyclicEnumerationParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CyclicEnumeration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCyclicEnumerationRule().getType().getClassifier())
			return null;
		if(checkForRecursion(CyclicEnumeration_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// FiniteIntRange
protected class BuiltInSort_FiniteIntRangeParserRuleCall_5 extends RuleCallToken {
	
	public BuiltInSort_FiniteIntRangeParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBuiltInSortAccess().getFiniteIntRangeParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FiniteIntRange_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFiniteIntRangeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(FiniteIntRange_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// StringSort
protected class BuiltInSort_StringSortParserRuleCall_6 extends RuleCallToken {
	
	public BuiltInSort_StringSortParserRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBuiltInSortAccess().getStringSortParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringSort_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringSortAccess().getStringAction_1().getType().getClassifier())
			return null;
		if(checkForRecursion(StringSort_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ListSort
protected class BuiltInSort_ListSortParserRuleCall_7 extends RuleCallToken {
	
	public BuiltInSort_ListSortParserRuleCall_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBuiltInSortAccess().getListSortParserRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListSort_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getListSortRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ListSort_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule BuiltInSort ****************/


/************ begin Rule BuiltInConst ****************
 *
 * BuiltInConst returns terms::Term:
 * 
 * 	DotConstant | BooleanConstant | MultisetConstant | NumberConstant | FiniteIntRangeConstant | StringConstant |
 * 
 * 	ListConstant;
 *
 **/

// DotConstant | BooleanConstant | MultisetConstant | NumberConstant | FiniteIntRangeConstant | StringConstant |
// 
// ListConstant
protected class BuiltInConst_Alternatives extends AlternativesToken {

	public BuiltInConst_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getBuiltInConstAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BuiltInConst_DotConstantParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new BuiltInConst_BooleanConstantParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new BuiltInConst_MultisetConstantParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new BuiltInConst_NumberConstantParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new BuiltInConst_FiniteIntRangeConstantParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new BuiltInConst_StringConstantParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new BuiltInConst_ListConstantParserRuleCall_6(lastRuleCallOrigin, this, 6, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getAllAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantAccess().getBooleanConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDotConstantAccess().getDotConstantAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getEmptyAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFiniteIntRangeConstantRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberConstantAccess().getNumberConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// DotConstant
protected class BuiltInConst_DotConstantParserRuleCall_0 extends RuleCallToken {
	
	public BuiltInConst_DotConstantParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBuiltInConstAccess().getDotConstantParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DotConstant_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDotConstantAccess().getDotConstantAction_1().getType().getClassifier())
			return null;
		if(checkForRecursion(DotConstant_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// BooleanConstant
protected class BuiltInConst_BooleanConstantParserRuleCall_1 extends RuleCallToken {
	
	public BuiltInConst_BooleanConstantParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBuiltInConstAccess().getBooleanConstantParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanConstant_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanConstantAccess().getBooleanConstantAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(BooleanConstant_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// MultisetConstant
protected class BuiltInConst_MultisetConstantParserRuleCall_2 extends RuleCallToken {
	
	public BuiltInConst_MultisetConstantParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBuiltInConstAccess().getMultisetConstantParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultisetConstant_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getAllAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getEmptyAction_1_1().getType().getClassifier())
			return null;
		if(checkForRecursion(MultisetConstant_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// NumberConstant
protected class BuiltInConst_NumberConstantParserRuleCall_3 extends RuleCallToken {
	
	public BuiltInConst_NumberConstantParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBuiltInConstAccess().getNumberConstantParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NumberConstant_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNumberConstantAccess().getNumberConstantAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(NumberConstant_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// FiniteIntRangeConstant
protected class BuiltInConst_FiniteIntRangeConstantParserRuleCall_4 extends RuleCallToken {
	
	public BuiltInConst_FiniteIntRangeConstantParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBuiltInConstAccess().getFiniteIntRangeConstantParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FiniteIntRangeConstant_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFiniteIntRangeConstantRule().getType().getClassifier())
			return null;
		if(checkForRecursion(FiniteIntRangeConstant_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// StringConstant
protected class BuiltInConst_StringConstantParserRuleCall_5 extends RuleCallToken {
	
	public BuiltInConst_StringConstantParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBuiltInConstAccess().getStringConstantParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringConstant_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringConstantRule().getType().getClassifier())
			return null;
		if(checkForRecursion(StringConstant_ValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ListConstant
protected class BuiltInConst_ListConstantParserRuleCall_6 extends RuleCallToken {
	
	public BuiltInConst_ListConstantParserRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBuiltInConstAccess().getListConstantParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListConstant_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getListConstantRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ListConstant_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule BuiltInConst ****************/


/************ begin Rule MultisetConstant ****************
 *
 * / * -------------------------------------------------------------
 *  * Concrete syntax for package multisets
 *  * ------------------------------------------------------------- * /
 * 
 * // Technically, All is an operator. But in the concrete syntax, I
 *  // made it a constant. 
 *  MultisetConstant returns
 * 
 * terms::MultiSetOperator:
 * 
 * 	"all" {multisets::All} ":" refsort=Sort | "empty" {multisets::Empty} ":" refsort=Sort;
 *
 **/

// "all" {multisets::All} ":" refsort=Sort | "empty" {multisets::Empty} ":" refsort=Sort
protected class MultisetConstant_Alternatives extends AlternativesToken {

	public MultisetConstant_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getMultisetConstantAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultisetConstant_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MultisetConstant_Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getAllAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getEmptyAction_1_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "all" {multisets::All} ":" refsort=Sort
protected class MultisetConstant_Group_0 extends GroupToken {
	
	public MultisetConstant_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultisetConstantAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultisetConstant_RefsortAssignment_0_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getAllAction_0_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "all"
protected class MultisetConstant_AllKeyword_0_0 extends KeywordToken  {
	
	public MultisetConstant_AllKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMultisetConstantAccess().getAllKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// {multisets::All}
protected class MultisetConstant_AllAction_0_1 extends ActionToken  {

	public MultisetConstant_AllAction_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getMultisetConstantAccess().getAllAction_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultisetConstant_AllKeyword_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// ":"
protected class MultisetConstant_ColonKeyword_0_2 extends KeywordToken  {
	
	public MultisetConstant_ColonKeyword_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMultisetConstantAccess().getColonKeyword_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultisetConstant_AllAction_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// refsort=Sort
protected class MultisetConstant_RefsortAssignment_0_3 extends AssignmentToken  {
	
	public MultisetConstant_RefsortAssignment_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultisetConstantAccess().getRefsortAssignment_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sort_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("refsort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("refsort");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMultisetConstantAccess().getRefsortSortParserRuleCall_0_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MultisetConstant_ColonKeyword_0_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "empty" {multisets::Empty} ":" refsort=Sort
protected class MultisetConstant_Group_1 extends GroupToken {
	
	public MultisetConstant_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultisetConstantAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultisetConstant_RefsortAssignment_1_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultisetConstantAccess().getEmptyAction_1_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "empty"
protected class MultisetConstant_EmptyKeyword_1_0 extends KeywordToken  {
	
	public MultisetConstant_EmptyKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMultisetConstantAccess().getEmptyKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// {multisets::Empty}
protected class MultisetConstant_EmptyAction_1_1 extends ActionToken  {

	public MultisetConstant_EmptyAction_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getMultisetConstantAccess().getEmptyAction_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultisetConstant_EmptyKeyword_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// ":"
protected class MultisetConstant_ColonKeyword_1_2 extends KeywordToken  {
	
	public MultisetConstant_ColonKeyword_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMultisetConstantAccess().getColonKeyword_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultisetConstant_EmptyAction_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// refsort=Sort
protected class MultisetConstant_RefsortAssignment_1_3 extends AssignmentToken  {
	
	public MultisetConstant_RefsortAssignment_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultisetConstantAccess().getRefsortAssignment_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sort_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("refsort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("refsort");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMultisetConstantAccess().getRefsortSortParserRuleCall_1_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MultisetConstant_ColonKeyword_1_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule MultisetConstant ****************/


/************ begin Rule Dot ****************
 *
 * / * -------------------------------------------------------------
 *  * Concrete syntax for package dots
 *  * ------------------------------------------------------------- * /
 * 
 * Dot returns dots::Dot:
 * 
 * 	"DOT" {dots::Dot};
 *
 **/

// "DOT" {dots::Dot}
protected class Dot_Group extends GroupToken {
	
	public Dot_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDotAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dot_DotAction_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDotAccess().getDotAction_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "DOT"
protected class Dot_DOTKeyword_0 extends KeywordToken  {
	
	public Dot_DOTKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDotAccess().getDOTKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// {dots::Dot}
protected class Dot_DotAction_1 extends ActionToken  {

	public Dot_DotAction_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getDotAccess().getDotAction_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Dot_DOTKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}


/************ end Rule Dot ****************/


/************ begin Rule DotConstant ****************
 *
 * DotConstant returns dots::DotConstant:
 * 
 * 	"dot" {dots::DotConstant};
 *
 **/

// "dot" {dots::DotConstant}
protected class DotConstant_Group extends GroupToken {
	
	public DotConstant_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDotConstantAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DotConstant_DotConstantAction_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDotConstantAccess().getDotConstantAction_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "dot"
protected class DotConstant_DotKeyword_0 extends KeywordToken  {
	
	public DotConstant_DotKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDotConstantAccess().getDotKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// {dots::DotConstant}
protected class DotConstant_DotConstantAction_1 extends ActionToken  {

	public DotConstant_DotConstantAction_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getDotConstantAccess().getDotConstantAction_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DotConstant_DotKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}


/************ end Rule DotConstant ****************/


/************ begin Rule Boolean ****************
 *
 * / * -------------------------------------------------------------
 *  * Concrete syntax for package boolean
 *  * ------------------------------------------------------------- * /
 * 
 * Boolean returns booleans::Bool:
 * 
 * 	"BOOL" {booleans::Bool};
 *
 **/

// "BOOL" {booleans::Bool}
protected class Boolean_Group extends GroupToken {
	
	public Boolean_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBooleanAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Boolean_BoolAction_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanAccess().getBoolAction_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "BOOL"
protected class Boolean_BOOLKeyword_0 extends KeywordToken  {
	
	public Boolean_BOOLKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBooleanAccess().getBOOLKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// {booleans::Bool}
protected class Boolean_BoolAction_1 extends ActionToken  {

	public Boolean_BoolAction_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getBooleanAccess().getBoolAction_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Boolean_BOOLKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}


/************ end Rule Boolean ****************/


/************ begin Rule BooleanConstant ****************
 *
 * BooleanConstant returns booleans::BooleanConstant: //    value = BOOL;
 *  {booleans::BooleanConstant} (value?="true" |
 * 
 * 	"false");
 *
 **/

// //    value = BOOL;
//  {booleans::BooleanConstant} (value?="true" | "false")
protected class BooleanConstant_Group extends GroupToken {
	
	public BooleanConstant_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBooleanConstantAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanConstant_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanConstantAccess().getBooleanConstantAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// //    value = BOOL;
//  {booleans::BooleanConstant}
protected class BooleanConstant_BooleanConstantAction_0 extends ActionToken  {

	public BooleanConstant_BooleanConstantAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getBooleanConstantAccess().getBooleanConstantAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// value?="true" | "false"
protected class BooleanConstant_Alternatives_1 extends AlternativesToken {

	public BooleanConstant_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getBooleanConstantAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanConstant_ValueAssignment_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new BooleanConstant_FalseKeyword_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// value?="true"
protected class BooleanConstant_ValueAssignment_1_0 extends AssignmentToken  {
	
	public BooleanConstant_ValueAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBooleanConstantAccess().getValueAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanConstant_BooleanConstantAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getBooleanConstantAccess().getValueTrueKeyword_1_0_0();
			return obj;
		}
		return null;
	}

}

// "false"
protected class BooleanConstant_FalseKeyword_1_1 extends KeywordToken  {
	
	public BooleanConstant_FalseKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBooleanConstantAccess().getFalseKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanConstant_BooleanConstantAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule BooleanConstant ****************/


/************ begin Rule Number ****************
 *
 * // terminal BOOL returns ecore::EBoolean :
 *  //    'true' | 'false';      
 * 
 * 
 * / * -------------------------------------------------------------
 *  * Concrete syntax for package integer
 *  * ------------------------------------------------------------- * /
 * 
 * Number returns integers::Number:
 * 
 * 	"INT" {integers::Integer} | "NAT" {integers::Natural} | "POS" {integers::Positive};
 *
 **/

// "INT" {integers::Integer} | "NAT" {integers::Natural} | "POS" {integers::Positive}
protected class Number_Alternatives extends AlternativesToken {

	public Number_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getNumberAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Number_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Number_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Number_Group_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNumberAccess().getIntegerAction_0_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberAccess().getNaturalAction_1_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNumberAccess().getPositiveAction_2_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "INT" {integers::Integer}
protected class Number_Group_0 extends GroupToken {
	
	public Number_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNumberAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Number_IntegerAction_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNumberAccess().getIntegerAction_0_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "INT"
protected class Number_INTKeyword_0_0 extends KeywordToken  {
	
	public Number_INTKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNumberAccess().getINTKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// {integers::Integer}
protected class Number_IntegerAction_0_1 extends ActionToken  {

	public Number_IntegerAction_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getNumberAccess().getIntegerAction_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Number_INTKeyword_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}


// "NAT" {integers::Natural}
protected class Number_Group_1 extends GroupToken {
	
	public Number_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNumberAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Number_NaturalAction_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNumberAccess().getNaturalAction_1_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "NAT"
protected class Number_NATKeyword_1_0 extends KeywordToken  {
	
	public Number_NATKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNumberAccess().getNATKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// {integers::Natural}
protected class Number_NaturalAction_1_1 extends ActionToken  {

	public Number_NaturalAction_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getNumberAccess().getNaturalAction_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Number_NATKeyword_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}


// "POS" {integers::Positive}
protected class Number_Group_2 extends GroupToken {
	
	public Number_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNumberAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Number_PositiveAction_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNumberAccess().getPositiveAction_2_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "POS"
protected class Number_POSKeyword_2_0 extends KeywordToken  {
	
	public Number_POSKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNumberAccess().getPOSKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// {integers::Positive}
protected class Number_PositiveAction_2_1 extends ActionToken  {

	public Number_PositiveAction_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getNumberAccess().getPositiveAction_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Number_POSKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}



/************ end Rule Number ****************/


/************ begin Rule NumberConstant ****************
 *
 * NumberConstant returns integers::NumberConstant:
 * 
 * 	{integers::NumberConstant} value=INTEGER (":" type=Number)?;
 *
 **/

// {integers::NumberConstant} value=INTEGER (":" type=Number)?
protected class NumberConstant_Group extends GroupToken {
	
	public NumberConstant_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNumberConstantAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NumberConstant_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NumberConstant_ValueAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNumberConstantAccess().getNumberConstantAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {integers::NumberConstant}
protected class NumberConstant_NumberConstantAction_0 extends ActionToken  {

	public NumberConstant_NumberConstantAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getNumberConstantAccess().getNumberConstantAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// value=INTEGER
protected class NumberConstant_ValueAssignment_1 extends AssignmentToken  {
	
	public NumberConstant_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNumberConstantAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NumberConstant_NumberConstantAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNumberConstantAccess().getValueINTEGERParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getNumberConstantAccess().getValueINTEGERParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// (":" type=Number)?
protected class NumberConstant_Group_2 extends GroupToken {
	
	public NumberConstant_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNumberConstantAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NumberConstant_TypeAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ":"
protected class NumberConstant_ColonKeyword_2_0 extends KeywordToken  {
	
	public NumberConstant_ColonKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNumberConstantAccess().getColonKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NumberConstant_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// type=Number
protected class NumberConstant_TypeAssignment_2_1 extends AssignmentToken  {
	
	public NumberConstant_TypeAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNumberConstantAccess().getTypeAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Number_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNumberRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNumberConstantAccess().getTypeNumberParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NumberConstant_ColonKeyword_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule NumberConstant ****************/




/************ begin Rule FiniteEnumeration ****************
 *
 * / * -------------------------------------------------------------
 *  * Concrete syntax for package finite enumerations
 *  * ------------------------------------------------------------- * /
 * 
 * FiniteEnumeration returns finiteenums::FiniteEnumeration:
 * 
 * 	"enum" "{" elements+=FEConstant ("," elements+=FEConstant)* "}";
 *
 **/

// "enum" "{" elements+=FEConstant ("," elements+=FEConstant)* "}"
protected class FiniteEnumeration_Group extends GroupToken {
	
	public FiniteEnumeration_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFiniteEnumerationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FiniteEnumeration_RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFiniteEnumerationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "enum"
protected class FiniteEnumeration_EnumKeyword_0 extends KeywordToken  {
	
	public FiniteEnumeration_EnumKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFiniteEnumerationAccess().getEnumKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "{"
protected class FiniteEnumeration_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public FiniteEnumeration_LeftCurlyBracketKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFiniteEnumerationAccess().getLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FiniteEnumeration_EnumKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// elements+=FEConstant
protected class FiniteEnumeration_ElementsAssignment_2 extends AssignmentToken  {
	
	public FiniteEnumeration_ElementsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFiniteEnumerationAccess().getElementsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FEConstant_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elements",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFEConstantRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFiniteEnumerationAccess().getElementsFEConstantParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FiniteEnumeration_LeftCurlyBracketKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," elements+=FEConstant)*
protected class FiniteEnumeration_Group_3 extends GroupToken {
	
	public FiniteEnumeration_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFiniteEnumerationAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FiniteEnumeration_ElementsAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class FiniteEnumeration_CommaKeyword_3_0 extends KeywordToken  {
	
	public FiniteEnumeration_CommaKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFiniteEnumerationAccess().getCommaKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FiniteEnumeration_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FiniteEnumeration_ElementsAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// elements+=FEConstant
protected class FiniteEnumeration_ElementsAssignment_3_1 extends AssignmentToken  {
	
	public FiniteEnumeration_ElementsAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFiniteEnumerationAccess().getElementsAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FEConstant_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elements",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFEConstantRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFiniteEnumerationAccess().getElementsFEConstantParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FiniteEnumeration_CommaKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class FiniteEnumeration_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public FiniteEnumeration_RightCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFiniteEnumerationAccess().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FiniteEnumeration_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FiniteEnumeration_ElementsAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule FiniteEnumeration ****************/


/************ begin Rule FEConstant ****************
 *
 * FEConstant returns finiteenums::FEConstant:
 * 
 * 	name=ID;
 *
 **/

// name=ID
protected class FEConstant_NameAssignment extends AssignmentToken  {
	
	public FEConstant_NameAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFEConstantAccess().getNameAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFEConstantRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFEConstantAccess().getNameIDTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFEConstantAccess().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule FEConstant ****************/


/************ begin Rule CyclicEnumeration ****************
 *
 * / * -------------------------------------------------------------
 *  * Concrete syntax for package cyclic enumerations
 *  * ------------------------------------------------------------- * /
 * 
 * CyclicEnumeration returns cyclicenums::CyclicEnumeration:
 * 
 * 	"cyclic" "{" elements+=FEConstant ("," elements+=FEConstant)* "}";
 *
 **/

// "cyclic" "{" elements+=FEConstant ("," elements+=FEConstant)* "}"
protected class CyclicEnumeration_Group extends GroupToken {
	
	public CyclicEnumeration_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCyclicEnumerationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CyclicEnumeration_RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCyclicEnumerationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "cyclic"
protected class CyclicEnumeration_CyclicKeyword_0 extends KeywordToken  {
	
	public CyclicEnumeration_CyclicKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCyclicEnumerationAccess().getCyclicKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "{"
protected class CyclicEnumeration_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public CyclicEnumeration_LeftCurlyBracketKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCyclicEnumerationAccess().getLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CyclicEnumeration_CyclicKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// elements+=FEConstant
protected class CyclicEnumeration_ElementsAssignment_2 extends AssignmentToken  {
	
	public CyclicEnumeration_ElementsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCyclicEnumerationAccess().getElementsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FEConstant_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elements",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFEConstantRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCyclicEnumerationAccess().getElementsFEConstantParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CyclicEnumeration_LeftCurlyBracketKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," elements+=FEConstant)*
protected class CyclicEnumeration_Group_3 extends GroupToken {
	
	public CyclicEnumeration_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCyclicEnumerationAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CyclicEnumeration_ElementsAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class CyclicEnumeration_CommaKeyword_3_0 extends KeywordToken  {
	
	public CyclicEnumeration_CommaKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCyclicEnumerationAccess().getCommaKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CyclicEnumeration_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CyclicEnumeration_ElementsAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// elements+=FEConstant
protected class CyclicEnumeration_ElementsAssignment_3_1 extends AssignmentToken  {
	
	public CyclicEnumeration_ElementsAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCyclicEnumerationAccess().getElementsAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FEConstant_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elements",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFEConstantRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCyclicEnumerationAccess().getElementsFEConstantParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CyclicEnumeration_CommaKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class CyclicEnumeration_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public CyclicEnumeration_RightCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCyclicEnumerationAccess().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CyclicEnumeration_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CyclicEnumeration_ElementsAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule CyclicEnumeration ****************/


/************ begin Rule CyclicEnumsBuiltInOperator ****************
 *
 * CyclicEnumsBuiltInOperator returns terms::Term:
 * 
 * 	"succ" "(" {cyclicenums::Successor} subterm+=Term ")" | "pred" "(" {cyclicenums::Predecessor} subterm+=Term ")";
 *
 **/

// "succ" "(" {cyclicenums::Successor} subterm+=Term ")" | "pred" "(" {cyclicenums::Predecessor} subterm+=Term ")"
protected class CyclicEnumsBuiltInOperator_Alternatives extends AlternativesToken {

	public CyclicEnumsBuiltInOperator_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CyclicEnumsBuiltInOperator_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CyclicEnumsBuiltInOperator_Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getPredecessorAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getSuccessorAction_0_2().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "succ" "(" {cyclicenums::Successor} subterm+=Term ")"
protected class CyclicEnumsBuiltInOperator_Group_0 extends GroupToken {
	
	public CyclicEnumsBuiltInOperator_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CyclicEnumsBuiltInOperator_RightParenthesisKeyword_0_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getSuccessorAction_0_2().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "succ"
protected class CyclicEnumsBuiltInOperator_SuccKeyword_0_0 extends KeywordToken  {
	
	public CyclicEnumsBuiltInOperator_SuccKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getSuccKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class CyclicEnumsBuiltInOperator_LeftParenthesisKeyword_0_1 extends KeywordToken  {
	
	public CyclicEnumsBuiltInOperator_LeftParenthesisKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getLeftParenthesisKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CyclicEnumsBuiltInOperator_SuccKeyword_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// {cyclicenums::Successor}
protected class CyclicEnumsBuiltInOperator_SuccessorAction_0_2 extends ActionToken  {

	public CyclicEnumsBuiltInOperator_SuccessorAction_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getSuccessorAction_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CyclicEnumsBuiltInOperator_LeftParenthesisKeyword_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// subterm+=Term
protected class CyclicEnumsBuiltInOperator_SubtermAssignment_0_3 extends AssignmentToken  {
	
	public CyclicEnumsBuiltInOperator_SubtermAssignment_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getSubtermAssignment_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getSubtermTermParserRuleCall_0_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CyclicEnumsBuiltInOperator_SuccessorAction_0_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class CyclicEnumsBuiltInOperator_RightParenthesisKeyword_0_4 extends KeywordToken  {
	
	public CyclicEnumsBuiltInOperator_RightParenthesisKeyword_0_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getRightParenthesisKeyword_0_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CyclicEnumsBuiltInOperator_SubtermAssignment_0_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// "pred" "(" {cyclicenums::Predecessor} subterm+=Term ")"
protected class CyclicEnumsBuiltInOperator_Group_1 extends GroupToken {
	
	public CyclicEnumsBuiltInOperator_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CyclicEnumsBuiltInOperator_RightParenthesisKeyword_1_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getPredecessorAction_1_2().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "pred"
protected class CyclicEnumsBuiltInOperator_PredKeyword_1_0 extends KeywordToken  {
	
	public CyclicEnumsBuiltInOperator_PredKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getPredKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class CyclicEnumsBuiltInOperator_LeftParenthesisKeyword_1_1 extends KeywordToken  {
	
	public CyclicEnumsBuiltInOperator_LeftParenthesisKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getLeftParenthesisKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CyclicEnumsBuiltInOperator_PredKeyword_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// {cyclicenums::Predecessor}
protected class CyclicEnumsBuiltInOperator_PredecessorAction_1_2 extends ActionToken  {

	public CyclicEnumsBuiltInOperator_PredecessorAction_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getPredecessorAction_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CyclicEnumsBuiltInOperator_LeftParenthesisKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// subterm+=Term
protected class CyclicEnumsBuiltInOperator_SubtermAssignment_1_3 extends AssignmentToken  {
	
	public CyclicEnumsBuiltInOperator_SubtermAssignment_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getSubtermAssignment_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getSubtermTermParserRuleCall_1_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CyclicEnumsBuiltInOperator_PredecessorAction_1_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class CyclicEnumsBuiltInOperator_RightParenthesisKeyword_1_4 extends KeywordToken  {
	
	public CyclicEnumsBuiltInOperator_RightParenthesisKeyword_1_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCyclicEnumsBuiltInOperatorAccess().getRightParenthesisKeyword_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CyclicEnumsBuiltInOperator_SubtermAssignment_1_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule CyclicEnumsBuiltInOperator ****************/


/************ begin Rule FiniteIntRange ****************
 *
 * / * -------------------------------------------------------------
 *  * Concrete syntax for package finite int ranges
 *  * ------------------------------------------------------------- * /
 * 
 * FiniteIntRange returns finiteintranges::FiniteIntRange:
 * 
 * 	"[" start=INTEGER ".." end=INTEGER "]";
 *
 **/

// "[" start=INTEGER ".." end=INTEGER "]"
protected class FiniteIntRange_Group extends GroupToken {
	
	public FiniteIntRange_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFiniteIntRangeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FiniteIntRange_RightSquareBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFiniteIntRangeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "["
protected class FiniteIntRange_LeftSquareBracketKeyword_0 extends KeywordToken  {
	
	public FiniteIntRange_LeftSquareBracketKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFiniteIntRangeAccess().getLeftSquareBracketKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// start=INTEGER
protected class FiniteIntRange_StartAssignment_1 extends AssignmentToken  {
	
	public FiniteIntRange_StartAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFiniteIntRangeAccess().getStartAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FiniteIntRange_LeftSquareBracketKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("start",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("start");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFiniteIntRangeAccess().getStartINTEGERParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getFiniteIntRangeAccess().getStartINTEGERParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ".."
protected class FiniteIntRange_FullStopFullStopKeyword_2 extends KeywordToken  {
	
	public FiniteIntRange_FullStopFullStopKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFiniteIntRangeAccess().getFullStopFullStopKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FiniteIntRange_StartAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// end=INTEGER
protected class FiniteIntRange_EndAssignment_3 extends AssignmentToken  {
	
	public FiniteIntRange_EndAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFiniteIntRangeAccess().getEndAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FiniteIntRange_FullStopFullStopKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("end",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("end");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFiniteIntRangeAccess().getEndINTEGERParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getFiniteIntRangeAccess().getEndINTEGERParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// "]"
protected class FiniteIntRange_RightSquareBracketKeyword_4 extends KeywordToken  {
	
	public FiniteIntRange_RightSquareBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFiniteIntRangeAccess().getRightSquareBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FiniteIntRange_EndAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule FiniteIntRange ****************/


/************ begin Rule FiniteIntRangeConstant ****************
 *
 * FiniteIntRangeConstant returns finiteintranges::FiniteIntConstant:
 * 
 * 	value=INTEGER range=FiniteIntRange;
 *
 **/

// value=INTEGER range=FiniteIntRange
protected class FiniteIntRangeConstant_Group extends GroupToken {
	
	public FiniteIntRangeConstant_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFiniteIntRangeConstantAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FiniteIntRangeConstant_RangeAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFiniteIntRangeConstantRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// value=INTEGER
protected class FiniteIntRangeConstant_ValueAssignment_0 extends AssignmentToken  {
	
	public FiniteIntRangeConstant_ValueAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFiniteIntRangeConstantAccess().getValueAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFiniteIntRangeConstantAccess().getValueINTEGERParserRuleCall_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getFiniteIntRangeConstantAccess().getValueINTEGERParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// range=FiniteIntRange
protected class FiniteIntRangeConstant_RangeAssignment_1 extends AssignmentToken  {
	
	public FiniteIntRangeConstant_RangeAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFiniteIntRangeConstantAccess().getRangeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FiniteIntRange_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("range",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("range");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFiniteIntRangeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFiniteIntRangeConstantAccess().getRangeFiniteIntRangeParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FiniteIntRangeConstant_ValueAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule FiniteIntRangeConstant ****************/


/************ begin Rule Partition ****************
 *
 * / * -------------------------------------------------------------
 *  * Concrete syntax for package partitions
 *  * ------------------------------------------------------------- * /
 * 
 * Partition returns partitions::Partition:
 * 
 * 	"partition" def=Sort "in" name=ID "{" partitionElements+=PartitionElement (";" partitionElements+=PartitionElement)*
 * 
 * 	"}";
 *
 **/

// "partition" def=Sort "in" name=ID "{" partitionElements+=PartitionElement (";" partitionElements+=PartitionElement)* "}"
protected class Partition_Group extends GroupToken {
	
	public Partition_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPartitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Partition_RightCurlyBracketKeyword_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPartitionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "partition"
protected class Partition_PartitionKeyword_0 extends KeywordToken  {
	
	public Partition_PartitionKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPartitionAccess().getPartitionKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// def=Sort
protected class Partition_DefAssignment_1 extends AssignmentToken  {
	
	public Partition_DefAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPartitionAccess().getDefAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sort_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("def",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("def");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPartitionAccess().getDefSortParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Partition_PartitionKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "in"
protected class Partition_InKeyword_2 extends KeywordToken  {
	
	public Partition_InKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPartitionAccess().getInKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Partition_DefAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=ID
protected class Partition_NameAssignment_3 extends AssignmentToken  {
	
	public Partition_NameAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPartitionAccess().getNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Partition_InKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPartitionAccess().getNameIDTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPartitionAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class Partition_LeftCurlyBracketKeyword_4 extends KeywordToken  {
	
	public Partition_LeftCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPartitionAccess().getLeftCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Partition_NameAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// partitionElements+=PartitionElement
protected class Partition_PartitionElementsAssignment_5 extends AssignmentToken  {
	
	public Partition_PartitionElementsAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPartitionAccess().getPartitionElementsAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PartitionElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("partitionElements",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("partitionElements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPartitionElementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPartitionAccess().getPartitionElementsPartitionElementParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Partition_LeftCurlyBracketKeyword_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (";" partitionElements+=PartitionElement)*
protected class Partition_Group_6 extends GroupToken {
	
	public Partition_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPartitionAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Partition_PartitionElementsAssignment_6_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ";"
protected class Partition_SemicolonKeyword_6_0 extends KeywordToken  {
	
	public Partition_SemicolonKeyword_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPartitionAccess().getSemicolonKeyword_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Partition_Group_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Partition_PartitionElementsAssignment_5(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// partitionElements+=PartitionElement
protected class Partition_PartitionElementsAssignment_6_1 extends AssignmentToken  {
	
	public Partition_PartitionElementsAssignment_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPartitionAccess().getPartitionElementsAssignment_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PartitionElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("partitionElements",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("partitionElements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPartitionElementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPartitionAccess().getPartitionElementsPartitionElementParserRuleCall_6_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Partition_SemicolonKeyword_6_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class Partition_RightCurlyBracketKeyword_7 extends KeywordToken  {
	
	public Partition_RightCurlyBracketKeyword_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPartitionAccess().getRightCurlyBracketKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Partition_Group_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Partition_PartitionElementsAssignment_5(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule Partition ****************/


/************ begin Rule PartitionElement ****************
 *
 * PartitionElement returns partitions::PartitionElement:
 * 
 * 	name=ID ":" partitionelementconstant+=Term ("," partitionelementconstant+=Term)*;
 *
 **/

// name=ID ":" partitionelementconstant+=Term ("," partitionelementconstant+=Term)*
protected class PartitionElement_Group extends GroupToken {
	
	public PartitionElement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPartitionElementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PartitionElement_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PartitionElement_PartitionelementconstantAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPartitionElementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class PartitionElement_NameAssignment_0 extends AssignmentToken  {
	
	public PartitionElement_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPartitionElementAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPartitionElementAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPartitionElementAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class PartitionElement_ColonKeyword_1 extends KeywordToken  {
	
	public PartitionElement_ColonKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPartitionElementAccess().getColonKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PartitionElement_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// partitionelementconstant+=Term
protected class PartitionElement_PartitionelementconstantAssignment_2 extends AssignmentToken  {
	
	public PartitionElement_PartitionelementconstantAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPartitionElementAccess().getPartitionelementconstantAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("partitionelementconstant",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("partitionelementconstant");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPartitionElementAccess().getPartitionelementconstantTermParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PartitionElement_ColonKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," partitionelementconstant+=Term)*
protected class PartitionElement_Group_3 extends GroupToken {
	
	public PartitionElement_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPartitionElementAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PartitionElement_PartitionelementconstantAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class PartitionElement_CommaKeyword_3_0 extends KeywordToken  {
	
	public PartitionElement_CommaKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPartitionElementAccess().getCommaKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PartitionElement_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PartitionElement_PartitionelementconstantAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// partitionelementconstant+=Term
protected class PartitionElement_PartitionelementconstantAssignment_3_1 extends AssignmentToken  {
	
	public PartitionElement_PartitionelementconstantAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPartitionElementAccess().getPartitionelementconstantAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("partitionelementconstant",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("partitionelementconstant");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPartitionElementAccess().getPartitionelementconstantTermParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PartitionElement_CommaKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule PartitionElement ****************/


/************ begin Rule PartitionsBuiltInOperator ****************
 *
 * PartitionsBuiltInOperator returns terms::Term:
 * 
 * 	"partition" ":" {partitions::PartitionElementOf} name=ID "(" subterm+=Term ")";
 *
 **/

// "partition" ":" {partitions::PartitionElementOf} name=ID "(" subterm+=Term ")"
protected class PartitionsBuiltInOperator_Group extends GroupToken {
	
	public PartitionsBuiltInOperator_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPartitionsBuiltInOperatorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PartitionsBuiltInOperator_RightParenthesisKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPartitionsBuiltInOperatorAccess().getPartitionElementOfAction_2().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "partition"
protected class PartitionsBuiltInOperator_PartitionKeyword_0 extends KeywordToken  {
	
	public PartitionsBuiltInOperator_PartitionKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPartitionsBuiltInOperatorAccess().getPartitionKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// ":"
protected class PartitionsBuiltInOperator_ColonKeyword_1 extends KeywordToken  {
	
	public PartitionsBuiltInOperator_ColonKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPartitionsBuiltInOperatorAccess().getColonKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PartitionsBuiltInOperator_PartitionKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// {partitions::PartitionElementOf}
protected class PartitionsBuiltInOperator_PartitionElementOfAction_2 extends ActionToken  {

	public PartitionsBuiltInOperator_PartitionElementOfAction_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getPartitionsBuiltInOperatorAccess().getPartitionElementOfAction_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PartitionsBuiltInOperator_ColonKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// name=ID
protected class PartitionsBuiltInOperator_NameAssignment_3 extends AssignmentToken  {
	
	public PartitionsBuiltInOperator_NameAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPartitionsBuiltInOperatorAccess().getNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PartitionsBuiltInOperator_PartitionElementOfAction_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPartitionsBuiltInOperatorAccess().getNameIDTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPartitionsBuiltInOperatorAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class PartitionsBuiltInOperator_LeftParenthesisKeyword_4 extends KeywordToken  {
	
	public PartitionsBuiltInOperator_LeftParenthesisKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPartitionsBuiltInOperatorAccess().getLeftParenthesisKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PartitionsBuiltInOperator_NameAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term
protected class PartitionsBuiltInOperator_SubtermAssignment_5 extends AssignmentToken  {
	
	public PartitionsBuiltInOperator_SubtermAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPartitionsBuiltInOperatorAccess().getSubtermAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPartitionsBuiltInOperatorAccess().getSubtermTermParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PartitionsBuiltInOperator_LeftParenthesisKeyword_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class PartitionsBuiltInOperator_RightParenthesisKeyword_6 extends KeywordToken  {
	
	public PartitionsBuiltInOperator_RightParenthesisKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPartitionsBuiltInOperatorAccess().getRightParenthesisKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PartitionsBuiltInOperator_SubtermAssignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule PartitionsBuiltInOperator ****************/


/************ begin Rule StringSort ****************
 *
 * / * -------------------------------------------------------------
 *  * Concrete syntax for package strings
 *  * ------------------------------------------------------------- * /
 * 
 * StringSort returns strings::String:
 * 
 * 	"STRING" {strings::String};
 *
 **/

// "STRING" {strings::String}
protected class StringSort_Group extends GroupToken {
	
	public StringSort_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStringSortAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringSort_StringAction_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringSortAccess().getStringAction_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "STRING"
protected class StringSort_STRINGKeyword_0 extends KeywordToken  {
	
	public StringSort_STRINGKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStringSortAccess().getSTRINGKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// {strings::String}
protected class StringSort_StringAction_1 extends ActionToken  {

	public StringSort_StringAction_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getStringSortAccess().getStringAction_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringSort_STRINGKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}


/************ end Rule StringSort ****************/


/************ begin Rule StringsBuiltInOperator ****************
 *
 * StringsBuiltInOperator returns strings::StringOperator:
 * 
 * 	"concatstring" "(" {strings::Concatenation} subterm+=Term "," subterm+=Term ")"
 * 
 * 	// note that we do not have append (does not make sense)
 *  | "stringlength" "(" {strings::Length} subterm+=Term ")" |
 * 
 * 	"substring" {strings::Substring} ":" start=NAT "," length=NAT "(" subterm+=Term ")";
 *
 **/

// "concatstring" "(" {strings::Concatenation} subterm+=Term "," subterm+=Term ")"
// 
// // note that we do not have append (does not make sense)
//  | "stringlength" "(" {strings::Length} subterm+=Term ")" |
// 
// "substring" {strings::Substring} ":" start=NAT "," length=NAT "(" subterm+=Term ")"
protected class StringsBuiltInOperator_Alternatives extends AlternativesToken {

	public StringsBuiltInOperator_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getStringsBuiltInOperatorAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringsBuiltInOperator_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StringsBuiltInOperator_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new StringsBuiltInOperator_Group_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getLengthAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getSubstringAction_2_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "concatstring" "(" {strings::Concatenation} subterm+=Term "," subterm+=Term ")"
protected class StringsBuiltInOperator_Group_0 extends GroupToken {
	
	public StringsBuiltInOperator_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStringsBuiltInOperatorAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringsBuiltInOperator_RightParenthesisKeyword_0_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "concatstring"
protected class StringsBuiltInOperator_ConcatstringKeyword_0_0 extends KeywordToken  {
	
	public StringsBuiltInOperator_ConcatstringKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStringsBuiltInOperatorAccess().getConcatstringKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class StringsBuiltInOperator_LeftParenthesisKeyword_0_1 extends KeywordToken  {
	
	public StringsBuiltInOperator_LeftParenthesisKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStringsBuiltInOperatorAccess().getLeftParenthesisKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringsBuiltInOperator_ConcatstringKeyword_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// {strings::Concatenation}
protected class StringsBuiltInOperator_ConcatenationAction_0_2 extends ActionToken  {

	public StringsBuiltInOperator_ConcatenationAction_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getStringsBuiltInOperatorAccess().getConcatenationAction_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringsBuiltInOperator_LeftParenthesisKeyword_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// subterm+=Term
protected class StringsBuiltInOperator_SubtermAssignment_0_3 extends AssignmentToken  {
	
	public StringsBuiltInOperator_SubtermAssignment_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringsBuiltInOperatorAccess().getSubtermAssignment_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStringsBuiltInOperatorAccess().getSubtermTermParserRuleCall_0_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StringsBuiltInOperator_ConcatenationAction_0_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class StringsBuiltInOperator_CommaKeyword_0_4 extends KeywordToken  {
	
	public StringsBuiltInOperator_CommaKeyword_0_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStringsBuiltInOperatorAccess().getCommaKeyword_0_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringsBuiltInOperator_SubtermAssignment_0_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term
protected class StringsBuiltInOperator_SubtermAssignment_0_5 extends AssignmentToken  {
	
	public StringsBuiltInOperator_SubtermAssignment_0_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringsBuiltInOperatorAccess().getSubtermAssignment_0_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStringsBuiltInOperatorAccess().getSubtermTermParserRuleCall_0_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StringsBuiltInOperator_CommaKeyword_0_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class StringsBuiltInOperator_RightParenthesisKeyword_0_6 extends KeywordToken  {
	
	public StringsBuiltInOperator_RightParenthesisKeyword_0_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStringsBuiltInOperatorAccess().getRightParenthesisKeyword_0_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringsBuiltInOperator_SubtermAssignment_0_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// "stringlength" "(" {strings::Length} subterm+=Term ")"
protected class StringsBuiltInOperator_Group_1 extends GroupToken {
	
	public StringsBuiltInOperator_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStringsBuiltInOperatorAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringsBuiltInOperator_RightParenthesisKeyword_1_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getLengthAction_1_2().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "stringlength"
protected class StringsBuiltInOperator_StringlengthKeyword_1_0 extends KeywordToken  {
	
	public StringsBuiltInOperator_StringlengthKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStringsBuiltInOperatorAccess().getStringlengthKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class StringsBuiltInOperator_LeftParenthesisKeyword_1_1 extends KeywordToken  {
	
	public StringsBuiltInOperator_LeftParenthesisKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStringsBuiltInOperatorAccess().getLeftParenthesisKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringsBuiltInOperator_StringlengthKeyword_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// {strings::Length}
protected class StringsBuiltInOperator_LengthAction_1_2 extends ActionToken  {

	public StringsBuiltInOperator_LengthAction_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getStringsBuiltInOperatorAccess().getLengthAction_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringsBuiltInOperator_LeftParenthesisKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// subterm+=Term
protected class StringsBuiltInOperator_SubtermAssignment_1_3 extends AssignmentToken  {
	
	public StringsBuiltInOperator_SubtermAssignment_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringsBuiltInOperatorAccess().getSubtermAssignment_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStringsBuiltInOperatorAccess().getSubtermTermParserRuleCall_1_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StringsBuiltInOperator_LengthAction_1_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class StringsBuiltInOperator_RightParenthesisKeyword_1_4 extends KeywordToken  {
	
	public StringsBuiltInOperator_RightParenthesisKeyword_1_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStringsBuiltInOperatorAccess().getRightParenthesisKeyword_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringsBuiltInOperator_SubtermAssignment_1_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// "substring" {strings::Substring} ":" start=NAT "," length=NAT "(" subterm+=Term ")"
protected class StringsBuiltInOperator_Group_2 extends GroupToken {
	
	public StringsBuiltInOperator_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStringsBuiltInOperatorAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringsBuiltInOperator_RightParenthesisKeyword_2_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringsBuiltInOperatorAccess().getSubstringAction_2_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "substring"
protected class StringsBuiltInOperator_SubstringKeyword_2_0 extends KeywordToken  {
	
	public StringsBuiltInOperator_SubstringKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStringsBuiltInOperatorAccess().getSubstringKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// {strings::Substring}
protected class StringsBuiltInOperator_SubstringAction_2_1 extends ActionToken  {

	public StringsBuiltInOperator_SubstringAction_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getStringsBuiltInOperatorAccess().getSubstringAction_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringsBuiltInOperator_SubstringKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// ":"
protected class StringsBuiltInOperator_ColonKeyword_2_2 extends KeywordToken  {
	
	public StringsBuiltInOperator_ColonKeyword_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStringsBuiltInOperatorAccess().getColonKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringsBuiltInOperator_SubstringAction_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// start=NAT
protected class StringsBuiltInOperator_StartAssignment_2_3 extends AssignmentToken  {
	
	public StringsBuiltInOperator_StartAssignment_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringsBuiltInOperatorAccess().getStartAssignment_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringsBuiltInOperator_ColonKeyword_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("start",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("start");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStringsBuiltInOperatorAccess().getStartNATParserRuleCall_2_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getStringsBuiltInOperatorAccess().getStartNATParserRuleCall_2_3_0();
			return obj;
		}
		return null;
	}

}

// ","
protected class StringsBuiltInOperator_CommaKeyword_2_4 extends KeywordToken  {
	
	public StringsBuiltInOperator_CommaKeyword_2_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStringsBuiltInOperatorAccess().getCommaKeyword_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringsBuiltInOperator_StartAssignment_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// length=NAT
protected class StringsBuiltInOperator_LengthAssignment_2_5 extends AssignmentToken  {
	
	public StringsBuiltInOperator_LengthAssignment_2_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringsBuiltInOperatorAccess().getLengthAssignment_2_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringsBuiltInOperator_CommaKeyword_2_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("length",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("length");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStringsBuiltInOperatorAccess().getLengthNATParserRuleCall_2_5_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getStringsBuiltInOperatorAccess().getLengthNATParserRuleCall_2_5_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class StringsBuiltInOperator_LeftParenthesisKeyword_2_6 extends KeywordToken  {
	
	public StringsBuiltInOperator_LeftParenthesisKeyword_2_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStringsBuiltInOperatorAccess().getLeftParenthesisKeyword_2_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringsBuiltInOperator_LengthAssignment_2_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term
protected class StringsBuiltInOperator_SubtermAssignment_2_7 extends AssignmentToken  {
	
	public StringsBuiltInOperator_SubtermAssignment_2_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringsBuiltInOperatorAccess().getSubtermAssignment_2_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStringsBuiltInOperatorAccess().getSubtermTermParserRuleCall_2_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StringsBuiltInOperator_LeftParenthesisKeyword_2_6(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class StringsBuiltInOperator_RightParenthesisKeyword_2_8 extends KeywordToken  {
	
	public StringsBuiltInOperator_RightParenthesisKeyword_2_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStringsBuiltInOperatorAccess().getRightParenthesisKeyword_2_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringsBuiltInOperator_SubtermAssignment_2_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule StringsBuiltInOperator ****************/


/************ begin Rule StringConstant ****************
 *
 * StringConstant returns strings::StringConstant:
 * 
 * 	value=STRING;
 *
 **/

// value=STRING
protected class StringConstant_ValueAssignment extends AssignmentToken  {
	
	public StringConstant_ValueAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringConstantAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringConstantRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStringConstantAccess().getValueSTRINGTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getStringConstantAccess().getValueSTRINGTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule StringConstant ****************/


/************ begin Rule ListSort ****************
 *
 * / * -------------------------------------------------------------
 *  * Concrete syntax for package lists
 *  * ------------------------------------------------------------- * /
 * 
 * ListSort returns lists::List:
 * 
 * 	"LIST" ":" basis=Sort;
 *
 **/

// "LIST" ":" basis=Sort
protected class ListSort_Group extends GroupToken {
	
	public ListSort_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getListSortAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListSort_BasisAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getListSortRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "LIST"
protected class ListSort_LISTKeyword_0 extends KeywordToken  {
	
	public ListSort_LISTKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListSortAccess().getLISTKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// ":"
protected class ListSort_ColonKeyword_1 extends KeywordToken  {
	
	public ListSort_ColonKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListSortAccess().getColonKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListSort_LISTKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// basis=Sort
protected class ListSort_BasisAssignment_2 extends AssignmentToken  {
	
	public ListSort_BasisAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getListSortAccess().getBasisAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sort_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("basis",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("basis");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getListSortAccess().getBasisSortParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ListSort_ColonKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ListSort ****************/


/************ begin Rule ListsBuiltInOperator ****************
 *
 * ListsBuiltInOperator returns lists::ListOperator:
 * 
 * 	"concatlists" "(" {lists::Concatenation} subterm+=Term "," subterm+=Term ")" | "appendtolist" "(" {lists::Append}
 * 
 * 	subterm+=Term "," subterm+=Term ")" | "listlength" "(" {lists::Length} subterm+=Term ")" | "sublist" ":"
 * 
 * 	{lists::Sublist} start=NAT "," length=NAT "(" subterm+=Term ")" | "memberat" ":" {lists::MemberAtIndex} index=NAT "("
 * 
 * 	subterm+=Term ")" | "makelist" ":" {lists::MakeList} refsort=Sort "(" (subterm+=Term ("," subterm+=Term)*)? ")";
 *
 **/

// "concatlists" "(" {lists::Concatenation} subterm+=Term "," subterm+=Term ")" | "appendtolist" "(" {lists::Append}
// 
// subterm+=Term "," subterm+=Term ")" | "listlength" "(" {lists::Length} subterm+=Term ")" | "sublist" ":"
// 
// {lists::Sublist} start=NAT "," length=NAT "(" subterm+=Term ")" | "memberat" ":" {lists::MemberAtIndex} index=NAT "("
// 
// subterm+=Term ")" | "makelist" ":" {lists::MakeList} refsort=Sort "(" (subterm+=Term ("," subterm+=Term)*)? ")"
protected class ListsBuiltInOperator_Alternatives extends AlternativesToken {

	public ListsBuiltInOperator_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ListsBuiltInOperator_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ListsBuiltInOperator_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ListsBuiltInOperator_Group_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new ListsBuiltInOperator_Group_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new ListsBuiltInOperator_Group_5(lastRuleCallOrigin, this, 5, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getAppendAction_1_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getLengthAction_2_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMakeListAction_5_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMemberAtIndexAction_4_2().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getSublistAction_3_2().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "concatlists" "(" {lists::Concatenation} subterm+=Term "," subterm+=Term ")"
protected class ListsBuiltInOperator_Group_0 extends GroupToken {
	
	public ListsBuiltInOperator_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_RightParenthesisKeyword_0_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getConcatenationAction_0_2().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "concatlists"
protected class ListsBuiltInOperator_ConcatlistsKeyword_0_0 extends KeywordToken  {
	
	public ListsBuiltInOperator_ConcatlistsKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getConcatlistsKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class ListsBuiltInOperator_LeftParenthesisKeyword_0_1 extends KeywordToken  {
	
	public ListsBuiltInOperator_LeftParenthesisKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getLeftParenthesisKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_ConcatlistsKeyword_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// {lists::Concatenation}
protected class ListsBuiltInOperator_ConcatenationAction_0_2 extends ActionToken  {

	public ListsBuiltInOperator_ConcatenationAction_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getConcatenationAction_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_LeftParenthesisKeyword_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// subterm+=Term
protected class ListsBuiltInOperator_SubtermAssignment_0_3 extends AssignmentToken  {
	
	public ListsBuiltInOperator_SubtermAssignment_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getSubtermAssignment_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getListsBuiltInOperatorAccess().getSubtermTermParserRuleCall_0_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ListsBuiltInOperator_ConcatenationAction_0_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class ListsBuiltInOperator_CommaKeyword_0_4 extends KeywordToken  {
	
	public ListsBuiltInOperator_CommaKeyword_0_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getCommaKeyword_0_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_SubtermAssignment_0_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term
protected class ListsBuiltInOperator_SubtermAssignment_0_5 extends AssignmentToken  {
	
	public ListsBuiltInOperator_SubtermAssignment_0_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getSubtermAssignment_0_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getListsBuiltInOperatorAccess().getSubtermTermParserRuleCall_0_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ListsBuiltInOperator_CommaKeyword_0_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class ListsBuiltInOperator_RightParenthesisKeyword_0_6 extends KeywordToken  {
	
	public ListsBuiltInOperator_RightParenthesisKeyword_0_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getRightParenthesisKeyword_0_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_SubtermAssignment_0_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// "appendtolist" "(" {lists::Append} subterm+=Term "," subterm+=Term ")"
protected class ListsBuiltInOperator_Group_1 extends GroupToken {
	
	public ListsBuiltInOperator_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_RightParenthesisKeyword_1_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getAppendAction_1_2().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "appendtolist"
protected class ListsBuiltInOperator_AppendtolistKeyword_1_0 extends KeywordToken  {
	
	public ListsBuiltInOperator_AppendtolistKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getAppendtolistKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class ListsBuiltInOperator_LeftParenthesisKeyword_1_1 extends KeywordToken  {
	
	public ListsBuiltInOperator_LeftParenthesisKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getLeftParenthesisKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_AppendtolistKeyword_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// {lists::Append}
protected class ListsBuiltInOperator_AppendAction_1_2 extends ActionToken  {

	public ListsBuiltInOperator_AppendAction_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getAppendAction_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_LeftParenthesisKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// subterm+=Term
protected class ListsBuiltInOperator_SubtermAssignment_1_3 extends AssignmentToken  {
	
	public ListsBuiltInOperator_SubtermAssignment_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getSubtermAssignment_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getListsBuiltInOperatorAccess().getSubtermTermParserRuleCall_1_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ListsBuiltInOperator_AppendAction_1_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class ListsBuiltInOperator_CommaKeyword_1_4 extends KeywordToken  {
	
	public ListsBuiltInOperator_CommaKeyword_1_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getCommaKeyword_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_SubtermAssignment_1_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term
protected class ListsBuiltInOperator_SubtermAssignment_1_5 extends AssignmentToken  {
	
	public ListsBuiltInOperator_SubtermAssignment_1_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getSubtermAssignment_1_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getListsBuiltInOperatorAccess().getSubtermTermParserRuleCall_1_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ListsBuiltInOperator_CommaKeyword_1_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class ListsBuiltInOperator_RightParenthesisKeyword_1_6 extends KeywordToken  {
	
	public ListsBuiltInOperator_RightParenthesisKeyword_1_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getRightParenthesisKeyword_1_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_SubtermAssignment_1_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// "listlength" "(" {lists::Length} subterm+=Term ")"
protected class ListsBuiltInOperator_Group_2 extends GroupToken {
	
	public ListsBuiltInOperator_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_RightParenthesisKeyword_2_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getLengthAction_2_2().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "listlength"
protected class ListsBuiltInOperator_ListlengthKeyword_2_0 extends KeywordToken  {
	
	public ListsBuiltInOperator_ListlengthKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getListlengthKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class ListsBuiltInOperator_LeftParenthesisKeyword_2_1 extends KeywordToken  {
	
	public ListsBuiltInOperator_LeftParenthesisKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getLeftParenthesisKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_ListlengthKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// {lists::Length}
protected class ListsBuiltInOperator_LengthAction_2_2 extends ActionToken  {

	public ListsBuiltInOperator_LengthAction_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getLengthAction_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_LeftParenthesisKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// subterm+=Term
protected class ListsBuiltInOperator_SubtermAssignment_2_3 extends AssignmentToken  {
	
	public ListsBuiltInOperator_SubtermAssignment_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getSubtermAssignment_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getListsBuiltInOperatorAccess().getSubtermTermParserRuleCall_2_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ListsBuiltInOperator_LengthAction_2_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class ListsBuiltInOperator_RightParenthesisKeyword_2_4 extends KeywordToken  {
	
	public ListsBuiltInOperator_RightParenthesisKeyword_2_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getRightParenthesisKeyword_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_SubtermAssignment_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// "sublist" ":" {lists::Sublist} start=NAT "," length=NAT "(" subterm+=Term ")"
protected class ListsBuiltInOperator_Group_3 extends GroupToken {
	
	public ListsBuiltInOperator_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_RightParenthesisKeyword_3_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getSublistAction_3_2().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "sublist"
protected class ListsBuiltInOperator_SublistKeyword_3_0 extends KeywordToken  {
	
	public ListsBuiltInOperator_SublistKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getSublistKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// ":"
protected class ListsBuiltInOperator_ColonKeyword_3_1 extends KeywordToken  {
	
	public ListsBuiltInOperator_ColonKeyword_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getColonKeyword_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_SublistKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// {lists::Sublist}
protected class ListsBuiltInOperator_SublistAction_3_2 extends ActionToken  {

	public ListsBuiltInOperator_SublistAction_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getSublistAction_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_ColonKeyword_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// start=NAT
protected class ListsBuiltInOperator_StartAssignment_3_3 extends AssignmentToken  {
	
	public ListsBuiltInOperator_StartAssignment_3_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getStartAssignment_3_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_SublistAction_3_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("start",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("start");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getListsBuiltInOperatorAccess().getStartNATParserRuleCall_3_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getListsBuiltInOperatorAccess().getStartNATParserRuleCall_3_3_0();
			return obj;
		}
		return null;
	}

}

// ","
protected class ListsBuiltInOperator_CommaKeyword_3_4 extends KeywordToken  {
	
	public ListsBuiltInOperator_CommaKeyword_3_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getCommaKeyword_3_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_StartAssignment_3_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// length=NAT
protected class ListsBuiltInOperator_LengthAssignment_3_5 extends AssignmentToken  {
	
	public ListsBuiltInOperator_LengthAssignment_3_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getLengthAssignment_3_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_CommaKeyword_3_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("length",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("length");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getListsBuiltInOperatorAccess().getLengthNATParserRuleCall_3_5_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getListsBuiltInOperatorAccess().getLengthNATParserRuleCall_3_5_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class ListsBuiltInOperator_LeftParenthesisKeyword_3_6 extends KeywordToken  {
	
	public ListsBuiltInOperator_LeftParenthesisKeyword_3_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getLeftParenthesisKeyword_3_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_LengthAssignment_3_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term
protected class ListsBuiltInOperator_SubtermAssignment_3_7 extends AssignmentToken  {
	
	public ListsBuiltInOperator_SubtermAssignment_3_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getSubtermAssignment_3_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getListsBuiltInOperatorAccess().getSubtermTermParserRuleCall_3_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ListsBuiltInOperator_LeftParenthesisKeyword_3_6(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class ListsBuiltInOperator_RightParenthesisKeyword_3_8 extends KeywordToken  {
	
	public ListsBuiltInOperator_RightParenthesisKeyword_3_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getRightParenthesisKeyword_3_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_SubtermAssignment_3_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// "memberat" ":" {lists::MemberAtIndex} index=NAT "(" subterm+=Term ")"
protected class ListsBuiltInOperator_Group_4 extends GroupToken {
	
	public ListsBuiltInOperator_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_RightParenthesisKeyword_4_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMemberAtIndexAction_4_2().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "memberat"
protected class ListsBuiltInOperator_MemberatKeyword_4_0 extends KeywordToken  {
	
	public ListsBuiltInOperator_MemberatKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getMemberatKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// ":"
protected class ListsBuiltInOperator_ColonKeyword_4_1 extends KeywordToken  {
	
	public ListsBuiltInOperator_ColonKeyword_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getColonKeyword_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_MemberatKeyword_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// {lists::MemberAtIndex}
protected class ListsBuiltInOperator_MemberAtIndexAction_4_2 extends ActionToken  {

	public ListsBuiltInOperator_MemberAtIndexAction_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getMemberAtIndexAction_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_ColonKeyword_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// index=NAT
protected class ListsBuiltInOperator_IndexAssignment_4_3 extends AssignmentToken  {
	
	public ListsBuiltInOperator_IndexAssignment_4_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getIndexAssignment_4_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_MemberAtIndexAction_4_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("index",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("index");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getListsBuiltInOperatorAccess().getIndexNATParserRuleCall_4_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getListsBuiltInOperatorAccess().getIndexNATParserRuleCall_4_3_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class ListsBuiltInOperator_LeftParenthesisKeyword_4_4 extends KeywordToken  {
	
	public ListsBuiltInOperator_LeftParenthesisKeyword_4_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getLeftParenthesisKeyword_4_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_IndexAssignment_4_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subterm+=Term
protected class ListsBuiltInOperator_SubtermAssignment_4_5 extends AssignmentToken  {
	
	public ListsBuiltInOperator_SubtermAssignment_4_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getSubtermAssignment_4_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getListsBuiltInOperatorAccess().getSubtermTermParserRuleCall_4_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ListsBuiltInOperator_LeftParenthesisKeyword_4_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class ListsBuiltInOperator_RightParenthesisKeyword_4_6 extends KeywordToken  {
	
	public ListsBuiltInOperator_RightParenthesisKeyword_4_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getRightParenthesisKeyword_4_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_SubtermAssignment_4_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// "makelist" ":" {lists::MakeList} refsort=Sort "(" (subterm+=Term ("," subterm+=Term)*)? ")"
protected class ListsBuiltInOperator_Group_5 extends GroupToken {
	
	public ListsBuiltInOperator_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_RightParenthesisKeyword_5_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getListsBuiltInOperatorAccess().getMakeListAction_5_2().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "makelist"
protected class ListsBuiltInOperator_MakelistKeyword_5_0 extends KeywordToken  {
	
	public ListsBuiltInOperator_MakelistKeyword_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getMakelistKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// ":"
protected class ListsBuiltInOperator_ColonKeyword_5_1 extends KeywordToken  {
	
	public ListsBuiltInOperator_ColonKeyword_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getColonKeyword_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_MakelistKeyword_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// {lists::MakeList}
protected class ListsBuiltInOperator_MakeListAction_5_2 extends ActionToken  {

	public ListsBuiltInOperator_MakeListAction_5_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getMakeListAction_5_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_ColonKeyword_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// refsort=Sort
protected class ListsBuiltInOperator_RefsortAssignment_5_3 extends AssignmentToken  {
	
	public ListsBuiltInOperator_RefsortAssignment_5_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getRefsortAssignment_5_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sort_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("refsort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("refsort");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getListsBuiltInOperatorAccess().getRefsortSortParserRuleCall_5_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ListsBuiltInOperator_MakeListAction_5_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "("
protected class ListsBuiltInOperator_LeftParenthesisKeyword_5_4 extends KeywordToken  {
	
	public ListsBuiltInOperator_LeftParenthesisKeyword_5_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getLeftParenthesisKeyword_5_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_RefsortAssignment_5_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (subterm+=Term ("," subterm+=Term)*)?
protected class ListsBuiltInOperator_Group_5_5 extends GroupToken {
	
	public ListsBuiltInOperator_Group_5_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getGroup_5_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_Group_5_5_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ListsBuiltInOperator_SubtermAssignment_5_5_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// subterm+=Term
protected class ListsBuiltInOperator_SubtermAssignment_5_5_0 extends AssignmentToken  {
	
	public ListsBuiltInOperator_SubtermAssignment_5_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getSubtermAssignment_5_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getListsBuiltInOperatorAccess().getSubtermTermParserRuleCall_5_5_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ListsBuiltInOperator_LeftParenthesisKeyword_5_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," subterm+=Term)*
protected class ListsBuiltInOperator_Group_5_5_1 extends GroupToken {
	
	public ListsBuiltInOperator_Group_5_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getGroup_5_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_SubtermAssignment_5_5_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class ListsBuiltInOperator_CommaKeyword_5_5_1_0 extends KeywordToken  {
	
	public ListsBuiltInOperator_CommaKeyword_5_5_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getCommaKeyword_5_5_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_Group_5_5_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ListsBuiltInOperator_SubtermAssignment_5_5_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// subterm+=Term
protected class ListsBuiltInOperator_SubtermAssignment_5_5_1_1 extends AssignmentToken  {
	
	public ListsBuiltInOperator_SubtermAssignment_5_5_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getSubtermAssignment_5_5_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Term1ParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subterm",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subterm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getListsBuiltInOperatorAccess().getSubtermTermParserRuleCall_5_5_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ListsBuiltInOperator_CommaKeyword_5_5_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class ListsBuiltInOperator_RightParenthesisKeyword_5_6 extends KeywordToken  {
	
	public ListsBuiltInOperator_RightParenthesisKeyword_5_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListsBuiltInOperatorAccess().getRightParenthesisKeyword_5_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListsBuiltInOperator_Group_5_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ListsBuiltInOperator_LeftParenthesisKeyword_5_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}



/************ end Rule ListsBuiltInOperator ****************/


/************ begin Rule ListConstant ****************
 *
 * ListConstant returns lists::EmptyList:
 * 
 * 	"emptylist" ":" refsort=Sort;
 *
 **/

// "emptylist" ":" refsort=Sort
protected class ListConstant_Group extends GroupToken {
	
	public ListConstant_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getListConstantAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListConstant_RefsortAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getListConstantRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "emptylist"
protected class ListConstant_EmptylistKeyword_0 extends KeywordToken  {
	
	public ListConstant_EmptylistKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListConstantAccess().getEmptylistKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// ":"
protected class ListConstant_ColonKeyword_1 extends KeywordToken  {
	
	public ListConstant_ColonKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getListConstantAccess().getColonKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ListConstant_EmptylistKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// refsort=Sort
protected class ListConstant_RefsortAssignment_2 extends AssignmentToken  {
	
	public ListConstant_RefsortAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getListConstantAccess().getRefsortAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sort_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("refsort",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("refsort");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getListConstantAccess().getRefsortSortParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ListConstant_ColonKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ListConstant ****************/


/************ begin Rule ArbitrarySort ****************
 *
 * / * -------------------------------------------------------------
 *  * Concrete syntax for package arbitrary declarations
 *  * ------------------------------------------------------------- * /
 * 
 * ArbitrarySort returns arbitrary::ArbitrarySort:
 * 
 * 	name=ID;
 *
 **/

// name=ID
protected class ArbitrarySort_NameAssignment extends AssignmentToken  {
	
	public ArbitrarySort_NameAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArbitrarySortAccess().getNameAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getArbitrarySortRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getArbitrarySortAccess().getNameIDTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getArbitrarySortAccess().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule ArbitrarySort ****************/


/************ begin Rule ArbitraryOperator ****************
 *
 * ArbitraryOperator returns arbitrary::ArbitraryOperator:
 * 
 * 	name=ID ":" (input+=Sort ("," input+=Sort)*)? "->" output=Sort;
 *
 **/

// name=ID ":" (input+=Sort ("," input+=Sort)*)? "->" output=Sort
protected class ArbitraryOperator_Group extends GroupToken {
	
	public ArbitraryOperator_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArbitraryOperatorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArbitraryOperator_OutputAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getArbitraryOperatorRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class ArbitraryOperator_NameAssignment_0 extends AssignmentToken  {
	
	public ArbitraryOperator_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArbitraryOperatorAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getArbitraryOperatorAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getArbitraryOperatorAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class ArbitraryOperator_ColonKeyword_1 extends KeywordToken  {
	
	public ArbitraryOperator_ColonKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getArbitraryOperatorAccess().getColonKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArbitraryOperator_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (input+=Sort ("," input+=Sort)*)?
protected class ArbitraryOperator_Group_2 extends GroupToken {
	
	public ArbitraryOperator_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArbitraryOperatorAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArbitraryOperator_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ArbitraryOperator_InputAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// input+=Sort
protected class ArbitraryOperator_InputAssignment_2_0 extends AssignmentToken  {
	
	public ArbitraryOperator_InputAssignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArbitraryOperatorAccess().getInputAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sort_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("input",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("input");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getArbitraryOperatorAccess().getInputSortParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ArbitraryOperator_ColonKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," input+=Sort)*
protected class ArbitraryOperator_Group_2_1 extends GroupToken {
	
	public ArbitraryOperator_Group_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArbitraryOperatorAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArbitraryOperator_InputAssignment_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class ArbitraryOperator_CommaKeyword_2_1_0 extends KeywordToken  {
	
	public ArbitraryOperator_CommaKeyword_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getArbitraryOperatorAccess().getCommaKeyword_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArbitraryOperator_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ArbitraryOperator_InputAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// input+=Sort
protected class ArbitraryOperator_InputAssignment_2_1_1 extends AssignmentToken  {
	
	public ArbitraryOperator_InputAssignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArbitraryOperatorAccess().getInputAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sort_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("input",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("input");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getArbitraryOperatorAccess().getInputSortParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ArbitraryOperator_CommaKeyword_2_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "->"
protected class ArbitraryOperator_HyphenMinusGreaterThanSignKeyword_3 extends KeywordToken  {
	
	public ArbitraryOperator_HyphenMinusGreaterThanSignKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getArbitraryOperatorAccess().getHyphenMinusGreaterThanSignKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ArbitraryOperator_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ArbitraryOperator_ColonKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// output=Sort
protected class ArbitraryOperator_OutputAssignment_4 extends AssignmentToken  {
	
	public ArbitraryOperator_OutputAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArbitraryOperatorAccess().getOutputAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sort_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("output",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("output");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSortRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getArbitraryOperatorAccess().getOutputSortParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ArbitraryOperator_HyphenMinusGreaterThanSignKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ArbitraryOperator ****************/

}
