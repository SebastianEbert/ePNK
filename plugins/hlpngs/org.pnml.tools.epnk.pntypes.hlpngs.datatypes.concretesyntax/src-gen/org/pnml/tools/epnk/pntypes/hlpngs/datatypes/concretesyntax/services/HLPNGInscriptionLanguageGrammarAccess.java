/*
* generated by Xtext
*/

package org.pnml.tools.epnk.pntypes.hlpngs.datatypes.concretesyntax.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class HLPNGInscriptionLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Document");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDeclarationsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDeclarationsDeclarationsParserRuleCall_0_0_0 = (RuleCall)cDeclarationsAssignment_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTermAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTermTermParserRuleCall_1_0_0 = (RuleCall)cTermAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		/// * -------------------------------------------------------------
		// * Concrete syntax for package hlpnginscriptiondocument
		// * ------------------------------------------------------------- * /
		//
		//Document returns document::HLPNGInscriptionDocument:
		//
		//	(declarations+=Declarations ";" | term+=Term ";")*;
		public ParserRule getRule() { return rule; }

		//(declarations+=Declarations ";" | term+=Term ";")*
		public Alternatives getAlternatives() { return cAlternatives; }

		//declarations+=Declarations ";"
		public Group getGroup_0() { return cGroup_0; }

		//declarations+=Declarations
		public Assignment getDeclarationsAssignment_0_0() { return cDeclarationsAssignment_0_0; }

		//Declarations
		public RuleCall getDeclarationsDeclarationsParserRuleCall_0_0_0() { return cDeclarationsDeclarationsParserRuleCall_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//term+=Term ";"
		public Group getGroup_1() { return cGroup_1; }

		//term+=Term
		public Assignment getTermAssignment_1_0() { return cTermAssignment_1_0; }

		//Term
		public RuleCall getTermTermParserRuleCall_1_0_0() { return cTermTermParserRuleCall_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class DeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclarationsAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cSortsKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cDeclarationAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cDeclarationSortDeclParserRuleCall_1_0_1_0 = (RuleCall)cDeclarationAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cCommaKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cDeclarationAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cDeclarationSortDeclParserRuleCall_1_0_2_1_0 = (RuleCall)cDeclarationAssignment_1_0_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cVarsKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cDeclarationAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cDeclarationVariableDeclParserRuleCall_1_1_1_0 = (RuleCall)cDeclarationAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cDeclarationAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cDeclarationVariableDeclParserRuleCall_1_1_2_1_0 = (RuleCall)cDeclarationAssignment_1_1_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cOpsKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cDeclarationAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cDeclarationOperatorDeclParserRuleCall_1_2_1_0 = (RuleCall)cDeclarationAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_2_2 = (Group)cGroup_1_2.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_2_0 = (Keyword)cGroup_1_2_2.eContents().get(0);
		private final Assignment cDeclarationAssignment_1_2_2_1 = (Assignment)cGroup_1_2_2.eContents().get(1);
		private final RuleCall cDeclarationOperatorDeclParserRuleCall_1_2_2_1_0 = (RuleCall)cDeclarationAssignment_1_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2_3 = (Keyword)cGroup_1_2.eContents().get(3);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Keyword cSortsymbolsKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cDeclarationAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cDeclarationArbitrarySortParserRuleCall_1_3_1_0 = (RuleCall)cDeclarationAssignment_1_3_1.eContents().get(0);
		private final Group cGroup_1_3_2 = (Group)cGroup_1_3.eContents().get(2);
		private final Keyword cCommaKeyword_1_3_2_0 = (Keyword)cGroup_1_3_2.eContents().get(0);
		private final Assignment cDeclarationAssignment_1_3_2_1 = (Assignment)cGroup_1_3_2.eContents().get(1);
		private final RuleCall cDeclarationArbitrarySortParserRuleCall_1_3_2_1_0 = (RuleCall)cDeclarationAssignment_1_3_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3_3 = (Keyword)cGroup_1_3.eContents().get(3);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Keyword cOpsymbolsKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cDeclarationAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cDeclarationArbitraryOperatorParserRuleCall_1_4_1_0 = (RuleCall)cDeclarationAssignment_1_4_1.eContents().get(0);
		private final Group cGroup_1_4_2 = (Group)cGroup_1_4.eContents().get(2);
		private final Keyword cCommaKeyword_1_4_2_0 = (Keyword)cGroup_1_4_2.eContents().get(0);
		private final Assignment cDeclarationAssignment_1_4_2_1 = (Assignment)cGroup_1_4_2.eContents().get(1);
		private final RuleCall cDeclarationArbitraryOperatorParserRuleCall_1_4_2_1_0 = (RuleCall)cDeclarationAssignment_1_4_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_4_3 = (Keyword)cGroup_1_4.eContents().get(3);
		
		//// We did not yet define a syntax for terms, so it
		//
		//
		//// is just a single keyword 'term' for now and return a DotConstant.
		//
		//
		//// The syntax for Terms needs to be added though.
		// // Term returns terms::Term :
		//
		//
		////    'term' {dots::DotConstant} ';';    
		//
		//
		/// * -------------------------------------------------------------
		// * Concrete syntax for package terms
		// * ------------------------------------------------------------- * /
		//
		//Declarations returns terms::Declarations:
		//
		//	{terms::Declarations} ("sorts" declaration+=SortDecl ("," declaration+=SortDecl)* ";" | "vars"
		//
		//	declaration+=VariableDecl ("," declaration+=VariableDecl)* ";" | "ops" declaration+=OperatorDecl (","
		//
		//	declaration+=OperatorDecl)* ";" | "sortsymbols" declaration+=ArbitrarySort ("," declaration+=ArbitrarySort)* ";" |
		//
		//	"opsymbols" declaration+=ArbitraryOperator ("," declaration+=ArbitraryOperator)* ";")*;
		public ParserRule getRule() { return rule; }

		//{terms::Declarations} ("sorts" declaration+=SortDecl ("," declaration+=SortDecl)* ";" | "vars" declaration+=VariableDecl
		//
		//("," declaration+=VariableDecl)* ";" | "ops" declaration+=OperatorDecl ("," declaration+=OperatorDecl)* ";" |
		//
		//"sortsymbols" declaration+=ArbitrarySort ("," declaration+=ArbitrarySort)* ";" | "opsymbols"
		//
		//declaration+=ArbitraryOperator ("," declaration+=ArbitraryOperator)* ";")*
		public Group getGroup() { return cGroup; }

		//{terms::Declarations}
		public Action getDeclarationsAction_0() { return cDeclarationsAction_0; }

		//("sorts" declaration+=SortDecl ("," declaration+=SortDecl)* ";" | "vars" declaration+=VariableDecl (","
		//
		//declaration+=VariableDecl)* ";" | "ops" declaration+=OperatorDecl ("," declaration+=OperatorDecl)* ";" | "sortsymbols"
		//
		//declaration+=ArbitrarySort ("," declaration+=ArbitrarySort)* ";" | "opsymbols" declaration+=ArbitraryOperator (","
		//
		//declaration+=ArbitraryOperator)* ";")*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"sorts" declaration+=SortDecl ("," declaration+=SortDecl)* ";"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"sorts"
		public Keyword getSortsKeyword_1_0_0() { return cSortsKeyword_1_0_0; }

		//declaration+=SortDecl
		public Assignment getDeclarationAssignment_1_0_1() { return cDeclarationAssignment_1_0_1; }

		//SortDecl
		public RuleCall getDeclarationSortDeclParserRuleCall_1_0_1_0() { return cDeclarationSortDeclParserRuleCall_1_0_1_0; }

		//("," declaration+=SortDecl)*
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//","
		public Keyword getCommaKeyword_1_0_2_0() { return cCommaKeyword_1_0_2_0; }

		//declaration+=SortDecl
		public Assignment getDeclarationAssignment_1_0_2_1() { return cDeclarationAssignment_1_0_2_1; }

		//SortDecl
		public RuleCall getDeclarationSortDeclParserRuleCall_1_0_2_1_0() { return cDeclarationSortDeclParserRuleCall_1_0_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_0_3() { return cSemicolonKeyword_1_0_3; }

		//"vars" declaration+=VariableDecl ("," declaration+=VariableDecl)* ";"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"vars"
		public Keyword getVarsKeyword_1_1_0() { return cVarsKeyword_1_1_0; }

		//declaration+=VariableDecl
		public Assignment getDeclarationAssignment_1_1_1() { return cDeclarationAssignment_1_1_1; }

		//VariableDecl
		public RuleCall getDeclarationVariableDeclParserRuleCall_1_1_1_0() { return cDeclarationVariableDeclParserRuleCall_1_1_1_0; }

		//("," declaration+=VariableDecl)*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//","
		public Keyword getCommaKeyword_1_1_2_0() { return cCommaKeyword_1_1_2_0; }

		//declaration+=VariableDecl
		public Assignment getDeclarationAssignment_1_1_2_1() { return cDeclarationAssignment_1_1_2_1; }

		//VariableDecl
		public RuleCall getDeclarationVariableDeclParserRuleCall_1_1_2_1_0() { return cDeclarationVariableDeclParserRuleCall_1_1_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1_3() { return cSemicolonKeyword_1_1_3; }

		//"ops" declaration+=OperatorDecl ("," declaration+=OperatorDecl)* ";"
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"ops"
		public Keyword getOpsKeyword_1_2_0() { return cOpsKeyword_1_2_0; }

		//declaration+=OperatorDecl
		public Assignment getDeclarationAssignment_1_2_1() { return cDeclarationAssignment_1_2_1; }

		//OperatorDecl
		public RuleCall getDeclarationOperatorDeclParserRuleCall_1_2_1_0() { return cDeclarationOperatorDeclParserRuleCall_1_2_1_0; }

		//("," declaration+=OperatorDecl)*
		public Group getGroup_1_2_2() { return cGroup_1_2_2; }

		//","
		public Keyword getCommaKeyword_1_2_2_0() { return cCommaKeyword_1_2_2_0; }

		//declaration+=OperatorDecl
		public Assignment getDeclarationAssignment_1_2_2_1() { return cDeclarationAssignment_1_2_2_1; }

		//OperatorDecl
		public RuleCall getDeclarationOperatorDeclParserRuleCall_1_2_2_1_0() { return cDeclarationOperatorDeclParserRuleCall_1_2_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_2_3() { return cSemicolonKeyword_1_2_3; }

		//"sortsymbols" declaration+=ArbitrarySort ("," declaration+=ArbitrarySort)* ";"
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"sortsymbols"
		public Keyword getSortsymbolsKeyword_1_3_0() { return cSortsymbolsKeyword_1_3_0; }

		//declaration+=ArbitrarySort
		public Assignment getDeclarationAssignment_1_3_1() { return cDeclarationAssignment_1_3_1; }

		//ArbitrarySort
		public RuleCall getDeclarationArbitrarySortParserRuleCall_1_3_1_0() { return cDeclarationArbitrarySortParserRuleCall_1_3_1_0; }

		//("," declaration+=ArbitrarySort)*
		public Group getGroup_1_3_2() { return cGroup_1_3_2; }

		//","
		public Keyword getCommaKeyword_1_3_2_0() { return cCommaKeyword_1_3_2_0; }

		//declaration+=ArbitrarySort
		public Assignment getDeclarationAssignment_1_3_2_1() { return cDeclarationAssignment_1_3_2_1; }

		//ArbitrarySort
		public RuleCall getDeclarationArbitrarySortParserRuleCall_1_3_2_1_0() { return cDeclarationArbitrarySortParserRuleCall_1_3_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_3_3() { return cSemicolonKeyword_1_3_3; }

		//"opsymbols" declaration+=ArbitraryOperator ("," declaration+=ArbitraryOperator)* ";"
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"opsymbols"
		public Keyword getOpsymbolsKeyword_1_4_0() { return cOpsymbolsKeyword_1_4_0; }

		//declaration+=ArbitraryOperator
		public Assignment getDeclarationAssignment_1_4_1() { return cDeclarationAssignment_1_4_1; }

		//ArbitraryOperator
		public RuleCall getDeclarationArbitraryOperatorParserRuleCall_1_4_1_0() { return cDeclarationArbitraryOperatorParserRuleCall_1_4_1_0; }

		//("," declaration+=ArbitraryOperator)*
		public Group getGroup_1_4_2() { return cGroup_1_4_2; }

		//","
		public Keyword getCommaKeyword_1_4_2_0() { return cCommaKeyword_1_4_2_0; }

		//declaration+=ArbitraryOperator
		public Assignment getDeclarationAssignment_1_4_2_1() { return cDeclarationAssignment_1_4_2_1; }

		//ArbitraryOperator
		public RuleCall getDeclarationArbitraryOperatorParserRuleCall_1_4_2_1_0() { return cDeclarationArbitraryOperatorParserRuleCall_1_4_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_4_3() { return cSemicolonKeyword_1_4_3; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSortDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Declaration returns terms::Declaration:
		//
		//	SortDecl | VariableDecl;
		public ParserRule getRule() { return rule; }

		//SortDecl | VariableDecl
		public Alternatives getAlternatives() { return cAlternatives; }

		//SortDecl
		public RuleCall getSortDeclParserRuleCall_0() { return cSortDeclParserRuleCall_0; }

		//VariableDecl
		public RuleCall getVariableDeclParserRuleCall_1() { return cVariableDeclParserRuleCall_1; }
	}

	public class SortDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SortDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNamedSortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPartitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SortDecl returns terms::SortDecl: // for now there are only named sorts as sort declarations
		// // but there will be more
		//
		//
		//	NamedSort | Partition;
		public ParserRule getRule() { return rule; }

		//// for now there are only named sorts as sort declarations
		// // but there will be more
		// NamedSort | Partition
		public Alternatives getAlternatives() { return cAlternatives; }

		//// for now there are only named sorts as sort declarations
		// // but there will be more
		// NamedSort
		public RuleCall getNamedSortParserRuleCall_0() { return cNamedSortParserRuleCall_0; }

		//Partition
		public RuleCall getPartitionParserRuleCall_1() { return cPartitionParserRuleCall_1; }
	}

	public class VariableDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSortAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSortSortParserRuleCall_2_0 = (RuleCall)cSortAssignment_2.eContents().get(0);
		
		//VariableDecl returns terms::VariableDecl:
		//
		//	name=ID ":" sort=Sort;
		public ParserRule getRule() { return rule; }

		//name=ID ":" sort=Sort
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//sort=Sort
		public Assignment getSortAssignment_2() { return cSortAssignment_2; }

		//Sort
		public RuleCall getSortSortParserRuleCall_2_0() { return cSortSortParserRuleCall_2_0; }
	}

	public class NamedSortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedSort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefSortParserRuleCall_2_0 = (RuleCall)cDefAssignment_2.eContents().get(0);
		
		//NamedSort returns terms::NamedSort:
		//
		//	name=ID "=" def=Sort;
		public ParserRule getRule() { return rule; }

		//name=ID "=" def=Sort
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//def=Sort
		public Assignment getDefAssignment_2() { return cDefAssignment_2; }

		//Sort
		public RuleCall getDefSortParserRuleCall_2_0() { return cDefSortParserRuleCall_2_0; }
	}

	public class OperatorDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperatorDecl");
		private final RuleCall cNamedOperatorParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OperatorDecl returns terms::OperatorDecl:
		//
		//	NamedOperator;
		public ParserRule getRule() { return rule; }

		//NamedOperator
		public RuleCall getNamedOperatorParserRuleCall() { return cNamedOperatorParserRuleCall; }
	}

	public class NamedOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersVariableDeclParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersVariableDeclParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDefAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDefTermParserRuleCall_5_0 = (RuleCall)cDefAssignment_5.eContents().get(0);
		
		//NamedOperator returns terms::NamedOperator:
		//
		//	name=ID "(" (parameters+=VariableDecl ("," parameters+=VariableDecl)*)? ")" "=" def=Term;
		public ParserRule getRule() { return rule; }

		//name=ID "(" (parameters+=VariableDecl ("," parameters+=VariableDecl)*)? ")" "=" def=Term
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(parameters+=VariableDecl ("," parameters+=VariableDecl)*)?
		public Group getGroup_2() { return cGroup_2; }

		//parameters+=VariableDecl
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }

		//VariableDecl
		public RuleCall getParametersVariableDeclParserRuleCall_2_0_0() { return cParametersVariableDeclParserRuleCall_2_0_0; }

		//("," parameters+=VariableDecl)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//parameters+=VariableDecl
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }

		//VariableDecl
		public RuleCall getParametersVariableDeclParserRuleCall_2_1_1_0() { return cParametersVariableDeclParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//def=Term
		public Assignment getDefAssignment_5() { return cDefAssignment_5; }

		//Term
		public RuleCall getDefTermParserRuleCall_5_0() { return cDefTermParserRuleCall_5_0; }
	}

	public class SortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sort");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBuiltInSortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMultiSetSortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cProductSortParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUserSortParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Sort returns terms::Sort:
		//
		//	BuiltInSort | MultiSetSort | ProductSort | UserSort;
		public ParserRule getRule() { return rule; }

		//BuiltInSort | MultiSetSort | ProductSort | UserSort
		public Alternatives getAlternatives() { return cAlternatives; }

		//BuiltInSort
		public RuleCall getBuiltInSortParserRuleCall_0() { return cBuiltInSortParserRuleCall_0; }

		//MultiSetSort
		public RuleCall getMultiSetSortParserRuleCall_1() { return cMultiSetSortParserRuleCall_1; }

		//ProductSort
		public RuleCall getProductSortParserRuleCall_2() { return cProductSortParserRuleCall_2; }

		//UserSort
		public RuleCall getUserSortParserRuleCall_3() { return cUserSortParserRuleCall_3; }
	}

	public class MultiSetSortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiSetSort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBasisAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBasisSortParserRuleCall_2_0 = (RuleCall)cBasisAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MultiSetSort returns terms::MultiSetSort:
		//
		//	"MS" "(" basis=Sort ")";
		public ParserRule getRule() { return rule; }

		//"MS" "(" basis=Sort ")"
		public Group getGroup() { return cGroup; }

		//"MS"
		public Keyword getMSKeyword_0() { return cMSKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//basis=Sort
		public Assignment getBasisAssignment_2() { return cBasisAssignment_2; }

		//Sort
		public RuleCall getBasisSortParserRuleCall_2_0() { return cBasisSortParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ProductSortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProductSort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cProductSortAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementSortAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementSortSortParserRuleCall_2_0_0 = (RuleCall)cElementSortAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cAsteriskKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementSortAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementSortSortParserRuleCall_2_1_1_0 = (RuleCall)cElementSortAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ProductSort returns terms::ProductSort:
		//
		//	"(" {terms::ProductSort} (elementSort+=Sort ("*" elementSort+=Sort)*)? ")";
		public ParserRule getRule() { return rule; }

		//"(" {terms::ProductSort} (elementSort+=Sort ("*" elementSort+=Sort)*)? ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//{terms::ProductSort}
		public Action getProductSortAction_1() { return cProductSortAction_1; }

		//(elementSort+=Sort ("*" elementSort+=Sort)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elementSort+=Sort
		public Assignment getElementSortAssignment_2_0() { return cElementSortAssignment_2_0; }

		//Sort
		public RuleCall getElementSortSortParserRuleCall_2_0_0() { return cElementSortSortParserRuleCall_2_0_0; }

		//("*" elementSort+=Sort)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"*"
		public Keyword getAsteriskKeyword_2_1_0() { return cAsteriskKeyword_2_1_0; }

		//elementSort+=Sort
		public Assignment getElementSortAssignment_2_1_1() { return cElementSortAssignment_2_1_1; }

		//Sort
		public RuleCall getElementSortSortParserRuleCall_2_1_1_0() { return cElementSortSortParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class UserSortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UserSort");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//UserSort returns terms::UserSort: // declaration = [terms::SortDecl|SortDecl];
		//
		//
		//// Unfortunately, crossreferencing works for
		// // simple datatypes only; but I will use my own
		//
		//
		//// linker anyway, so setting the name of the
		// // SymbolUse is fine for now:
		// name=ID;
		public ParserRule getRule() { return rule; }

		//// declaration = [terms::SortDecl|SortDecl];
		// // Unfortunately, crossreferencing works for
		//
		//
		//// simple datatypes only; but I will use my own
		// // linker anyway, so setting the name of the
		//
		//
		//// SymbolUse is fine for now:
		// name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final RuleCall cTerm1ParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Term returns terms::Term:
		//
		//	Term1;
		public ParserRule getRule() { return rule; }

		//Term1
		public RuleCall getTerm1ParserRuleCall() { return cTerm1ParserRuleCall; }
	}

	public class Term1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerm2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cOrSubtermAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cOrKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cSubtermAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cSubtermTerm2ParserRuleCall_1_0_2_0 = (RuleCall)cSubtermAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cImplySubtermAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cImpliesKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cSubtermAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cSubtermTerm2ParserRuleCall_1_1_2_0 = (RuleCall)cSubtermAssignment_1_1_2.eContents().get(0);
		
		//Term1 returns terms::Term:
		//
		//	Term2 ({booleans::Or.subterm+=current} "or" subterm+=Term2 | {booleans::Imply.subterm+=current} "implies"
		//
		//	subterm+=Term2)*;
		public ParserRule getRule() { return rule; }

		//Term2 ({booleans::Or.subterm+=current} "or" subterm+=Term2 | {booleans::Imply.subterm+=current} "implies"
		//
		//subterm+=Term2)*
		public Group getGroup() { return cGroup; }

		//Term2
		public RuleCall getTerm2ParserRuleCall_0() { return cTerm2ParserRuleCall_0; }

		//({booleans::Or.subterm+=current} "or" subterm+=Term2 | {booleans::Imply.subterm+=current} "implies" subterm+=Term2)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{booleans::Or.subterm+=current} "or" subterm+=Term2
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{booleans::Or.subterm+=current}
		public Action getOrSubtermAction_1_0_0() { return cOrSubtermAction_1_0_0; }

		//"or"
		public Keyword getOrKeyword_1_0_1() { return cOrKeyword_1_0_1; }

		//subterm+=Term2
		public Assignment getSubtermAssignment_1_0_2() { return cSubtermAssignment_1_0_2; }

		//Term2
		public RuleCall getSubtermTerm2ParserRuleCall_1_0_2_0() { return cSubtermTerm2ParserRuleCall_1_0_2_0; }

		//{booleans::Imply.subterm+=current} "implies" subterm+=Term2
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{booleans::Imply.subterm+=current}
		public Action getImplySubtermAction_1_1_0() { return cImplySubtermAction_1_1_0; }

		//"implies"
		public Keyword getImpliesKeyword_1_1_1() { return cImpliesKeyword_1_1_1; }

		//subterm+=Term2
		public Assignment getSubtermAssignment_1_1_2() { return cSubtermAssignment_1_1_2; }

		//Term2
		public RuleCall getSubtermTerm2ParserRuleCall_1_1_2_0() { return cSubtermTerm2ParserRuleCall_1_1_2_0; }
	}

	public class Term2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerm3ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndSubtermAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cSubtermAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubtermTerm3ParserRuleCall_1_2_0 = (RuleCall)cSubtermAssignment_1_2.eContents().get(0);
		
		//Term2 returns terms::Term:
		//
		//	Term3 ({booleans::And.subterm+=current} "and" subterm+=Term3)*;
		public ParserRule getRule() { return rule; }

		//Term3 ({booleans::And.subterm+=current} "and" subterm+=Term3)*
		public Group getGroup() { return cGroup; }

		//Term3
		public RuleCall getTerm3ParserRuleCall_0() { return cTerm3ParserRuleCall_0; }

		//({booleans::And.subterm+=current} "and" subterm+=Term3)*
		public Group getGroup_1() { return cGroup_1; }

		//{booleans::And.subterm+=current}
		public Action getAndSubtermAction_1_0() { return cAndSubtermAction_1_0; }

		//"and"
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }

		//subterm+=Term3
		public Assignment getSubtermAssignment_1_2() { return cSubtermAssignment_1_2; }

		//Term3
		public RuleCall getSubtermTerm3ParserRuleCall_1_2_0() { return cSubtermTerm3ParserRuleCall_1_2_0; }
	}

	public class Term3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerm4ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cGreaterThanSubtermAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cSubtermAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cSubtermTerm4ParserRuleCall_1_0_2_0 = (RuleCall)cSubtermAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cGreaterThanOrEqualSubtermAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cSubtermAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cSubtermTerm4ParserRuleCall_1_1_2_0 = (RuleCall)cSubtermAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cLessThanSubtermAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cSubtermAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cSubtermTerm4ParserRuleCall_1_2_2_0 = (RuleCall)cSubtermAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Action cLessThanOrEqualSubtermAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cSubtermAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cSubtermTerm4ParserRuleCall_1_3_2_0 = (RuleCall)cSubtermAssignment_1_3_2.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Action cContainsSubtermAction_1_4_0 = (Action)cGroup_1_4.eContents().get(0);
		private final Keyword cContainsKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final Assignment cSubtermAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final RuleCall cSubtermTerm4ParserRuleCall_1_4_2_0 = (RuleCall)cSubtermAssignment_1_4_2.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final Action cLessThanSubtermAction_1_5_0 = (Action)cGroup_1_5.eContents().get(0);
		private final Keyword cRKeyword_1_5_1 = (Keyword)cGroup_1_5.eContents().get(1);
		private final Assignment cSubtermAssignment_1_5_2 = (Assignment)cGroup_1_5.eContents().get(2);
		private final RuleCall cSubtermTerm4ParserRuleCall_1_5_2_0 = (RuleCall)cSubtermAssignment_1_5_2.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cAlternatives_1.eContents().get(6);
		private final Action cLessThanOrEqualSubtermAction_1_6_0 = (Action)cGroup_1_6.eContents().get(0);
		private final Keyword cRKeyword_1_6_1 = (Keyword)cGroup_1_6.eContents().get(1);
		private final Assignment cSubtermAssignment_1_6_2 = (Assignment)cGroup_1_6.eContents().get(2);
		private final RuleCall cSubtermTerm4ParserRuleCall_1_6_2_0 = (RuleCall)cSubtermAssignment_1_6_2.eContents().get(0);
		private final Group cGroup_1_7 = (Group)cAlternatives_1.eContents().get(7);
		private final Action cGreaterThanSubtermAction_1_7_0 = (Action)cGroup_1_7.eContents().get(0);
		private final Keyword cRKeyword_1_7_1 = (Keyword)cGroup_1_7.eContents().get(1);
		private final Assignment cSubtermAssignment_1_7_2 = (Assignment)cGroup_1_7.eContents().get(2);
		private final RuleCall cSubtermTerm4ParserRuleCall_1_7_2_0 = (RuleCall)cSubtermAssignment_1_7_2.eContents().get(0);
		private final Group cGroup_1_8 = (Group)cAlternatives_1.eContents().get(8);
		private final Action cGreaterThanOrEqualSubtermAction_1_8_0 = (Action)cGroup_1_8.eContents().get(0);
		private final Keyword cRKeyword_1_8_1 = (Keyword)cGroup_1_8.eContents().get(1);
		private final Assignment cSubtermAssignment_1_8_2 = (Assignment)cGroup_1_8.eContents().get(2);
		private final RuleCall cSubtermTerm4ParserRuleCall_1_8_2_0 = (RuleCall)cSubtermAssignment_1_8_2.eContents().get(0);
		private final Group cGroup_1_9 = (Group)cAlternatives_1.eContents().get(9);
		private final Action cLessThanSubtermAction_1_9_0 = (Action)cGroup_1_9.eContents().get(0);
		private final Keyword cPKeyword_1_9_1 = (Keyword)cGroup_1_9.eContents().get(1);
		private final Assignment cSubtermAssignment_1_9_2 = (Assignment)cGroup_1_9.eContents().get(2);
		private final RuleCall cSubtermTerm4ParserRuleCall_1_9_2_0 = (RuleCall)cSubtermAssignment_1_9_2.eContents().get(0);
		private final Group cGroup_1_10 = (Group)cAlternatives_1.eContents().get(10);
		private final Action cGreaterThanSubtermAction_1_10_0 = (Action)cGroup_1_10.eContents().get(0);
		private final Keyword cPKeyword_1_10_1 = (Keyword)cGroup_1_10.eContents().get(1);
		private final Assignment cSubtermAssignment_1_10_2 = (Assignment)cGroup_1_10.eContents().get(2);
		private final RuleCall cSubtermTerm4ParserRuleCall_1_10_2_0 = (RuleCall)cSubtermAssignment_1_10_2.eContents().get(0);
		private final Group cGroup_1_11 = (Group)cAlternatives_1.eContents().get(11);
		private final Action cGreaterThanOrEqualSubtermAction_1_11_0 = (Action)cGroup_1_11.eContents().get(0);
		private final Keyword cSKeyword_1_11_1 = (Keyword)cGroup_1_11.eContents().get(1);
		private final Assignment cSubtermAssignment_1_11_2 = (Assignment)cGroup_1_11.eContents().get(2);
		private final RuleCall cSubtermTerm4ParserRuleCall_1_11_2_0 = (RuleCall)cSubtermAssignment_1_11_2.eContents().get(0);
		private final Group cGroup_1_12 = (Group)cAlternatives_1.eContents().get(12);
		private final Action cGreaterThanSubtermAction_1_12_0 = (Action)cGroup_1_12.eContents().get(0);
		private final Keyword cSKeyword_1_12_1 = (Keyword)cGroup_1_12.eContents().get(1);
		private final Assignment cSubtermAssignment_1_12_2 = (Assignment)cGroup_1_12.eContents().get(2);
		private final RuleCall cSubtermTerm4ParserRuleCall_1_12_2_0 = (RuleCall)cSubtermAssignment_1_12_2.eContents().get(0);
		private final Group cGroup_1_13 = (Group)cAlternatives_1.eContents().get(13);
		private final Action cLessThanOrEqualSubtermAction_1_13_0 = (Action)cGroup_1_13.eContents().get(0);
		private final Keyword cSKeyword_1_13_1 = (Keyword)cGroup_1_13.eContents().get(1);
		private final Assignment cSubtermAssignment_1_13_2 = (Assignment)cGroup_1_13.eContents().get(2);
		private final RuleCall cSubtermTerm4ParserRuleCall_1_13_2_0 = (RuleCall)cSubtermAssignment_1_13_2.eContents().get(0);
		private final Group cGroup_1_14 = (Group)cAlternatives_1.eContents().get(14);
		private final Action cLessThanSubtermAction_1_14_0 = (Action)cGroup_1_14.eContents().get(0);
		private final Keyword cSKeyword_1_14_1 = (Keyword)cGroup_1_14.eContents().get(1);
		private final Assignment cSubtermAssignment_1_14_2 = (Assignment)cGroup_1_14.eContents().get(2);
		private final RuleCall cSubtermTerm4ParserRuleCall_1_14_2_0 = (RuleCall)cSubtermAssignment_1_14_2.eContents().get(0);
		
		//Term3 returns terms::Term:
		//
		//	Term4 ({integers::GreaterThan.subterm+=current} ">" subterm+=Term4 | {integers::GreaterThanOrEqual.subterm+=current}
		//
		//	">=" subterm+=Term4 | {integers::LessThan.subterm+=current} "<" subterm+=Term4 |
		//
		//	{integers::LessThanOrEqual.subterm+=current} "<=" subterm+=Term4 | {multisets::Contains.subterm+=current} "contains"
		//
		//	subterm+=Term4 | {finiteintranges::LessThan.subterm+=current} "<r" subterm+=Term4 |
		//
		//	{finiteintranges::LessThanOrEqual.subterm+=current} "<=r" subterm+=Term4 |
		//
		//	{finiteintranges::GreaterThan.subterm+=current} ">r" subterm+=Term4 |
		//
		//	{finiteintranges::GreaterThanOrEqual.subterm+=current} ">=r" subterm+=Term4 | {partitions::LessThan.subterm+=current}
		//
		//	"<p" subterm+=Term4 | {partitions::GreaterThan.subterm+=current} ">p" subterm+=Term4 |
		//
		//	{strings::GreaterThanOrEqual.subterm+=current} ">=s" subterm+=Term4 | {strings::GreaterThan.subterm+=current} ">s"
		//
		//	subterm+=Term4 | {strings::LessThanOrEqual.subterm+=current} "<=s" subterm+=Term4 |
		//
		//	{strings::LessThan.subterm+=current} "<s" subterm+=Term4)*;
		public ParserRule getRule() { return rule; }

		//Term4 ({integers::GreaterThan.subterm+=current} ">" subterm+=Term4 | {integers::GreaterThanOrEqual.subterm+=current}
		//
		//">=" subterm+=Term4 | {integers::LessThan.subterm+=current} "<" subterm+=Term4 |
		//
		//{integers::LessThanOrEqual.subterm+=current} "<=" subterm+=Term4 | {multisets::Contains.subterm+=current} "contains"
		//
		//subterm+=Term4 | {finiteintranges::LessThan.subterm+=current} "<r" subterm+=Term4 |
		//
		//{finiteintranges::LessThanOrEqual.subterm+=current} "<=r" subterm+=Term4 |
		//
		//{finiteintranges::GreaterThan.subterm+=current} ">r" subterm+=Term4 |
		//
		//{finiteintranges::GreaterThanOrEqual.subterm+=current} ">=r" subterm+=Term4 | {partitions::LessThan.subterm+=current}
		//
		//"<p" subterm+=Term4 | {partitions::GreaterThan.subterm+=current} ">p" subterm+=Term4 |
		//
		//{strings::GreaterThanOrEqual.subterm+=current} ">=s" subterm+=Term4 | {strings::GreaterThan.subterm+=current} ">s"
		//
		//subterm+=Term4 | {strings::LessThanOrEqual.subterm+=current} "<=s" subterm+=Term4 |
		//
		//{strings::LessThan.subterm+=current} "<s" subterm+=Term4)*
		public Group getGroup() { return cGroup; }

		//Term4
		public RuleCall getTerm4ParserRuleCall_0() { return cTerm4ParserRuleCall_0; }

		//({integers::GreaterThan.subterm+=current} ">" subterm+=Term4 | {integers::GreaterThanOrEqual.subterm+=current} ">="
		//
		//subterm+=Term4 | {integers::LessThan.subterm+=current} "<" subterm+=Term4 |
		//
		//{integers::LessThanOrEqual.subterm+=current} "<=" subterm+=Term4 | {multisets::Contains.subterm+=current} "contains"
		//
		//subterm+=Term4 | {finiteintranges::LessThan.subterm+=current} "<r" subterm+=Term4 |
		//
		//{finiteintranges::LessThanOrEqual.subterm+=current} "<=r" subterm+=Term4 |
		//
		//{finiteintranges::GreaterThan.subterm+=current} ">r" subterm+=Term4 |
		//
		//{finiteintranges::GreaterThanOrEqual.subterm+=current} ">=r" subterm+=Term4 | {partitions::LessThan.subterm+=current}
		//
		//"<p" subterm+=Term4 | {partitions::GreaterThan.subterm+=current} ">p" subterm+=Term4 |
		//
		//{strings::GreaterThanOrEqual.subterm+=current} ">=s" subterm+=Term4 | {strings::GreaterThan.subterm+=current} ">s"
		//
		//subterm+=Term4 | {strings::LessThanOrEqual.subterm+=current} "<=s" subterm+=Term4 |
		//
		//{strings::LessThan.subterm+=current} "<s" subterm+=Term4)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{integers::GreaterThan.subterm+=current} ">" subterm+=Term4
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{integers::GreaterThan.subterm+=current}
		public Action getGreaterThanSubtermAction_1_0_0() { return cGreaterThanSubtermAction_1_0_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_0_1() { return cGreaterThanSignKeyword_1_0_1; }

		//subterm+=Term4
		public Assignment getSubtermAssignment_1_0_2() { return cSubtermAssignment_1_0_2; }

		//Term4
		public RuleCall getSubtermTerm4ParserRuleCall_1_0_2_0() { return cSubtermTerm4ParserRuleCall_1_0_2_0; }

		//{integers::GreaterThanOrEqual.subterm+=current} ">=" subterm+=Term4
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{integers::GreaterThanOrEqual.subterm+=current}
		public Action getGreaterThanOrEqualSubtermAction_1_1_0() { return cGreaterThanOrEqualSubtermAction_1_1_0; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_1_1() { return cGreaterThanSignEqualsSignKeyword_1_1_1; }

		//subterm+=Term4
		public Assignment getSubtermAssignment_1_1_2() { return cSubtermAssignment_1_1_2; }

		//Term4
		public RuleCall getSubtermTerm4ParserRuleCall_1_1_2_0() { return cSubtermTerm4ParserRuleCall_1_1_2_0; }

		//{integers::LessThan.subterm+=current} "<" subterm+=Term4
		public Group getGroup_1_2() { return cGroup_1_2; }

		//{integers::LessThan.subterm+=current}
		public Action getLessThanSubtermAction_1_2_0() { return cLessThanSubtermAction_1_2_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_2_1() { return cLessThanSignKeyword_1_2_1; }

		//subterm+=Term4
		public Assignment getSubtermAssignment_1_2_2() { return cSubtermAssignment_1_2_2; }

		//Term4
		public RuleCall getSubtermTerm4ParserRuleCall_1_2_2_0() { return cSubtermTerm4ParserRuleCall_1_2_2_0; }

		//{integers::LessThanOrEqual.subterm+=current} "<=" subterm+=Term4
		public Group getGroup_1_3() { return cGroup_1_3; }

		//{integers::LessThanOrEqual.subterm+=current}
		public Action getLessThanOrEqualSubtermAction_1_3_0() { return cLessThanOrEqualSubtermAction_1_3_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_3_1() { return cLessThanSignEqualsSignKeyword_1_3_1; }

		//subterm+=Term4
		public Assignment getSubtermAssignment_1_3_2() { return cSubtermAssignment_1_3_2; }

		//Term4
		public RuleCall getSubtermTerm4ParserRuleCall_1_3_2_0() { return cSubtermTerm4ParserRuleCall_1_3_2_0; }

		//{multisets::Contains.subterm+=current} "contains" subterm+=Term4
		public Group getGroup_1_4() { return cGroup_1_4; }

		//{multisets::Contains.subterm+=current}
		public Action getContainsSubtermAction_1_4_0() { return cContainsSubtermAction_1_4_0; }

		//"contains"
		public Keyword getContainsKeyword_1_4_1() { return cContainsKeyword_1_4_1; }

		//subterm+=Term4
		public Assignment getSubtermAssignment_1_4_2() { return cSubtermAssignment_1_4_2; }

		//Term4
		public RuleCall getSubtermTerm4ParserRuleCall_1_4_2_0() { return cSubtermTerm4ParserRuleCall_1_4_2_0; }

		//{finiteintranges::LessThan.subterm+=current} "<r" subterm+=Term4
		public Group getGroup_1_5() { return cGroup_1_5; }

		//{finiteintranges::LessThan.subterm+=current}
		public Action getLessThanSubtermAction_1_5_0() { return cLessThanSubtermAction_1_5_0; }

		//"<r"
		public Keyword getRKeyword_1_5_1() { return cRKeyword_1_5_1; }

		//subterm+=Term4
		public Assignment getSubtermAssignment_1_5_2() { return cSubtermAssignment_1_5_2; }

		//Term4
		public RuleCall getSubtermTerm4ParserRuleCall_1_5_2_0() { return cSubtermTerm4ParserRuleCall_1_5_2_0; }

		//{finiteintranges::LessThanOrEqual.subterm+=current} "<=r" subterm+=Term4
		public Group getGroup_1_6() { return cGroup_1_6; }

		//{finiteintranges::LessThanOrEqual.subterm+=current}
		public Action getLessThanOrEqualSubtermAction_1_6_0() { return cLessThanOrEqualSubtermAction_1_6_0; }

		//"<=r"
		public Keyword getRKeyword_1_6_1() { return cRKeyword_1_6_1; }

		//subterm+=Term4
		public Assignment getSubtermAssignment_1_6_2() { return cSubtermAssignment_1_6_2; }

		//Term4
		public RuleCall getSubtermTerm4ParserRuleCall_1_6_2_0() { return cSubtermTerm4ParserRuleCall_1_6_2_0; }

		//{finiteintranges::GreaterThan.subterm+=current} ">r" subterm+=Term4
		public Group getGroup_1_7() { return cGroup_1_7; }

		//{finiteintranges::GreaterThan.subterm+=current}
		public Action getGreaterThanSubtermAction_1_7_0() { return cGreaterThanSubtermAction_1_7_0; }

		//">r"
		public Keyword getRKeyword_1_7_1() { return cRKeyword_1_7_1; }

		//subterm+=Term4
		public Assignment getSubtermAssignment_1_7_2() { return cSubtermAssignment_1_7_2; }

		//Term4
		public RuleCall getSubtermTerm4ParserRuleCall_1_7_2_0() { return cSubtermTerm4ParserRuleCall_1_7_2_0; }

		//{finiteintranges::GreaterThanOrEqual.subterm+=current} ">=r" subterm+=Term4
		public Group getGroup_1_8() { return cGroup_1_8; }

		//{finiteintranges::GreaterThanOrEqual.subterm+=current}
		public Action getGreaterThanOrEqualSubtermAction_1_8_0() { return cGreaterThanOrEqualSubtermAction_1_8_0; }

		//">=r"
		public Keyword getRKeyword_1_8_1() { return cRKeyword_1_8_1; }

		//subterm+=Term4
		public Assignment getSubtermAssignment_1_8_2() { return cSubtermAssignment_1_8_2; }

		//Term4
		public RuleCall getSubtermTerm4ParserRuleCall_1_8_2_0() { return cSubtermTerm4ParserRuleCall_1_8_2_0; }

		//{partitions::LessThan.subterm+=current} "<p" subterm+=Term4
		public Group getGroup_1_9() { return cGroup_1_9; }

		//{partitions::LessThan.subterm+=current}
		public Action getLessThanSubtermAction_1_9_0() { return cLessThanSubtermAction_1_9_0; }

		//"<p"
		public Keyword getPKeyword_1_9_1() { return cPKeyword_1_9_1; }

		//subterm+=Term4
		public Assignment getSubtermAssignment_1_9_2() { return cSubtermAssignment_1_9_2; }

		//Term4
		public RuleCall getSubtermTerm4ParserRuleCall_1_9_2_0() { return cSubtermTerm4ParserRuleCall_1_9_2_0; }

		//{partitions::GreaterThan.subterm+=current} ">p" subterm+=Term4
		public Group getGroup_1_10() { return cGroup_1_10; }

		//{partitions::GreaterThan.subterm+=current}
		public Action getGreaterThanSubtermAction_1_10_0() { return cGreaterThanSubtermAction_1_10_0; }

		//">p"
		public Keyword getPKeyword_1_10_1() { return cPKeyword_1_10_1; }

		//subterm+=Term4
		public Assignment getSubtermAssignment_1_10_2() { return cSubtermAssignment_1_10_2; }

		//Term4
		public RuleCall getSubtermTerm4ParserRuleCall_1_10_2_0() { return cSubtermTerm4ParserRuleCall_1_10_2_0; }

		//{strings::GreaterThanOrEqual.subterm+=current} ">=s" subterm+=Term4
		public Group getGroup_1_11() { return cGroup_1_11; }

		//{strings::GreaterThanOrEqual.subterm+=current}
		public Action getGreaterThanOrEqualSubtermAction_1_11_0() { return cGreaterThanOrEqualSubtermAction_1_11_0; }

		//">=s"
		public Keyword getSKeyword_1_11_1() { return cSKeyword_1_11_1; }

		//subterm+=Term4
		public Assignment getSubtermAssignment_1_11_2() { return cSubtermAssignment_1_11_2; }

		//Term4
		public RuleCall getSubtermTerm4ParserRuleCall_1_11_2_0() { return cSubtermTerm4ParserRuleCall_1_11_2_0; }

		//{strings::GreaterThan.subterm+=current} ">s" subterm+=Term4
		public Group getGroup_1_12() { return cGroup_1_12; }

		//{strings::GreaterThan.subterm+=current}
		public Action getGreaterThanSubtermAction_1_12_0() { return cGreaterThanSubtermAction_1_12_0; }

		//">s"
		public Keyword getSKeyword_1_12_1() { return cSKeyword_1_12_1; }

		//subterm+=Term4
		public Assignment getSubtermAssignment_1_12_2() { return cSubtermAssignment_1_12_2; }

		//Term4
		public RuleCall getSubtermTerm4ParserRuleCall_1_12_2_0() { return cSubtermTerm4ParserRuleCall_1_12_2_0; }

		//{strings::LessThanOrEqual.subterm+=current} "<=s" subterm+=Term4
		public Group getGroup_1_13() { return cGroup_1_13; }

		//{strings::LessThanOrEqual.subterm+=current}
		public Action getLessThanOrEqualSubtermAction_1_13_0() { return cLessThanOrEqualSubtermAction_1_13_0; }

		//"<=s"
		public Keyword getSKeyword_1_13_1() { return cSKeyword_1_13_1; }

		//subterm+=Term4
		public Assignment getSubtermAssignment_1_13_2() { return cSubtermAssignment_1_13_2; }

		//Term4
		public RuleCall getSubtermTerm4ParserRuleCall_1_13_2_0() { return cSubtermTerm4ParserRuleCall_1_13_2_0; }

		//{strings::LessThan.subterm+=current} "<s" subterm+=Term4
		public Group getGroup_1_14() { return cGroup_1_14; }

		//{strings::LessThan.subterm+=current}
		public Action getLessThanSubtermAction_1_14_0() { return cLessThanSubtermAction_1_14_0; }

		//"<s"
		public Keyword getSKeyword_1_14_1() { return cSKeyword_1_14_1; }

		//subterm+=Term4
		public Assignment getSubtermAssignment_1_14_2() { return cSubtermAssignment_1_14_2; }

		//Term4
		public RuleCall getSubtermTerm4ParserRuleCall_1_14_2_0() { return cSubtermTerm4ParserRuleCall_1_14_2_0; }
	}

	public class Term4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term4");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerm5ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cEqualitySubtermAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cSubtermAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cSubtermTerm5ParserRuleCall_1_0_2_0 = (RuleCall)cSubtermAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cInequalitySubtermAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cSubtermAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cSubtermTerm5ParserRuleCall_1_1_2_0 = (RuleCall)cSubtermAssignment_1_1_2.eContents().get(0);
		
		//Term4 returns terms::Term:
		//
		//	Term5 ({booleans::Equality.subterm+=current} "==" subterm+=Term5 | {booleans::Inequality.subterm+=current} "!="
		//
		//	subterm+=Term5)*;
		public ParserRule getRule() { return rule; }

		//Term5 ({booleans::Equality.subterm+=current} "==" subterm+=Term5 | {booleans::Inequality.subterm+=current} "!="
		//
		//subterm+=Term5)*
		public Group getGroup() { return cGroup; }

		//Term5
		public RuleCall getTerm5ParserRuleCall_0() { return cTerm5ParserRuleCall_0; }

		//({booleans::Equality.subterm+=current} "==" subterm+=Term5 | {booleans::Inequality.subterm+=current} "!="
		//
		//subterm+=Term5)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{booleans::Equality.subterm+=current} "==" subterm+=Term5
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{booleans::Equality.subterm+=current}
		public Action getEqualitySubtermAction_1_0_0() { return cEqualitySubtermAction_1_0_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0_1() { return cEqualsSignEqualsSignKeyword_1_0_1; }

		//subterm+=Term5
		public Assignment getSubtermAssignment_1_0_2() { return cSubtermAssignment_1_0_2; }

		//Term5
		public RuleCall getSubtermTerm5ParserRuleCall_1_0_2_0() { return cSubtermTerm5ParserRuleCall_1_0_2_0; }

		//{booleans::Inequality.subterm+=current} "!=" subterm+=Term5
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{booleans::Inequality.subterm+=current}
		public Action getInequalitySubtermAction_1_1_0() { return cInequalitySubtermAction_1_1_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_1_1() { return cExclamationMarkEqualsSignKeyword_1_1_1; }

		//subterm+=Term5
		public Assignment getSubtermAssignment_1_1_2() { return cSubtermAssignment_1_1_2; }

		//Term5
		public RuleCall getSubtermTerm5ParserRuleCall_1_1_2_0() { return cSubtermTerm5ParserRuleCall_1_1_2_0; }
	}

	public class Term5Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term5");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerm6ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cAddSubtermAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cPlusSignPlusSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cSubtermAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cSubtermTerm6ParserRuleCall_1_0_2_0 = (RuleCall)cSubtermAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cSubtractSubtermAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cSubtermAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cSubtermTerm6ParserRuleCall_1_1_2_0 = (RuleCall)cSubtermAssignment_1_1_2.eContents().get(0);
		
		//Term5 returns terms::Term:
		//
		//	Term6 ({multisets::Add.subterm+=current} "++" subterm+=Term6 | {multisets::Subtract.subterm+=current} "--"
		//
		//	subterm+=Term6)*;
		public ParserRule getRule() { return rule; }

		//Term6 ({multisets::Add.subterm+=current} "++" subterm+=Term6 | {multisets::Subtract.subterm+=current} "--"
		//
		//subterm+=Term6)*
		public Group getGroup() { return cGroup; }

		//Term6
		public RuleCall getTerm6ParserRuleCall_0() { return cTerm6ParserRuleCall_0; }

		//({multisets::Add.subterm+=current} "++" subterm+=Term6 | {multisets::Subtract.subterm+=current} "--" subterm+=Term6)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{multisets::Add.subterm+=current} "++" subterm+=Term6
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{multisets::Add.subterm+=current}
		public Action getAddSubtermAction_1_0_0() { return cAddSubtermAction_1_0_0; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_1_0_1() { return cPlusSignPlusSignKeyword_1_0_1; }

		//subterm+=Term6
		public Assignment getSubtermAssignment_1_0_2() { return cSubtermAssignment_1_0_2; }

		//Term6
		public RuleCall getSubtermTerm6ParserRuleCall_1_0_2_0() { return cSubtermTerm6ParserRuleCall_1_0_2_0; }

		//{multisets::Subtract.subterm+=current} "--" subterm+=Term6
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{multisets::Subtract.subterm+=current}
		public Action getSubtractSubtermAction_1_1_0() { return cSubtractSubtermAction_1_1_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1_1_1() { return cHyphenMinusHyphenMinusKeyword_1_1_1; }

		//subterm+=Term6
		public Assignment getSubtermAssignment_1_1_2() { return cSubtermAssignment_1_1_2; }

		//Term6
		public RuleCall getSubtermTerm6ParserRuleCall_1_1_2_0() { return cSubtermTerm6ParserRuleCall_1_1_2_0; }
	}

	public class Term6Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term6");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerm7ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cNumberOfSubtermAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cGraveAccentKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cSubtermAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubtermTerm7ParserRuleCall_1_2_0 = (RuleCall)cSubtermAssignment_1_2.eContents().get(0);
		
		//Term6 returns terms::Term:
		//
		//	Term7 ({multisets::NumberOf.subterm+=current} "`" subterm+=Term7)*;
		public ParserRule getRule() { return rule; }

		//Term7 ({multisets::NumberOf.subterm+=current} "`" subterm+=Term7)*
		public Group getGroup() { return cGroup; }

		//Term7
		public RuleCall getTerm7ParserRuleCall_0() { return cTerm7ParserRuleCall_0; }

		//({multisets::NumberOf.subterm+=current} "`" subterm+=Term7)*
		public Group getGroup_1() { return cGroup_1; }

		//{multisets::NumberOf.subterm+=current}
		public Action getNumberOfSubtermAction_1_0() { return cNumberOfSubtermAction_1_0; }

		//"`"
		public Keyword getGraveAccentKeyword_1_1() { return cGraveAccentKeyword_1_1; }

		//subterm+=Term7
		public Assignment getSubtermAssignment_1_2() { return cSubtermAssignment_1_2; }

		//Term7
		public RuleCall getSubtermTerm7ParserRuleCall_1_2_0() { return cSubtermTerm7ParserRuleCall_1_2_0; }
	}

	public class Term7Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term7");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerm8ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cAdditionSubtermAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cSubtermAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cSubtermTerm8ParserRuleCall_1_0_2_0 = (RuleCall)cSubtermAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cSubtractionSubtermAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cSubtermAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cSubtermTerm8ParserRuleCall_1_1_2_0 = (RuleCall)cSubtermAssignment_1_1_2.eContents().get(0);
		
		//Term7 returns terms::Term:
		//
		//	Term8 ({integers::Addition.subterm+=current} "+" subterm+=Term8 | {integers::Subtraction.subterm+=current} "-"
		//
		//	subterm+=Term8)*;
		public ParserRule getRule() { return rule; }

		//Term8 ({integers::Addition.subterm+=current} "+" subterm+=Term8 | {integers::Subtraction.subterm+=current} "-"
		//
		//subterm+=Term8)*
		public Group getGroup() { return cGroup; }

		//Term8
		public RuleCall getTerm8ParserRuleCall_0() { return cTerm8ParserRuleCall_0; }

		//({integers::Addition.subterm+=current} "+" subterm+=Term8 | {integers::Subtraction.subterm+=current} "-"
		//
		//subterm+=Term8)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{integers::Addition.subterm+=current} "+" subterm+=Term8
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{integers::Addition.subterm+=current}
		public Action getAdditionSubtermAction_1_0_0() { return cAdditionSubtermAction_1_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_1() { return cPlusSignKeyword_1_0_1; }

		//subterm+=Term8
		public Assignment getSubtermAssignment_1_0_2() { return cSubtermAssignment_1_0_2; }

		//Term8
		public RuleCall getSubtermTerm8ParserRuleCall_1_0_2_0() { return cSubtermTerm8ParserRuleCall_1_0_2_0; }

		//{integers::Subtraction.subterm+=current} "-" subterm+=Term8
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{integers::Subtraction.subterm+=current}
		public Action getSubtractionSubtermAction_1_1_0() { return cSubtractionSubtermAction_1_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_1_1() { return cHyphenMinusKeyword_1_1_1; }

		//subterm+=Term8
		public Assignment getSubtermAssignment_1_1_2() { return cSubtermAssignment_1_1_2; }

		//Term8
		public RuleCall getSubtermTerm8ParserRuleCall_1_1_2_0() { return cSubtermTerm8ParserRuleCall_1_1_2_0; }
	}

	public class Term8Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term8");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerm9ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cMultiplicationSubtermAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cSubtermAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cSubtermTerm9ParserRuleCall_1_0_2_0 = (RuleCall)cSubtermAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cScalarProductSubtermAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cSubtermAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cSubtermTerm9ParserRuleCall_1_1_2_0 = (RuleCall)cSubtermAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cDivisionSubtermAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cSolidusKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cSubtermAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cSubtermTerm9ParserRuleCall_1_2_2_0 = (RuleCall)cSubtermAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Action cModuloSubtermAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Keyword cPercentSignKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cSubtermAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cSubtermTerm9ParserRuleCall_1_3_2_0 = (RuleCall)cSubtermAssignment_1_3_2.eContents().get(0);
		
		//Term8 returns terms::Term:
		//
		//	Term9 ({integers::Multiplication.subterm+=current} "*" subterm+=Term9 | {multisets::ScalarProduct.subterm+=current}
		//
		//	"**" subterm+=Term9 | {integers::Division.subterm+=current} "/" subterm+=Term9 | {integers::Modulo.subterm+=current}
		//
		//	"%" subterm+=Term9)*;
		public ParserRule getRule() { return rule; }

		//Term9 ({integers::Multiplication.subterm+=current} "*" subterm+=Term9 | {multisets::ScalarProduct.subterm+=current} "**"
		//
		//subterm+=Term9 | {integers::Division.subterm+=current} "/" subterm+=Term9 | {integers::Modulo.subterm+=current} "%"
		//
		//subterm+=Term9)*
		public Group getGroup() { return cGroup; }

		//Term9
		public RuleCall getTerm9ParserRuleCall_0() { return cTerm9ParserRuleCall_0; }

		//({integers::Multiplication.subterm+=current} "*" subterm+=Term9 | {multisets::ScalarProduct.subterm+=current} "**"
		//
		//subterm+=Term9 | {integers::Division.subterm+=current} "/" subterm+=Term9 | {integers::Modulo.subterm+=current} "%"
		//
		//subterm+=Term9)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{integers::Multiplication.subterm+=current} "*" subterm+=Term9
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{integers::Multiplication.subterm+=current}
		public Action getMultiplicationSubtermAction_1_0_0() { return cMultiplicationSubtermAction_1_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_1() { return cAsteriskKeyword_1_0_1; }

		//subterm+=Term9
		public Assignment getSubtermAssignment_1_0_2() { return cSubtermAssignment_1_0_2; }

		//Term9
		public RuleCall getSubtermTerm9ParserRuleCall_1_0_2_0() { return cSubtermTerm9ParserRuleCall_1_0_2_0; }

		//{multisets::ScalarProduct.subterm+=current} "**" subterm+=Term9
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{multisets::ScalarProduct.subterm+=current}
		public Action getScalarProductSubtermAction_1_1_0() { return cScalarProductSubtermAction_1_1_0; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_1_1_1() { return cAsteriskAsteriskKeyword_1_1_1; }

		//subterm+=Term9
		public Assignment getSubtermAssignment_1_1_2() { return cSubtermAssignment_1_1_2; }

		//Term9
		public RuleCall getSubtermTerm9ParserRuleCall_1_1_2_0() { return cSubtermTerm9ParserRuleCall_1_1_2_0; }

		//{integers::Division.subterm+=current} "/" subterm+=Term9
		public Group getGroup_1_2() { return cGroup_1_2; }

		//{integers::Division.subterm+=current}
		public Action getDivisionSubtermAction_1_2_0() { return cDivisionSubtermAction_1_2_0; }

		//"/"
		public Keyword getSolidusKeyword_1_2_1() { return cSolidusKeyword_1_2_1; }

		//subterm+=Term9
		public Assignment getSubtermAssignment_1_2_2() { return cSubtermAssignment_1_2_2; }

		//Term9
		public RuleCall getSubtermTerm9ParserRuleCall_1_2_2_0() { return cSubtermTerm9ParserRuleCall_1_2_2_0; }

		//{integers::Modulo.subterm+=current} "%" subterm+=Term9
		public Group getGroup_1_3() { return cGroup_1_3; }

		//{integers::Modulo.subterm+=current}
		public Action getModuloSubtermAction_1_3_0() { return cModuloSubtermAction_1_3_0; }

		//"%"
		public Keyword getPercentSignKeyword_1_3_1() { return cPercentSignKeyword_1_3_1; }

		//subterm+=Term9
		public Assignment getSubtermAssignment_1_3_2() { return cSubtermAssignment_1_3_2; }

		//Term9
		public RuleCall getSubtermTerm9ParserRuleCall_1_3_2_0() { return cSubtermTerm9ParserRuleCall_1_3_2_0; }
	}

	public class Term9Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term9");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNotKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Action cNotAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Assignment cSubtermAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSubtermTerm9ParserRuleCall_0_2_0 = (RuleCall)cSubtermAssignment_0_2.eContents().get(0);
		private final RuleCall cTerm10ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Term9 returns terms::Term:
		//
		//	"not" {booleans::Not} subterm+=Term9 | Term10;
		public ParserRule getRule() { return rule; }

		//"not" {booleans::Not} subterm+=Term9 | Term10
		public Alternatives getAlternatives() { return cAlternatives; }

		//"not" {booleans::Not} subterm+=Term9
		public Group getGroup_0() { return cGroup_0; }

		//"not"
		public Keyword getNotKeyword_0_0() { return cNotKeyword_0_0; }

		//{booleans::Not}
		public Action getNotAction_0_1() { return cNotAction_0_1; }

		//subterm+=Term9
		public Assignment getSubtermAssignment_0_2() { return cSubtermAssignment_0_2; }

		//Term9
		public RuleCall getSubtermTerm9ParserRuleCall_0_2_0() { return cSubtermTerm9ParserRuleCall_0_2_0; }

		//Term10
		public RuleCall getTerm10ParserRuleCall_1() { return cTerm10ParserRuleCall_1; }
	}

	public class Term10Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term10");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUserOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOtherBuiltInOperatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBuiltInConstParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cTermParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Alternatives cAlternatives_4_2 = (Alternatives)cGroup_4.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_4_2_0 = (Keyword)cAlternatives_4_2.eContents().get(0);
		private final Group cGroup_4_2_1 = (Group)cAlternatives_4_2.eContents().get(1);
		private final Keyword cCommaKeyword_4_2_1_0 = (Keyword)cGroup_4_2_1.eContents().get(0);
		private final Action cTupleSubtermAction_4_2_1_1 = (Action)cGroup_4_2_1.eContents().get(1);
		private final Assignment cSubtermAssignment_4_2_1_2 = (Assignment)cGroup_4_2_1.eContents().get(2);
		private final RuleCall cSubtermTermParserRuleCall_4_2_1_2_0 = (RuleCall)cSubtermAssignment_4_2_1_2.eContents().get(0);
		private final Group cGroup_4_2_1_3 = (Group)cGroup_4_2_1.eContents().get(3);
		private final Keyword cCommaKeyword_4_2_1_3_0 = (Keyword)cGroup_4_2_1_3.eContents().get(0);
		private final Assignment cSubtermAssignment_4_2_1_3_1 = (Assignment)cGroup_4_2_1_3.eContents().get(1);
		private final RuleCall cSubtermTermParserRuleCall_4_2_1_3_1_0 = (RuleCall)cSubtermAssignment_4_2_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2_1_4 = (Keyword)cGroup_4_2_1.eContents().get(4);
		
		//Term10 returns terms::Term:
		//
		//	Variable | UserOperator | OtherBuiltInOperator | BuiltInConst | "(" Term (")" | "," {terms::Tuple.subterm+=current}
		//
		//	subterm+=Term ("," subterm+=Term)* ")");
		public ParserRule getRule() { return rule; }

		//Variable | UserOperator | OtherBuiltInOperator | BuiltInConst | "(" Term (")" | "," {terms::Tuple.subterm+=current}
		//
		//subterm+=Term ("," subterm+=Term)* ")")
		public Alternatives getAlternatives() { return cAlternatives; }

		//Variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }

		//UserOperator
		public RuleCall getUserOperatorParserRuleCall_1() { return cUserOperatorParserRuleCall_1; }

		//OtherBuiltInOperator
		public RuleCall getOtherBuiltInOperatorParserRuleCall_2() { return cOtherBuiltInOperatorParserRuleCall_2; }

		//BuiltInConst
		public RuleCall getBuiltInConstParserRuleCall_3() { return cBuiltInConstParserRuleCall_3; }

		//"(" Term (")" | "," {terms::Tuple.subterm+=current} subterm+=Term ("," subterm+=Term)* ")")
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//Term
		public RuleCall getTermParserRuleCall_4_1() { return cTermParserRuleCall_4_1; }

		//")" | "," {terms::Tuple.subterm+=current} subterm+=Term ("," subterm+=Term)* ")"
		public Alternatives getAlternatives_4_2() { return cAlternatives_4_2; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2_0() { return cRightParenthesisKeyword_4_2_0; }

		//"," {terms::Tuple.subterm+=current} subterm+=Term ("," subterm+=Term)* ")"
		public Group getGroup_4_2_1() { return cGroup_4_2_1; }

		//","
		public Keyword getCommaKeyword_4_2_1_0() { return cCommaKeyword_4_2_1_0; }

		//{terms::Tuple.subterm+=current}
		public Action getTupleSubtermAction_4_2_1_1() { return cTupleSubtermAction_4_2_1_1; }

		//subterm+=Term
		public Assignment getSubtermAssignment_4_2_1_2() { return cSubtermAssignment_4_2_1_2; }

		//Term
		public RuleCall getSubtermTermParserRuleCall_4_2_1_2_0() { return cSubtermTermParserRuleCall_4_2_1_2_0; }

		//("," subterm+=Term)*
		public Group getGroup_4_2_1_3() { return cGroup_4_2_1_3; }

		//","
		public Keyword getCommaKeyword_4_2_1_3_0() { return cCommaKeyword_4_2_1_3_0; }

		//subterm+=Term
		public Assignment getSubtermAssignment_4_2_1_3_1() { return cSubtermAssignment_4_2_1_3_1; }

		//Term
		public RuleCall getSubtermTermParserRuleCall_4_2_1_3_1_0() { return cSubtermTermParserRuleCall_4_2_1_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2_1_4() { return cRightParenthesisKeyword_4_2_1_4; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Variable returns terms::Variable:
		//
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class UserOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UserOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cSubtermAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cSubtermTermParserRuleCall_2_0_0 = (RuleCall)cSubtermAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cSubtermAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cSubtermTermParserRuleCall_2_1_1_0 = (RuleCall)cSubtermAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UserOperator returns terms::UserOperator:
		//
		////    '$' {terms::UserOperator} name = ID '(' ( subterm += Term (',' subterm += Term )* )?  ')' ;
		// name=ID "("
		//
		//	(subterm+=Term ("," subterm+=Term)*)? ")";
		public ParserRule getRule() { return rule; }

		////    '$' {terms::UserOperator} name = ID '(' ( subterm += Term (',' subterm += Term )* )?  ')' ;
		// name=ID "("
		//
		//(subterm+=Term ("," subterm+=Term)*)? ")"
		public Group getGroup() { return cGroup; }

		////    '$' {terms::UserOperator} name = ID '(' ( subterm += Term (',' subterm += Term )* )?  ')' ;
		// name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(subterm+=Term ("," subterm+=Term)*)?
		public Group getGroup_2() { return cGroup_2; }

		//subterm+=Term
		public Assignment getSubtermAssignment_2_0() { return cSubtermAssignment_2_0; }

		//Term
		public RuleCall getSubtermTermParserRuleCall_2_0_0() { return cSubtermTermParserRuleCall_2_0_0; }

		//("," subterm+=Term)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//subterm+=Term
		public Assignment getSubtermAssignment_2_1_1() { return cSubtermAssignment_2_1_1; }

		//Term
		public RuleCall getSubtermTermParserRuleCall_2_1_1_0() { return cSubtermTermParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class OtherBuiltInOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OtherBuiltInOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cVerticalLineKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Action cCardinalityAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Assignment cSubtermAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSubtermTerm10ParserRuleCall_0_2_0 = (RuleCall)cSubtermAssignment_0_2.eContents().get(0);
		private final Keyword cVerticalLineKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cNumberSignLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cCardinalityOfAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cSubtermAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubtermTermParserRuleCall_1_2_0 = (RuleCall)cSubtermAssignment_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cSubtermAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cSubtermTermParserRuleCall_1_4_0 = (RuleCall)cSubtermAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final RuleCall cCyclicEnumsBuiltInOperatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPartitionsBuiltInOperatorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringsBuiltInOperatorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cListsBuiltInOperatorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//OtherBuiltInOperator returns terms::Term:
		//
		//	"|" {multisets::Cardinality} subterm+=Term10 "|" | "#(" {multisets::CardinalityOf} subterm+=Term "," subterm+=Term
		//
		//	")" | CyclicEnumsBuiltInOperator | PartitionsBuiltInOperator | StringsBuiltInOperator | ListsBuiltInOperator;
		public ParserRule getRule() { return rule; }

		//"|" {multisets::Cardinality} subterm+=Term10 "|" | "#(" {multisets::CardinalityOf} subterm+=Term "," subterm+=Term ")" |
		//
		//CyclicEnumsBuiltInOperator | PartitionsBuiltInOperator | StringsBuiltInOperator | ListsBuiltInOperator
		public Alternatives getAlternatives() { return cAlternatives; }

		//"|" {multisets::Cardinality} subterm+=Term10 "|"
		public Group getGroup_0() { return cGroup_0; }

		//"|"
		public Keyword getVerticalLineKeyword_0_0() { return cVerticalLineKeyword_0_0; }

		//{multisets::Cardinality}
		public Action getCardinalityAction_0_1() { return cCardinalityAction_0_1; }

		//subterm+=Term10
		public Assignment getSubtermAssignment_0_2() { return cSubtermAssignment_0_2; }

		//Term10
		public RuleCall getSubtermTerm10ParserRuleCall_0_2_0() { return cSubtermTerm10ParserRuleCall_0_2_0; }

		//"|"
		public Keyword getVerticalLineKeyword_0_3() { return cVerticalLineKeyword_0_3; }

		//"#(" {multisets::CardinalityOf} subterm+=Term "," subterm+=Term ")"
		public Group getGroup_1() { return cGroup_1; }

		//"#("
		public Keyword getNumberSignLeftParenthesisKeyword_1_0() { return cNumberSignLeftParenthesisKeyword_1_0; }

		//{multisets::CardinalityOf}
		public Action getCardinalityOfAction_1_1() { return cCardinalityOfAction_1_1; }

		//subterm+=Term
		public Assignment getSubtermAssignment_1_2() { return cSubtermAssignment_1_2; }

		//Term
		public RuleCall getSubtermTermParserRuleCall_1_2_0() { return cSubtermTermParserRuleCall_1_2_0; }

		//","
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }

		//subterm+=Term
		public Assignment getSubtermAssignment_1_4() { return cSubtermAssignment_1_4; }

		//Term
		public RuleCall getSubtermTermParserRuleCall_1_4_0() { return cSubtermTermParserRuleCall_1_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }

		//CyclicEnumsBuiltInOperator
		public RuleCall getCyclicEnumsBuiltInOperatorParserRuleCall_2() { return cCyclicEnumsBuiltInOperatorParserRuleCall_2; }

		//PartitionsBuiltInOperator
		public RuleCall getPartitionsBuiltInOperatorParserRuleCall_3() { return cPartitionsBuiltInOperatorParserRuleCall_3; }

		//StringsBuiltInOperator
		public RuleCall getStringsBuiltInOperatorParserRuleCall_4() { return cStringsBuiltInOperatorParserRuleCall_4; }

		//ListsBuiltInOperator
		public RuleCall getListsBuiltInOperatorParserRuleCall_5() { return cListsBuiltInOperatorParserRuleCall_5; }
	}

	public class BuiltInSortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltInSort");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDotParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumberParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFiniteEnumerationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCyclicEnumerationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFiniteIntRangeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cStringSortParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cListSortParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		/// * -------------------------------------------------------------
		// * Dispatch for concrete syntax for BuiltInSort
		// * ------------------------------------------------------------- * /
		//
		//BuiltInSort returns terms::BuiltInSort:
		//
		//	Dot | Boolean | Number | FiniteEnumeration | CyclicEnumeration | FiniteIntRange | StringSort | ListSort;
		public ParserRule getRule() { return rule; }

		//Dot | Boolean | Number | FiniteEnumeration | CyclicEnumeration | FiniteIntRange | StringSort | ListSort
		public Alternatives getAlternatives() { return cAlternatives; }

		//Dot
		public RuleCall getDotParserRuleCall_0() { return cDotParserRuleCall_0; }

		//Boolean
		public RuleCall getBooleanParserRuleCall_1() { return cBooleanParserRuleCall_1; }

		//Number
		public RuleCall getNumberParserRuleCall_2() { return cNumberParserRuleCall_2; }

		//FiniteEnumeration
		public RuleCall getFiniteEnumerationParserRuleCall_3() { return cFiniteEnumerationParserRuleCall_3; }

		//CyclicEnumeration
		public RuleCall getCyclicEnumerationParserRuleCall_4() { return cCyclicEnumerationParserRuleCall_4; }

		//FiniteIntRange
		public RuleCall getFiniteIntRangeParserRuleCall_5() { return cFiniteIntRangeParserRuleCall_5; }

		//StringSort
		public RuleCall getStringSortParserRuleCall_6() { return cStringSortParserRuleCall_6; }

		//ListSort
		public RuleCall getListSortParserRuleCall_7() { return cListSortParserRuleCall_7; }
	}

	public class BuiltInConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltInConst");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDotConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMultisetConstantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNumberConstantParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFiniteIntRangeConstantParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStringConstantParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cListConstantParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//BuiltInConst returns terms::Term:
		//
		//	DotConstant | BooleanConstant | MultisetConstant | NumberConstant | FiniteIntRangeConstant | StringConstant |
		//
		//	ListConstant;
		public ParserRule getRule() { return rule; }

		//DotConstant | BooleanConstant | MultisetConstant | NumberConstant | FiniteIntRangeConstant | StringConstant |
		//
		//ListConstant
		public Alternatives getAlternatives() { return cAlternatives; }

		//DotConstant
		public RuleCall getDotConstantParserRuleCall_0() { return cDotConstantParserRuleCall_0; }

		//BooleanConstant
		public RuleCall getBooleanConstantParserRuleCall_1() { return cBooleanConstantParserRuleCall_1; }

		//MultisetConstant
		public RuleCall getMultisetConstantParserRuleCall_2() { return cMultisetConstantParserRuleCall_2; }

		//NumberConstant
		public RuleCall getNumberConstantParserRuleCall_3() { return cNumberConstantParserRuleCall_3; }

		//FiniteIntRangeConstant
		public RuleCall getFiniteIntRangeConstantParserRuleCall_4() { return cFiniteIntRangeConstantParserRuleCall_4; }

		//StringConstant
		public RuleCall getStringConstantParserRuleCall_5() { return cStringConstantParserRuleCall_5; }

		//ListConstant
		public RuleCall getListConstantParserRuleCall_6() { return cListConstantParserRuleCall_6; }
	}

	public class MultisetConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultisetConstant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cAllKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Action cAllAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cRefsortAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cRefsortSortParserRuleCall_0_3_0 = (RuleCall)cRefsortAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cEmptyKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cEmptyAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRefsortAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRefsortSortParserRuleCall_1_3_0 = (RuleCall)cRefsortAssignment_1_3.eContents().get(0);
		
		/// * -------------------------------------------------------------
		// * Concrete syntax for package multisets
		// * ------------------------------------------------------------- * /
		//
		//// Technically, All is an operator. But in the concrete syntax, I
		// // made it a constant. 
		// MultisetConstant returns
		//
		//terms::MultiSetOperator:
		//
		//	"all" {multisets::All} ":" refsort=Sort | "empty" {multisets::Empty} ":" refsort=Sort;
		public ParserRule getRule() { return rule; }

		//"all" {multisets::All} ":" refsort=Sort | "empty" {multisets::Empty} ":" refsort=Sort
		public Alternatives getAlternatives() { return cAlternatives; }

		//"all" {multisets::All} ":" refsort=Sort
		public Group getGroup_0() { return cGroup_0; }

		//"all"
		public Keyword getAllKeyword_0_0() { return cAllKeyword_0_0; }

		//{multisets::All}
		public Action getAllAction_0_1() { return cAllAction_0_1; }

		//":"
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }

		//refsort=Sort
		public Assignment getRefsortAssignment_0_3() { return cRefsortAssignment_0_3; }

		//Sort
		public RuleCall getRefsortSortParserRuleCall_0_3_0() { return cRefsortSortParserRuleCall_0_3_0; }

		//"empty" {multisets::Empty} ":" refsort=Sort
		public Group getGroup_1() { return cGroup_1; }

		//"empty"
		public Keyword getEmptyKeyword_1_0() { return cEmptyKeyword_1_0; }

		//{multisets::Empty}
		public Action getEmptyAction_1_1() { return cEmptyAction_1_1; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//refsort=Sort
		public Assignment getRefsortAssignment_1_3() { return cRefsortAssignment_1_3; }

		//Sort
		public RuleCall getRefsortSortParserRuleCall_1_3_0() { return cRefsortSortParserRuleCall_1_3_0; }
	}

	public class DotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDOTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cDotAction_1 = (Action)cGroup.eContents().get(1);
		
		/// * -------------------------------------------------------------
		// * Concrete syntax for package dots
		// * ------------------------------------------------------------- * /
		//
		//Dot returns dots::Dot:
		//
		//	"DOT" {dots::Dot};
		public ParserRule getRule() { return rule; }

		//"DOT" {dots::Dot}
		public Group getGroup() { return cGroup; }

		//"DOT"
		public Keyword getDOTKeyword_0() { return cDOTKeyword_0; }

		//{dots::Dot}
		public Action getDotAction_1() { return cDotAction_1; }
	}

	public class DotConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DotConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cDotConstantAction_1 = (Action)cGroup.eContents().get(1);
		
		//DotConstant returns dots::DotConstant:
		//
		//	"dot" {dots::DotConstant};
		public ParserRule getRule() { return rule; }

		//"dot" {dots::DotConstant}
		public Group getGroup() { return cGroup; }

		//"dot"
		public Keyword getDotKeyword_0() { return cDotKeyword_0; }

		//{dots::DotConstant}
		public Action getDotConstantAction_1() { return cDotConstantAction_1; }
	}

	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBOOLKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cBoolAction_1 = (Action)cGroup.eContents().get(1);
		
		/// * -------------------------------------------------------------
		// * Concrete syntax for package boolean
		// * ------------------------------------------------------------- * /
		//
		//Boolean returns booleans::Bool:
		//
		//	"BOOL" {booleans::Bool};
		public ParserRule getRule() { return rule; }

		//"BOOL" {booleans::Bool}
		public Group getGroup() { return cGroup; }

		//"BOOL"
		public Keyword getBOOLKeyword_0() { return cBOOLKeyword_0; }

		//{booleans::Bool}
		public Action getBoolAction_1() { return cBoolAction_1; }
	}

	public class BooleanConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_0_0 = (Keyword)cValueAssignment_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//BooleanConstant returns booleans::BooleanConstant: //    value = BOOL;
		// {booleans::BooleanConstant} (value?="true" |
		//
		//	"false");
		public ParserRule getRule() { return rule; }

		////    value = BOOL;
		// {booleans::BooleanConstant} (value?="true" | "false")
		public Group getGroup() { return cGroup; }

		////    value = BOOL;
		// {booleans::BooleanConstant}
		public Action getBooleanConstantAction_0() { return cBooleanConstantAction_0; }

		//value?="true" | "false"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//value?="true"
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }

		//"true"
		public Keyword getValueTrueKeyword_1_0_0() { return cValueTrueKeyword_1_0_0; }

		//"false"
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cINTKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Action cIntegerAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cNATKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cNaturalAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cPOSKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Action cPositiveAction_2_1 = (Action)cGroup_2.eContents().get(1);
		
		//// terminal BOOL returns ecore::EBoolean :
		// //    'true' | 'false';      
		//
		//
		/// * -------------------------------------------------------------
		// * Concrete syntax for package integer
		// * ------------------------------------------------------------- * /
		//
		//Number returns integers::Number:
		//
		//	"INT" {integers::Integer} | "NAT" {integers::Natural} | "POS" {integers::Positive};
		public ParserRule getRule() { return rule; }

		//"INT" {integers::Integer} | "NAT" {integers::Natural} | "POS" {integers::Positive}
		public Alternatives getAlternatives() { return cAlternatives; }

		//"INT" {integers::Integer}
		public Group getGroup_0() { return cGroup_0; }

		//"INT"
		public Keyword getINTKeyword_0_0() { return cINTKeyword_0_0; }

		//{integers::Integer}
		public Action getIntegerAction_0_1() { return cIntegerAction_0_1; }

		//"NAT" {integers::Natural}
		public Group getGroup_1() { return cGroup_1; }

		//"NAT"
		public Keyword getNATKeyword_1_0() { return cNATKeyword_1_0; }

		//{integers::Natural}
		public Action getNaturalAction_1_1() { return cNaturalAction_1_1; }

		//"POS" {integers::Positive}
		public Group getGroup_2() { return cGroup_2; }

		//"POS"
		public Keyword getPOSKeyword_2_0() { return cPOSKeyword_2_0; }

		//{integers::Positive}
		public Action getPositiveAction_2_1() { return cPositiveAction_2_1; }
	}

	public class NumberConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumberConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTEGERParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeNumberParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		
		//NumberConstant returns integers::NumberConstant:
		//
		//	{integers::NumberConstant} value=INTEGER (":" type=Number)?;
		public ParserRule getRule() { return rule; }

		//{integers::NumberConstant} value=INTEGER (":" type=Number)?
		public Group getGroup() { return cGroup; }

		//{integers::NumberConstant}
		public Action getNumberConstantAction_0() { return cNumberConstantAction_0; }

		//value=INTEGER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INTEGER
		public RuleCall getValueINTEGERParserRuleCall_1_0() { return cValueINTEGERParserRuleCall_1_0; }

		//(":" type=Number)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//type=Number
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }

		//Number
		public RuleCall getTypeNumberParserRuleCall_2_1_0() { return cTypeNumberParserRuleCall_2_1_0; }
	}

	public class INTEGERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER");
		private final RuleCall cINTSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//INTEGER returns ecore::EInt:
		//
		//	INTSTRING;
		public ParserRule getRule() { return rule; }

		//INTSTRING
		public RuleCall getINTSTRINGTerminalRuleCall() { return cINTSTRINGTerminalRuleCall; }
	}

	public class NATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NAT");
		private final RuleCall cINTSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NAT returns pnmldatatypes::NonNegativeInteger: // Note that negative values are impossible, due
		//
		//
		//// to a value converter for this rule.
		// INTSTRING;
		public ParserRule getRule() { return rule; }

		//// Note that negative values are impossible, due
		// // to a value converter for this rule.
		// INTSTRING
		public RuleCall getINTSTRINGTerminalRuleCall() { return cINTSTRINGTerminalRuleCall; }
	}

	public class FiniteEnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FiniteEnumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsFEConstantParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementsFEConstantParserRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// * -------------------------------------------------------------
		// * Concrete syntax for package finite enumerations
		// * ------------------------------------------------------------- * /
		//
		//FiniteEnumeration returns finiteenums::FiniteEnumeration:
		//
		//	"enum" "{" elements+=FEConstant ("," elements+=FEConstant)* "}";
		public ParserRule getRule() { return rule; }

		//"enum" "{" elements+=FEConstant ("," elements+=FEConstant)* "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//elements+=FEConstant
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//FEConstant
		public RuleCall getElementsFEConstantParserRuleCall_2_0() { return cElementsFEConstantParserRuleCall_2_0; }

		//("," elements+=FEConstant)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//elements+=FEConstant
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }

		//FEConstant
		public RuleCall getElementsFEConstantParserRuleCall_3_1_0() { return cElementsFEConstantParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class FEConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FEConstant");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//FEConstant returns finiteenums::FEConstant:
		//
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class CyclicEnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CyclicEnumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCyclicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsFEConstantParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementsFEConstantParserRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// * -------------------------------------------------------------
		// * Concrete syntax for package cyclic enumerations
		// * ------------------------------------------------------------- * /
		//
		//CyclicEnumeration returns cyclicenums::CyclicEnumeration:
		//
		//	"cyclic" "{" elements+=FEConstant ("," elements+=FEConstant)* "}";
		public ParserRule getRule() { return rule; }

		//"cyclic" "{" elements+=FEConstant ("," elements+=FEConstant)* "}"
		public Group getGroup() { return cGroup; }

		//"cyclic"
		public Keyword getCyclicKeyword_0() { return cCyclicKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//elements+=FEConstant
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//FEConstant
		public RuleCall getElementsFEConstantParserRuleCall_2_0() { return cElementsFEConstantParserRuleCall_2_0; }

		//("," elements+=FEConstant)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//elements+=FEConstant
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }

		//FEConstant
		public RuleCall getElementsFEConstantParserRuleCall_3_1_0() { return cElementsFEConstantParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class CyclicEnumsBuiltInOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CyclicEnumsBuiltInOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSuccKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Action cSuccessorAction_0_2 = (Action)cGroup_0.eContents().get(2);
		private final Assignment cSubtermAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cSubtermTermParserRuleCall_0_3_0 = (RuleCall)cSubtermAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cPredKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Action cPredecessorAction_1_2 = (Action)cGroup_1.eContents().get(2);
		private final Assignment cSubtermAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cSubtermTermParserRuleCall_1_3_0 = (RuleCall)cSubtermAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//CyclicEnumsBuiltInOperator returns terms::Term:
		//
		//	"succ" "(" {cyclicenums::Successor} subterm+=Term ")" | "pred" "(" {cyclicenums::Predecessor} subterm+=Term ")";
		public ParserRule getRule() { return rule; }

		//"succ" "(" {cyclicenums::Successor} subterm+=Term ")" | "pred" "(" {cyclicenums::Predecessor} subterm+=Term ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"succ" "(" {cyclicenums::Successor} subterm+=Term ")"
		public Group getGroup_0() { return cGroup_0; }

		//"succ"
		public Keyword getSuccKeyword_0_0() { return cSuccKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }

		//{cyclicenums::Successor}
		public Action getSuccessorAction_0_2() { return cSuccessorAction_0_2; }

		//subterm+=Term
		public Assignment getSubtermAssignment_0_3() { return cSubtermAssignment_0_3; }

		//Term
		public RuleCall getSubtermTermParserRuleCall_0_3_0() { return cSubtermTermParserRuleCall_0_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }

		//"pred" "(" {cyclicenums::Predecessor} subterm+=Term ")"
		public Group getGroup_1() { return cGroup_1; }

		//"pred"
		public Keyword getPredKeyword_1_0() { return cPredKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//{cyclicenums::Predecessor}
		public Action getPredecessorAction_1_2() { return cPredecessorAction_1_2; }

		//subterm+=Term
		public Assignment getSubtermAssignment_1_3() { return cSubtermAssignment_1_3; }

		//Term
		public RuleCall getSubtermTermParserRuleCall_1_3_0() { return cSubtermTermParserRuleCall_1_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}

	public class FiniteIntRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FiniteIntRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartINTEGERParserRuleCall_1_0 = (RuleCall)cStartAssignment_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEndAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEndINTEGERParserRuleCall_3_0 = (RuleCall)cEndAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// * -------------------------------------------------------------
		// * Concrete syntax for package finite int ranges
		// * ------------------------------------------------------------- * /
		//
		//FiniteIntRange returns finiteintranges::FiniteIntRange:
		//
		//	"[" start=INTEGER ".." end=INTEGER "]";
		public ParserRule getRule() { return rule; }

		//"[" start=INTEGER ".." end=INTEGER "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//start=INTEGER
		public Assignment getStartAssignment_1() { return cStartAssignment_1; }

		//INTEGER
		public RuleCall getStartINTEGERParserRuleCall_1_0() { return cStartINTEGERParserRuleCall_1_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_2() { return cFullStopFullStopKeyword_2; }

		//end=INTEGER
		public Assignment getEndAssignment_3() { return cEndAssignment_3; }

		//INTEGER
		public RuleCall getEndINTEGERParserRuleCall_3_0() { return cEndINTEGERParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class FiniteIntRangeConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FiniteIntRangeConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTEGERParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cRangeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRangeFiniteIntRangeParserRuleCall_1_0 = (RuleCall)cRangeAssignment_1.eContents().get(0);
		
		//FiniteIntRangeConstant returns finiteintranges::FiniteIntConstant:
		//
		//	value=INTEGER range=FiniteIntRange;
		public ParserRule getRule() { return rule; }

		//value=INTEGER range=FiniteIntRange
		public Group getGroup() { return cGroup; }

		//value=INTEGER
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//INTEGER
		public RuleCall getValueINTEGERParserRuleCall_0_0() { return cValueINTEGERParserRuleCall_0_0; }

		//range=FiniteIntRange
		public Assignment getRangeAssignment_1() { return cRangeAssignment_1; }

		//FiniteIntRange
		public RuleCall getRangeFiniteIntRangeParserRuleCall_1_0() { return cRangeFiniteIntRangeParserRuleCall_1_0; }
	}

	public class PartitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Partition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPartitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefSortParserRuleCall_1_0 = (RuleCall)cDefAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPartitionElementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPartitionElementsPartitionElementParserRuleCall_5_0 = (RuleCall)cPartitionElementsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPartitionElementsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPartitionElementsPartitionElementParserRuleCall_6_1_0 = (RuleCall)cPartitionElementsAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		/// * -------------------------------------------------------------
		// * Concrete syntax for package partitions
		// * ------------------------------------------------------------- * /
		//
		//Partition returns partitions::Partition:
		//
		//	"partition" def=Sort "in" name=ID "{" partitionElements+=PartitionElement (";" partitionElements+=PartitionElement)*
		//
		//	"}";
		public ParserRule getRule() { return rule; }

		//"partition" def=Sort "in" name=ID "{" partitionElements+=PartitionElement (";" partitionElements+=PartitionElement)* "}"
		public Group getGroup() { return cGroup; }

		//"partition"
		public Keyword getPartitionKeyword_0() { return cPartitionKeyword_0; }

		//def=Sort
		public Assignment getDefAssignment_1() { return cDefAssignment_1; }

		//Sort
		public RuleCall getDefSortParserRuleCall_1_0() { return cDefSortParserRuleCall_1_0; }

		//"in"
		public Keyword getInKeyword_2() { return cInKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//partitionElements+=PartitionElement
		public Assignment getPartitionElementsAssignment_5() { return cPartitionElementsAssignment_5; }

		//PartitionElement
		public RuleCall getPartitionElementsPartitionElementParserRuleCall_5_0() { return cPartitionElementsPartitionElementParserRuleCall_5_0; }

		//(";" partitionElements+=PartitionElement)*
		public Group getGroup_6() { return cGroup_6; }

		//";"
		public Keyword getSemicolonKeyword_6_0() { return cSemicolonKeyword_6_0; }

		//partitionElements+=PartitionElement
		public Assignment getPartitionElementsAssignment_6_1() { return cPartitionElementsAssignment_6_1; }

		//PartitionElement
		public RuleCall getPartitionElementsPartitionElementParserRuleCall_6_1_0() { return cPartitionElementsPartitionElementParserRuleCall_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class PartitionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PartitionElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPartitionelementconstantAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPartitionelementconstantTermParserRuleCall_2_0 = (RuleCall)cPartitionelementconstantAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPartitionelementconstantAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPartitionelementconstantTermParserRuleCall_3_1_0 = (RuleCall)cPartitionelementconstantAssignment_3_1.eContents().get(0);
		
		//PartitionElement returns partitions::PartitionElement:
		//
		//	name=ID ":" partitionelementconstant+=Term ("," partitionelementconstant+=Term)*;
		public ParserRule getRule() { return rule; }

		//name=ID ":" partitionelementconstant+=Term ("," partitionelementconstant+=Term)*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//partitionelementconstant+=Term
		public Assignment getPartitionelementconstantAssignment_2() { return cPartitionelementconstantAssignment_2; }

		//Term
		public RuleCall getPartitionelementconstantTermParserRuleCall_2_0() { return cPartitionelementconstantTermParserRuleCall_2_0; }

		//("," partitionelementconstant+=Term)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//partitionelementconstant+=Term
		public Assignment getPartitionelementconstantAssignment_3_1() { return cPartitionelementconstantAssignment_3_1; }

		//Term
		public RuleCall getPartitionelementconstantTermParserRuleCall_3_1_0() { return cPartitionelementconstantTermParserRuleCall_3_1_0; }
	}

	public class PartitionsBuiltInOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PartitionsBuiltInOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPartitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Action cPartitionElementOfAction_2 = (Action)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSubtermAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSubtermTermParserRuleCall_5_0 = (RuleCall)cSubtermAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PartitionsBuiltInOperator returns terms::Term:
		//
		//	"partition" ":" {partitions::PartitionElementOf} name=ID "(" subterm+=Term ")";
		public ParserRule getRule() { return rule; }

		//"partition" ":" {partitions::PartitionElementOf} name=ID "(" subterm+=Term ")"
		public Group getGroup() { return cGroup; }

		//"partition"
		public Keyword getPartitionKeyword_0() { return cPartitionKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//{partitions::PartitionElementOf}
		public Action getPartitionElementOfAction_2() { return cPartitionElementOfAction_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//subterm+=Term
		public Assignment getSubtermAssignment_5() { return cSubtermAssignment_5; }

		//Term
		public RuleCall getSubtermTermParserRuleCall_5_0() { return cSubtermTermParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class StringSortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringSort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTRINGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cStringAction_1 = (Action)cGroup.eContents().get(1);
		
		/// * -------------------------------------------------------------
		// * Concrete syntax for package strings
		// * ------------------------------------------------------------- * /
		//
		//StringSort returns strings::String:
		//
		//	"STRING" {strings::String};
		public ParserRule getRule() { return rule; }

		//"STRING" {strings::String}
		public Group getGroup() { return cGroup; }

		//"STRING"
		public Keyword getSTRINGKeyword_0() { return cSTRINGKeyword_0; }

		//{strings::String}
		public Action getStringAction_1() { return cStringAction_1; }
	}

	public class StringsBuiltInOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringsBuiltInOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cConcatstringKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Action cConcatenationAction_0_2 = (Action)cGroup_0.eContents().get(2);
		private final Assignment cSubtermAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cSubtermTermParserRuleCall_0_3_0 = (RuleCall)cSubtermAssignment_0_3.eContents().get(0);
		private final Keyword cCommaKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cSubtermAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cSubtermTermParserRuleCall_0_5_0 = (RuleCall)cSubtermAssignment_0_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cStringlengthKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Action cLengthAction_1_2 = (Action)cGroup_1.eContents().get(2);
		private final Assignment cSubtermAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cSubtermTermParserRuleCall_1_3_0 = (RuleCall)cSubtermAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cSubstringKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Action cSubstringAction_2_1 = (Action)cGroup_2.eContents().get(1);
		private final Keyword cColonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cStartAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cStartNATParserRuleCall_2_3_0 = (RuleCall)cStartAssignment_2_3.eContents().get(0);
		private final Keyword cCommaKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cLengthAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cLengthNATParserRuleCall_2_5_0 = (RuleCall)cLengthAssignment_2_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final Assignment cSubtermAssignment_2_7 = (Assignment)cGroup_2.eContents().get(7);
		private final RuleCall cSubtermTermParserRuleCall_2_7_0 = (RuleCall)cSubtermAssignment_2_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_8 = (Keyword)cGroup_2.eContents().get(8);
		
		//StringsBuiltInOperator returns strings::StringOperator:
		//
		//	"concatstring" "(" {strings::Concatenation} subterm+=Term "," subterm+=Term ")"
		//
		//	// note that we do not have append (does not make sense)
		// | "stringlength" "(" {strings::Length} subterm+=Term ")" |
		//
		//	"substring" {strings::Substring} ":" start=NAT "," length=NAT "(" subterm+=Term ")";
		public ParserRule getRule() { return rule; }

		//"concatstring" "(" {strings::Concatenation} subterm+=Term "," subterm+=Term ")"
		//
		//// note that we do not have append (does not make sense)
		// | "stringlength" "(" {strings::Length} subterm+=Term ")" |
		//
		//"substring" {strings::Substring} ":" start=NAT "," length=NAT "(" subterm+=Term ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"concatstring" "(" {strings::Concatenation} subterm+=Term "," subterm+=Term ")"
		public Group getGroup_0() { return cGroup_0; }

		//"concatstring"
		public Keyword getConcatstringKeyword_0_0() { return cConcatstringKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }

		//{strings::Concatenation}
		public Action getConcatenationAction_0_2() { return cConcatenationAction_0_2; }

		//subterm+=Term
		public Assignment getSubtermAssignment_0_3() { return cSubtermAssignment_0_3; }

		//Term
		public RuleCall getSubtermTermParserRuleCall_0_3_0() { return cSubtermTermParserRuleCall_0_3_0; }

		//","
		public Keyword getCommaKeyword_0_4() { return cCommaKeyword_0_4; }

		//subterm+=Term
		public Assignment getSubtermAssignment_0_5() { return cSubtermAssignment_0_5; }

		//Term
		public RuleCall getSubtermTermParserRuleCall_0_5_0() { return cSubtermTermParserRuleCall_0_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_6() { return cRightParenthesisKeyword_0_6; }

		//"stringlength" "(" {strings::Length} subterm+=Term ")"
		public Group getGroup_1() { return cGroup_1; }

		//"stringlength"
		public Keyword getStringlengthKeyword_1_0() { return cStringlengthKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//{strings::Length}
		public Action getLengthAction_1_2() { return cLengthAction_1_2; }

		//subterm+=Term
		public Assignment getSubtermAssignment_1_3() { return cSubtermAssignment_1_3; }

		//Term
		public RuleCall getSubtermTermParserRuleCall_1_3_0() { return cSubtermTermParserRuleCall_1_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }

		//"substring" {strings::Substring} ":" start=NAT "," length=NAT "(" subterm+=Term ")"
		public Group getGroup_2() { return cGroup_2; }

		//"substring"
		public Keyword getSubstringKeyword_2_0() { return cSubstringKeyword_2_0; }

		//{strings::Substring}
		public Action getSubstringAction_2_1() { return cSubstringAction_2_1; }

		//":"
		public Keyword getColonKeyword_2_2() { return cColonKeyword_2_2; }

		//start=NAT
		public Assignment getStartAssignment_2_3() { return cStartAssignment_2_3; }

		//NAT
		public RuleCall getStartNATParserRuleCall_2_3_0() { return cStartNATParserRuleCall_2_3_0; }

		//","
		public Keyword getCommaKeyword_2_4() { return cCommaKeyword_2_4; }

		//length=NAT
		public Assignment getLengthAssignment_2_5() { return cLengthAssignment_2_5; }

		//NAT
		public RuleCall getLengthNATParserRuleCall_2_5_0() { return cLengthNATParserRuleCall_2_5_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_6() { return cLeftParenthesisKeyword_2_6; }

		//subterm+=Term
		public Assignment getSubtermAssignment_2_7() { return cSubtermAssignment_2_7; }

		//Term
		public RuleCall getSubtermTermParserRuleCall_2_7_0() { return cSubtermTermParserRuleCall_2_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_8() { return cRightParenthesisKeyword_2_8; }
	}

	public class StringConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringConstant");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringConstant returns strings::StringConstant:
		//
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class ListSortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListSort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLISTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBasisAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBasisSortParserRuleCall_2_0 = (RuleCall)cBasisAssignment_2.eContents().get(0);
		
		/// * -------------------------------------------------------------
		// * Concrete syntax for package lists
		// * ------------------------------------------------------------- * /
		//
		//ListSort returns lists::List:
		//
		//	"LIST" ":" basis=Sort;
		public ParserRule getRule() { return rule; }

		//"LIST" ":" basis=Sort
		public Group getGroup() { return cGroup; }

		//"LIST"
		public Keyword getLISTKeyword_0() { return cLISTKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//basis=Sort
		public Assignment getBasisAssignment_2() { return cBasisAssignment_2; }

		//Sort
		public RuleCall getBasisSortParserRuleCall_2_0() { return cBasisSortParserRuleCall_2_0; }
	}

	public class ListsBuiltInOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListsBuiltInOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cConcatlistsKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Action cConcatenationAction_0_2 = (Action)cGroup_0.eContents().get(2);
		private final Assignment cSubtermAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cSubtermTermParserRuleCall_0_3_0 = (RuleCall)cSubtermAssignment_0_3.eContents().get(0);
		private final Keyword cCommaKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cSubtermAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cSubtermTermParserRuleCall_0_5_0 = (RuleCall)cSubtermAssignment_0_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAppendtolistKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Action cAppendAction_1_2 = (Action)cGroup_1.eContents().get(2);
		private final Assignment cSubtermAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cSubtermTermParserRuleCall_1_3_0 = (RuleCall)cSubtermAssignment_1_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cSubtermAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cSubtermTermParserRuleCall_1_5_0 = (RuleCall)cSubtermAssignment_1_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cListlengthKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Action cLengthAction_2_2 = (Action)cGroup_2.eContents().get(2);
		private final Assignment cSubtermAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cSubtermTermParserRuleCall_2_3_0 = (RuleCall)cSubtermAssignment_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cSublistKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Action cSublistAction_3_2 = (Action)cGroup_3.eContents().get(2);
		private final Assignment cStartAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cStartNATParserRuleCall_3_3_0 = (RuleCall)cStartAssignment_3_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cLengthAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cLengthNATParserRuleCall_3_5_0 = (RuleCall)cLengthAssignment_3_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Assignment cSubtermAssignment_3_7 = (Assignment)cGroup_3.eContents().get(7);
		private final RuleCall cSubtermTermParserRuleCall_3_7_0 = (RuleCall)cSubtermAssignment_3_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_8 = (Keyword)cGroup_3.eContents().get(8);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cMemberatKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Action cMemberAtIndexAction_4_2 = (Action)cGroup_4.eContents().get(2);
		private final Assignment cIndexAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cIndexNATParserRuleCall_4_3_0 = (RuleCall)cIndexAssignment_4_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Assignment cSubtermAssignment_4_5 = (Assignment)cGroup_4.eContents().get(5);
		private final RuleCall cSubtermTermParserRuleCall_4_5_0 = (RuleCall)cSubtermAssignment_4_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_6 = (Keyword)cGroup_4.eContents().get(6);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cMakelistKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Action cMakeListAction_5_2 = (Action)cGroup_5.eContents().get(2);
		private final Assignment cRefsortAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cRefsortSortParserRuleCall_5_3_0 = (RuleCall)cRefsortAssignment_5_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_5_5 = (Group)cGroup_5.eContents().get(5);
		private final Assignment cSubtermAssignment_5_5_0 = (Assignment)cGroup_5_5.eContents().get(0);
		private final RuleCall cSubtermTermParserRuleCall_5_5_0_0 = (RuleCall)cSubtermAssignment_5_5_0.eContents().get(0);
		private final Group cGroup_5_5_1 = (Group)cGroup_5_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_5_1_0 = (Keyword)cGroup_5_5_1.eContents().get(0);
		private final Assignment cSubtermAssignment_5_5_1_1 = (Assignment)cGroup_5_5_1.eContents().get(1);
		private final RuleCall cSubtermTermParserRuleCall_5_5_1_1_0 = (RuleCall)cSubtermAssignment_5_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_6 = (Keyword)cGroup_5.eContents().get(6);
		
		//ListsBuiltInOperator returns lists::ListOperator:
		//
		//	"concatlists" "(" {lists::Concatenation} subterm+=Term "," subterm+=Term ")" | "appendtolist" "(" {lists::Append}
		//
		//	subterm+=Term "," subterm+=Term ")" | "listlength" "(" {lists::Length} subterm+=Term ")" | "sublist" ":"
		//
		//	{lists::Sublist} start=NAT "," length=NAT "(" subterm+=Term ")" | "memberat" ":" {lists::MemberAtIndex} index=NAT "("
		//
		//	subterm+=Term ")" | "makelist" ":" {lists::MakeList} refsort=Sort "(" (subterm+=Term ("," subterm+=Term)*)? ")";
		public ParserRule getRule() { return rule; }

		//"concatlists" "(" {lists::Concatenation} subterm+=Term "," subterm+=Term ")" | "appendtolist" "(" {lists::Append}
		//
		//subterm+=Term "," subterm+=Term ")" | "listlength" "(" {lists::Length} subterm+=Term ")" | "sublist" ":"
		//
		//{lists::Sublist} start=NAT "," length=NAT "(" subterm+=Term ")" | "memberat" ":" {lists::MemberAtIndex} index=NAT "("
		//
		//subterm+=Term ")" | "makelist" ":" {lists::MakeList} refsort=Sort "(" (subterm+=Term ("," subterm+=Term)*)? ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"concatlists" "(" {lists::Concatenation} subterm+=Term "," subterm+=Term ")"
		public Group getGroup_0() { return cGroup_0; }

		//"concatlists"
		public Keyword getConcatlistsKeyword_0_0() { return cConcatlistsKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }

		//{lists::Concatenation}
		public Action getConcatenationAction_0_2() { return cConcatenationAction_0_2; }

		//subterm+=Term
		public Assignment getSubtermAssignment_0_3() { return cSubtermAssignment_0_3; }

		//Term
		public RuleCall getSubtermTermParserRuleCall_0_3_0() { return cSubtermTermParserRuleCall_0_3_0; }

		//","
		public Keyword getCommaKeyword_0_4() { return cCommaKeyword_0_4; }

		//subterm+=Term
		public Assignment getSubtermAssignment_0_5() { return cSubtermAssignment_0_5; }

		//Term
		public RuleCall getSubtermTermParserRuleCall_0_5_0() { return cSubtermTermParserRuleCall_0_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_6() { return cRightParenthesisKeyword_0_6; }

		//"appendtolist" "(" {lists::Append} subterm+=Term "," subterm+=Term ")"
		public Group getGroup_1() { return cGroup_1; }

		//"appendtolist"
		public Keyword getAppendtolistKeyword_1_0() { return cAppendtolistKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//{lists::Append}
		public Action getAppendAction_1_2() { return cAppendAction_1_2; }

		//subterm+=Term
		public Assignment getSubtermAssignment_1_3() { return cSubtermAssignment_1_3; }

		//Term
		public RuleCall getSubtermTermParserRuleCall_1_3_0() { return cSubtermTermParserRuleCall_1_3_0; }

		//","
		public Keyword getCommaKeyword_1_4() { return cCommaKeyword_1_4; }

		//subterm+=Term
		public Assignment getSubtermAssignment_1_5() { return cSubtermAssignment_1_5; }

		//Term
		public RuleCall getSubtermTermParserRuleCall_1_5_0() { return cSubtermTermParserRuleCall_1_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_6() { return cRightParenthesisKeyword_1_6; }

		//"listlength" "(" {lists::Length} subterm+=Term ")"
		public Group getGroup_2() { return cGroup_2; }

		//"listlength"
		public Keyword getListlengthKeyword_2_0() { return cListlengthKeyword_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//{lists::Length}
		public Action getLengthAction_2_2() { return cLengthAction_2_2; }

		//subterm+=Term
		public Assignment getSubtermAssignment_2_3() { return cSubtermAssignment_2_3; }

		//Term
		public RuleCall getSubtermTermParserRuleCall_2_3_0() { return cSubtermTermParserRuleCall_2_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }

		//"sublist" ":" {lists::Sublist} start=NAT "," length=NAT "(" subterm+=Term ")"
		public Group getGroup_3() { return cGroup_3; }

		//"sublist"
		public Keyword getSublistKeyword_3_0() { return cSublistKeyword_3_0; }

		//":"
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }

		//{lists::Sublist}
		public Action getSublistAction_3_2() { return cSublistAction_3_2; }

		//start=NAT
		public Assignment getStartAssignment_3_3() { return cStartAssignment_3_3; }

		//NAT
		public RuleCall getStartNATParserRuleCall_3_3_0() { return cStartNATParserRuleCall_3_3_0; }

		//","
		public Keyword getCommaKeyword_3_4() { return cCommaKeyword_3_4; }

		//length=NAT
		public Assignment getLengthAssignment_3_5() { return cLengthAssignment_3_5; }

		//NAT
		public RuleCall getLengthNATParserRuleCall_3_5_0() { return cLengthNATParserRuleCall_3_5_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_6() { return cLeftParenthesisKeyword_3_6; }

		//subterm+=Term
		public Assignment getSubtermAssignment_3_7() { return cSubtermAssignment_3_7; }

		//Term
		public RuleCall getSubtermTermParserRuleCall_3_7_0() { return cSubtermTermParserRuleCall_3_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_8() { return cRightParenthesisKeyword_3_8; }

		//"memberat" ":" {lists::MemberAtIndex} index=NAT "(" subterm+=Term ")"
		public Group getGroup_4() { return cGroup_4; }

		//"memberat"
		public Keyword getMemberatKeyword_4_0() { return cMemberatKeyword_4_0; }

		//":"
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }

		//{lists::MemberAtIndex}
		public Action getMemberAtIndexAction_4_2() { return cMemberAtIndexAction_4_2; }

		//index=NAT
		public Assignment getIndexAssignment_4_3() { return cIndexAssignment_4_3; }

		//NAT
		public RuleCall getIndexNATParserRuleCall_4_3_0() { return cIndexNATParserRuleCall_4_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_4() { return cLeftParenthesisKeyword_4_4; }

		//subterm+=Term
		public Assignment getSubtermAssignment_4_5() { return cSubtermAssignment_4_5; }

		//Term
		public RuleCall getSubtermTermParserRuleCall_4_5_0() { return cSubtermTermParserRuleCall_4_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_6() { return cRightParenthesisKeyword_4_6; }

		//"makelist" ":" {lists::MakeList} refsort=Sort "(" (subterm+=Term ("," subterm+=Term)*)? ")"
		public Group getGroup_5() { return cGroup_5; }

		//"makelist"
		public Keyword getMakelistKeyword_5_0() { return cMakelistKeyword_5_0; }

		//":"
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }

		//{lists::MakeList}
		public Action getMakeListAction_5_2() { return cMakeListAction_5_2; }

		//refsort=Sort
		public Assignment getRefsortAssignment_5_3() { return cRefsortAssignment_5_3; }

		//Sort
		public RuleCall getRefsortSortParserRuleCall_5_3_0() { return cRefsortSortParserRuleCall_5_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_4() { return cLeftParenthesisKeyword_5_4; }

		//(subterm+=Term ("," subterm+=Term)*)?
		public Group getGroup_5_5() { return cGroup_5_5; }

		//subterm+=Term
		public Assignment getSubtermAssignment_5_5_0() { return cSubtermAssignment_5_5_0; }

		//Term
		public RuleCall getSubtermTermParserRuleCall_5_5_0_0() { return cSubtermTermParserRuleCall_5_5_0_0; }

		//("," subterm+=Term)*
		public Group getGroup_5_5_1() { return cGroup_5_5_1; }

		//","
		public Keyword getCommaKeyword_5_5_1_0() { return cCommaKeyword_5_5_1_0; }

		//subterm+=Term
		public Assignment getSubtermAssignment_5_5_1_1() { return cSubtermAssignment_5_5_1_1; }

		//Term
		public RuleCall getSubtermTermParserRuleCall_5_5_1_1_0() { return cSubtermTermParserRuleCall_5_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_6() { return cRightParenthesisKeyword_5_6; }
	}

	public class ListConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEmptylistKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefsortAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRefsortSortParserRuleCall_2_0 = (RuleCall)cRefsortAssignment_2.eContents().get(0);
		
		//ListConstant returns lists::EmptyList:
		//
		//	"emptylist" ":" refsort=Sort;
		public ParserRule getRule() { return rule; }

		//"emptylist" ":" refsort=Sort
		public Group getGroup() { return cGroup; }

		//"emptylist"
		public Keyword getEmptylistKeyword_0() { return cEmptylistKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//refsort=Sort
		public Assignment getRefsortAssignment_2() { return cRefsortAssignment_2; }

		//Sort
		public RuleCall getRefsortSortParserRuleCall_2_0() { return cRefsortSortParserRuleCall_2_0; }
	}

	public class ArbitrarySortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArbitrarySort");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		/// * -------------------------------------------------------------
		// * Concrete syntax for package arbitrary declarations
		// * ------------------------------------------------------------- * /
		//
		//ArbitrarySort returns arbitrary::ArbitrarySort:
		//
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ArbitraryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArbitraryOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cInputAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cInputSortParserRuleCall_2_0_0 = (RuleCall)cInputAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cInputAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cInputSortParserRuleCall_2_1_1_0 = (RuleCall)cInputAssignment_2_1_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOutputAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOutputSortParserRuleCall_4_0 = (RuleCall)cOutputAssignment_4.eContents().get(0);
		
		//ArbitraryOperator returns arbitrary::ArbitraryOperator:
		//
		//	name=ID ":" (input+=Sort ("," input+=Sort)*)? "->" output=Sort;
		public ParserRule getRule() { return rule; }

		//name=ID ":" (input+=Sort ("," input+=Sort)*)? "->" output=Sort
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//(input+=Sort ("," input+=Sort)*)?
		public Group getGroup_2() { return cGroup_2; }

		//input+=Sort
		public Assignment getInputAssignment_2_0() { return cInputAssignment_2_0; }

		//Sort
		public RuleCall getInputSortParserRuleCall_2_0_0() { return cInputSortParserRuleCall_2_0_0; }

		//("," input+=Sort)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//input+=Sort
		public Assignment getInputAssignment_2_1_1() { return cInputAssignment_2_1_1; }

		//Sort
		public RuleCall getInputSortParserRuleCall_2_1_1_0() { return cInputSortParserRuleCall_2_1_1_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }

		//output=Sort
		public Assignment getOutputAssignment_4() { return cOutputAssignment_4; }

		//Sort
		public RuleCall getOutputSortParserRuleCall_4_0() { return cOutputSortParserRuleCall_4_0; }
	}
	
	
	private DocumentElements pDocument;
	private DeclarationsElements pDeclarations;
	private DeclarationElements pDeclaration;
	private SortDeclElements pSortDecl;
	private VariableDeclElements pVariableDecl;
	private NamedSortElements pNamedSort;
	private OperatorDeclElements pOperatorDecl;
	private NamedOperatorElements pNamedOperator;
	private SortElements pSort;
	private MultiSetSortElements pMultiSetSort;
	private ProductSortElements pProductSort;
	private UserSortElements pUserSort;
	private TermElements pTerm;
	private Term1Elements pTerm1;
	private Term2Elements pTerm2;
	private Term3Elements pTerm3;
	private Term4Elements pTerm4;
	private Term5Elements pTerm5;
	private Term6Elements pTerm6;
	private Term7Elements pTerm7;
	private Term8Elements pTerm8;
	private Term9Elements pTerm9;
	private Term10Elements pTerm10;
	private VariableElements pVariable;
	private UserOperatorElements pUserOperator;
	private OtherBuiltInOperatorElements pOtherBuiltInOperator;
	private BuiltInSortElements pBuiltInSort;
	private BuiltInConstElements pBuiltInConst;
	private MultisetConstantElements pMultisetConstant;
	private DotElements pDot;
	private DotConstantElements pDotConstant;
	private BooleanElements pBoolean;
	private BooleanConstantElements pBooleanConstant;
	private NumberElements pNumber;
	private NumberConstantElements pNumberConstant;
	private INTEGERElements pINTEGER;
	private NATElements pNAT;
	private TerminalRule tINTSTRING;
	private FiniteEnumerationElements pFiniteEnumeration;
	private FEConstantElements pFEConstant;
	private CyclicEnumerationElements pCyclicEnumeration;
	private CyclicEnumsBuiltInOperatorElements pCyclicEnumsBuiltInOperator;
	private FiniteIntRangeElements pFiniteIntRange;
	private FiniteIntRangeConstantElements pFiniteIntRangeConstant;
	private PartitionElements pPartition;
	private PartitionElementElements pPartitionElement;
	private PartitionsBuiltInOperatorElements pPartitionsBuiltInOperator;
	private StringSortElements pStringSort;
	private StringsBuiltInOperatorElements pStringsBuiltInOperator;
	private StringConstantElements pStringConstant;
	private ListSortElements pListSort;
	private ListsBuiltInOperatorElements pListsBuiltInOperator;
	private ListConstantElements pListConstant;
	private ArbitrarySortElements pArbitrarySort;
	private ArbitraryOperatorElements pArbitraryOperator;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public HLPNGInscriptionLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.pnml.tools.epnk.pntypes.hlpngs.datatypes.concretesyntax.HLPNGInscriptionLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// * -------------------------------------------------------------
	// * Concrete syntax for package hlpnginscriptiondocument
	// * ------------------------------------------------------------- * /
	//
	//Document returns document::HLPNGInscriptionDocument:
	//
	//	(declarations+=Declarations ";" | term+=Term ";")*;
	public DocumentElements getDocumentAccess() {
		return (pDocument != null) ? pDocument : (pDocument = new DocumentElements());
	}
	
	public ParserRule getDocumentRule() {
		return getDocumentAccess().getRule();
	}

	//// We did not yet define a syntax for terms, so it
	//
	//
	//// is just a single keyword 'term' for now and return a DotConstant.
	//
	//
	//// The syntax for Terms needs to be added though.
	// // Term returns terms::Term :
	//
	//
	////    'term' {dots::DotConstant} ';';    
	//
	//
	/// * -------------------------------------------------------------
	// * Concrete syntax for package terms
	// * ------------------------------------------------------------- * /
	//
	//Declarations returns terms::Declarations:
	//
	//	{terms::Declarations} ("sorts" declaration+=SortDecl ("," declaration+=SortDecl)* ";" | "vars"
	//
	//	declaration+=VariableDecl ("," declaration+=VariableDecl)* ";" | "ops" declaration+=OperatorDecl (","
	//
	//	declaration+=OperatorDecl)* ";" | "sortsymbols" declaration+=ArbitrarySort ("," declaration+=ArbitrarySort)* ";" |
	//
	//	"opsymbols" declaration+=ArbitraryOperator ("," declaration+=ArbitraryOperator)* ";")*;
	public DeclarationsElements getDeclarationsAccess() {
		return (pDeclarations != null) ? pDeclarations : (pDeclarations = new DeclarationsElements());
	}
	
	public ParserRule getDeclarationsRule() {
		return getDeclarationsAccess().getRule();
	}

	//Declaration returns terms::Declaration:
	//
	//	SortDecl | VariableDecl;
	public DeclarationElements getDeclarationAccess() {
		return (pDeclaration != null) ? pDeclaration : (pDeclaration = new DeclarationElements());
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//SortDecl returns terms::SortDecl: // for now there are only named sorts as sort declarations
	// // but there will be more
	//
	//
	//	NamedSort | Partition;
	public SortDeclElements getSortDeclAccess() {
		return (pSortDecl != null) ? pSortDecl : (pSortDecl = new SortDeclElements());
	}
	
	public ParserRule getSortDeclRule() {
		return getSortDeclAccess().getRule();
	}

	//VariableDecl returns terms::VariableDecl:
	//
	//	name=ID ":" sort=Sort;
	public VariableDeclElements getVariableDeclAccess() {
		return (pVariableDecl != null) ? pVariableDecl : (pVariableDecl = new VariableDeclElements());
	}
	
	public ParserRule getVariableDeclRule() {
		return getVariableDeclAccess().getRule();
	}

	//NamedSort returns terms::NamedSort:
	//
	//	name=ID "=" def=Sort;
	public NamedSortElements getNamedSortAccess() {
		return (pNamedSort != null) ? pNamedSort : (pNamedSort = new NamedSortElements());
	}
	
	public ParserRule getNamedSortRule() {
		return getNamedSortAccess().getRule();
	}

	//OperatorDecl returns terms::OperatorDecl:
	//
	//	NamedOperator;
	public OperatorDeclElements getOperatorDeclAccess() {
		return (pOperatorDecl != null) ? pOperatorDecl : (pOperatorDecl = new OperatorDeclElements());
	}
	
	public ParserRule getOperatorDeclRule() {
		return getOperatorDeclAccess().getRule();
	}

	//NamedOperator returns terms::NamedOperator:
	//
	//	name=ID "(" (parameters+=VariableDecl ("," parameters+=VariableDecl)*)? ")" "=" def=Term;
	public NamedOperatorElements getNamedOperatorAccess() {
		return (pNamedOperator != null) ? pNamedOperator : (pNamedOperator = new NamedOperatorElements());
	}
	
	public ParserRule getNamedOperatorRule() {
		return getNamedOperatorAccess().getRule();
	}

	//Sort returns terms::Sort:
	//
	//	BuiltInSort | MultiSetSort | ProductSort | UserSort;
	public SortElements getSortAccess() {
		return (pSort != null) ? pSort : (pSort = new SortElements());
	}
	
	public ParserRule getSortRule() {
		return getSortAccess().getRule();
	}

	//MultiSetSort returns terms::MultiSetSort:
	//
	//	"MS" "(" basis=Sort ")";
	public MultiSetSortElements getMultiSetSortAccess() {
		return (pMultiSetSort != null) ? pMultiSetSort : (pMultiSetSort = new MultiSetSortElements());
	}
	
	public ParserRule getMultiSetSortRule() {
		return getMultiSetSortAccess().getRule();
	}

	//ProductSort returns terms::ProductSort:
	//
	//	"(" {terms::ProductSort} (elementSort+=Sort ("*" elementSort+=Sort)*)? ")";
	public ProductSortElements getProductSortAccess() {
		return (pProductSort != null) ? pProductSort : (pProductSort = new ProductSortElements());
	}
	
	public ParserRule getProductSortRule() {
		return getProductSortAccess().getRule();
	}

	//UserSort returns terms::UserSort: // declaration = [terms::SortDecl|SortDecl];
	//
	//
	//// Unfortunately, crossreferencing works for
	// // simple datatypes only; but I will use my own
	//
	//
	//// linker anyway, so setting the name of the
	// // SymbolUse is fine for now:
	// name=ID;
	public UserSortElements getUserSortAccess() {
		return (pUserSort != null) ? pUserSort : (pUserSort = new UserSortElements());
	}
	
	public ParserRule getUserSortRule() {
		return getUserSortAccess().getRule();
	}

	//Term returns terms::Term:
	//
	//	Term1;
	public TermElements getTermAccess() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//Term1 returns terms::Term:
	//
	//	Term2 ({booleans::Or.subterm+=current} "or" subterm+=Term2 | {booleans::Imply.subterm+=current} "implies"
	//
	//	subterm+=Term2)*;
	public Term1Elements getTerm1Access() {
		return (pTerm1 != null) ? pTerm1 : (pTerm1 = new Term1Elements());
	}
	
	public ParserRule getTerm1Rule() {
		return getTerm1Access().getRule();
	}

	//Term2 returns terms::Term:
	//
	//	Term3 ({booleans::And.subterm+=current} "and" subterm+=Term3)*;
	public Term2Elements getTerm2Access() {
		return (pTerm2 != null) ? pTerm2 : (pTerm2 = new Term2Elements());
	}
	
	public ParserRule getTerm2Rule() {
		return getTerm2Access().getRule();
	}

	//Term3 returns terms::Term:
	//
	//	Term4 ({integers::GreaterThan.subterm+=current} ">" subterm+=Term4 | {integers::GreaterThanOrEqual.subterm+=current}
	//
	//	">=" subterm+=Term4 | {integers::LessThan.subterm+=current} "<" subterm+=Term4 |
	//
	//	{integers::LessThanOrEqual.subterm+=current} "<=" subterm+=Term4 | {multisets::Contains.subterm+=current} "contains"
	//
	//	subterm+=Term4 | {finiteintranges::LessThan.subterm+=current} "<r" subterm+=Term4 |
	//
	//	{finiteintranges::LessThanOrEqual.subterm+=current} "<=r" subterm+=Term4 |
	//
	//	{finiteintranges::GreaterThan.subterm+=current} ">r" subterm+=Term4 |
	//
	//	{finiteintranges::GreaterThanOrEqual.subterm+=current} ">=r" subterm+=Term4 | {partitions::LessThan.subterm+=current}
	//
	//	"<p" subterm+=Term4 | {partitions::GreaterThan.subterm+=current} ">p" subterm+=Term4 |
	//
	//	{strings::GreaterThanOrEqual.subterm+=current} ">=s" subterm+=Term4 | {strings::GreaterThan.subterm+=current} ">s"
	//
	//	subterm+=Term4 | {strings::LessThanOrEqual.subterm+=current} "<=s" subterm+=Term4 |
	//
	//	{strings::LessThan.subterm+=current} "<s" subterm+=Term4)*;
	public Term3Elements getTerm3Access() {
		return (pTerm3 != null) ? pTerm3 : (pTerm3 = new Term3Elements());
	}
	
	public ParserRule getTerm3Rule() {
		return getTerm3Access().getRule();
	}

	//Term4 returns terms::Term:
	//
	//	Term5 ({booleans::Equality.subterm+=current} "==" subterm+=Term5 | {booleans::Inequality.subterm+=current} "!="
	//
	//	subterm+=Term5)*;
	public Term4Elements getTerm4Access() {
		return (pTerm4 != null) ? pTerm4 : (pTerm4 = new Term4Elements());
	}
	
	public ParserRule getTerm4Rule() {
		return getTerm4Access().getRule();
	}

	//Term5 returns terms::Term:
	//
	//	Term6 ({multisets::Add.subterm+=current} "++" subterm+=Term6 | {multisets::Subtract.subterm+=current} "--"
	//
	//	subterm+=Term6)*;
	public Term5Elements getTerm5Access() {
		return (pTerm5 != null) ? pTerm5 : (pTerm5 = new Term5Elements());
	}
	
	public ParserRule getTerm5Rule() {
		return getTerm5Access().getRule();
	}

	//Term6 returns terms::Term:
	//
	//	Term7 ({multisets::NumberOf.subterm+=current} "`" subterm+=Term7)*;
	public Term6Elements getTerm6Access() {
		return (pTerm6 != null) ? pTerm6 : (pTerm6 = new Term6Elements());
	}
	
	public ParserRule getTerm6Rule() {
		return getTerm6Access().getRule();
	}

	//Term7 returns terms::Term:
	//
	//	Term8 ({integers::Addition.subterm+=current} "+" subterm+=Term8 | {integers::Subtraction.subterm+=current} "-"
	//
	//	subterm+=Term8)*;
	public Term7Elements getTerm7Access() {
		return (pTerm7 != null) ? pTerm7 : (pTerm7 = new Term7Elements());
	}
	
	public ParserRule getTerm7Rule() {
		return getTerm7Access().getRule();
	}

	//Term8 returns terms::Term:
	//
	//	Term9 ({integers::Multiplication.subterm+=current} "*" subterm+=Term9 | {multisets::ScalarProduct.subterm+=current}
	//
	//	"**" subterm+=Term9 | {integers::Division.subterm+=current} "/" subterm+=Term9 | {integers::Modulo.subterm+=current}
	//
	//	"%" subterm+=Term9)*;
	public Term8Elements getTerm8Access() {
		return (pTerm8 != null) ? pTerm8 : (pTerm8 = new Term8Elements());
	}
	
	public ParserRule getTerm8Rule() {
		return getTerm8Access().getRule();
	}

	//Term9 returns terms::Term:
	//
	//	"not" {booleans::Not} subterm+=Term9 | Term10;
	public Term9Elements getTerm9Access() {
		return (pTerm9 != null) ? pTerm9 : (pTerm9 = new Term9Elements());
	}
	
	public ParserRule getTerm9Rule() {
		return getTerm9Access().getRule();
	}

	//Term10 returns terms::Term:
	//
	//	Variable | UserOperator | OtherBuiltInOperator | BuiltInConst | "(" Term (")" | "," {terms::Tuple.subterm+=current}
	//
	//	subterm+=Term ("," subterm+=Term)* ")");
	public Term10Elements getTerm10Access() {
		return (pTerm10 != null) ? pTerm10 : (pTerm10 = new Term10Elements());
	}
	
	public ParserRule getTerm10Rule() {
		return getTerm10Access().getRule();
	}

	//Variable returns terms::Variable:
	//
	//	name=ID;
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//UserOperator returns terms::UserOperator:
	//
	////    '$' {terms::UserOperator} name = ID '(' ( subterm += Term (',' subterm += Term )* )?  ')' ;
	// name=ID "("
	//
	//	(subterm+=Term ("," subterm+=Term)*)? ")";
	public UserOperatorElements getUserOperatorAccess() {
		return (pUserOperator != null) ? pUserOperator : (pUserOperator = new UserOperatorElements());
	}
	
	public ParserRule getUserOperatorRule() {
		return getUserOperatorAccess().getRule();
	}

	//OtherBuiltInOperator returns terms::Term:
	//
	//	"|" {multisets::Cardinality} subterm+=Term10 "|" | "#(" {multisets::CardinalityOf} subterm+=Term "," subterm+=Term
	//
	//	")" | CyclicEnumsBuiltInOperator | PartitionsBuiltInOperator | StringsBuiltInOperator | ListsBuiltInOperator;
	public OtherBuiltInOperatorElements getOtherBuiltInOperatorAccess() {
		return (pOtherBuiltInOperator != null) ? pOtherBuiltInOperator : (pOtherBuiltInOperator = new OtherBuiltInOperatorElements());
	}
	
	public ParserRule getOtherBuiltInOperatorRule() {
		return getOtherBuiltInOperatorAccess().getRule();
	}

	/// * -------------------------------------------------------------
	// * Dispatch for concrete syntax for BuiltInSort
	// * ------------------------------------------------------------- * /
	//
	//BuiltInSort returns terms::BuiltInSort:
	//
	//	Dot | Boolean | Number | FiniteEnumeration | CyclicEnumeration | FiniteIntRange | StringSort | ListSort;
	public BuiltInSortElements getBuiltInSortAccess() {
		return (pBuiltInSort != null) ? pBuiltInSort : (pBuiltInSort = new BuiltInSortElements());
	}
	
	public ParserRule getBuiltInSortRule() {
		return getBuiltInSortAccess().getRule();
	}

	//BuiltInConst returns terms::Term:
	//
	//	DotConstant | BooleanConstant | MultisetConstant | NumberConstant | FiniteIntRangeConstant | StringConstant |
	//
	//	ListConstant;
	public BuiltInConstElements getBuiltInConstAccess() {
		return (pBuiltInConst != null) ? pBuiltInConst : (pBuiltInConst = new BuiltInConstElements());
	}
	
	public ParserRule getBuiltInConstRule() {
		return getBuiltInConstAccess().getRule();
	}

	/// * -------------------------------------------------------------
	// * Concrete syntax for package multisets
	// * ------------------------------------------------------------- * /
	//
	//// Technically, All is an operator. But in the concrete syntax, I
	// // made it a constant. 
	// MultisetConstant returns
	//
	//terms::MultiSetOperator:
	//
	//	"all" {multisets::All} ":" refsort=Sort | "empty" {multisets::Empty} ":" refsort=Sort;
	public MultisetConstantElements getMultisetConstantAccess() {
		return (pMultisetConstant != null) ? pMultisetConstant : (pMultisetConstant = new MultisetConstantElements());
	}
	
	public ParserRule getMultisetConstantRule() {
		return getMultisetConstantAccess().getRule();
	}

	/// * -------------------------------------------------------------
	// * Concrete syntax for package dots
	// * ------------------------------------------------------------- * /
	//
	//Dot returns dots::Dot:
	//
	//	"DOT" {dots::Dot};
	public DotElements getDotAccess() {
		return (pDot != null) ? pDot : (pDot = new DotElements());
	}
	
	public ParserRule getDotRule() {
		return getDotAccess().getRule();
	}

	//DotConstant returns dots::DotConstant:
	//
	//	"dot" {dots::DotConstant};
	public DotConstantElements getDotConstantAccess() {
		return (pDotConstant != null) ? pDotConstant : (pDotConstant = new DotConstantElements());
	}
	
	public ParserRule getDotConstantRule() {
		return getDotConstantAccess().getRule();
	}

	/// * -------------------------------------------------------------
	// * Concrete syntax for package boolean
	// * ------------------------------------------------------------- * /
	//
	//Boolean returns booleans::Bool:
	//
	//	"BOOL" {booleans::Bool};
	public BooleanElements getBooleanAccess() {
		return (pBoolean != null) ? pBoolean : (pBoolean = new BooleanElements());
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	//BooleanConstant returns booleans::BooleanConstant: //    value = BOOL;
	// {booleans::BooleanConstant} (value?="true" |
	//
	//	"false");
	public BooleanConstantElements getBooleanConstantAccess() {
		return (pBooleanConstant != null) ? pBooleanConstant : (pBooleanConstant = new BooleanConstantElements());
	}
	
	public ParserRule getBooleanConstantRule() {
		return getBooleanConstantAccess().getRule();
	}

	//// terminal BOOL returns ecore::EBoolean :
	// //    'true' | 'false';      
	//
	//
	/// * -------------------------------------------------------------
	// * Concrete syntax for package integer
	// * ------------------------------------------------------------- * /
	//
	//Number returns integers::Number:
	//
	//	"INT" {integers::Integer} | "NAT" {integers::Natural} | "POS" {integers::Positive};
	public NumberElements getNumberAccess() {
		return (pNumber != null) ? pNumber : (pNumber = new NumberElements());
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//NumberConstant returns integers::NumberConstant:
	//
	//	{integers::NumberConstant} value=INTEGER (":" type=Number)?;
	public NumberConstantElements getNumberConstantAccess() {
		return (pNumberConstant != null) ? pNumberConstant : (pNumberConstant = new NumberConstantElements());
	}
	
	public ParserRule getNumberConstantRule() {
		return getNumberConstantAccess().getRule();
	}

	//INTEGER returns ecore::EInt:
	//
	//	INTSTRING;
	public INTEGERElements getINTEGERAccess() {
		return (pINTEGER != null) ? pINTEGER : (pINTEGER = new INTEGERElements());
	}
	
	public ParserRule getINTEGERRule() {
		return getINTEGERAccess().getRule();
	}

	//NAT returns pnmldatatypes::NonNegativeInteger: // Note that negative values are impossible, due
	//
	//
	//// to a value converter for this rule.
	// INTSTRING;
	public NATElements getNATAccess() {
		return (pNAT != null) ? pNAT : (pNAT = new NATElements());
	}
	
	public ParserRule getNATRule() {
		return getNATAccess().getRule();
	}

	//terminal INTSTRING:
	//
	//	"-"? "0".."9"+;
	public TerminalRule getINTSTRINGRule() {
		return (tINTSTRING != null) ? tINTSTRING : (tINTSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTSTRING"));
	} 

	/// * -------------------------------------------------------------
	// * Concrete syntax for package finite enumerations
	// * ------------------------------------------------------------- * /
	//
	//FiniteEnumeration returns finiteenums::FiniteEnumeration:
	//
	//	"enum" "{" elements+=FEConstant ("," elements+=FEConstant)* "}";
	public FiniteEnumerationElements getFiniteEnumerationAccess() {
		return (pFiniteEnumeration != null) ? pFiniteEnumeration : (pFiniteEnumeration = new FiniteEnumerationElements());
	}
	
	public ParserRule getFiniteEnumerationRule() {
		return getFiniteEnumerationAccess().getRule();
	}

	//FEConstant returns finiteenums::FEConstant:
	//
	//	name=ID;
	public FEConstantElements getFEConstantAccess() {
		return (pFEConstant != null) ? pFEConstant : (pFEConstant = new FEConstantElements());
	}
	
	public ParserRule getFEConstantRule() {
		return getFEConstantAccess().getRule();
	}

	/// * -------------------------------------------------------------
	// * Concrete syntax for package cyclic enumerations
	// * ------------------------------------------------------------- * /
	//
	//CyclicEnumeration returns cyclicenums::CyclicEnumeration:
	//
	//	"cyclic" "{" elements+=FEConstant ("," elements+=FEConstant)* "}";
	public CyclicEnumerationElements getCyclicEnumerationAccess() {
		return (pCyclicEnumeration != null) ? pCyclicEnumeration : (pCyclicEnumeration = new CyclicEnumerationElements());
	}
	
	public ParserRule getCyclicEnumerationRule() {
		return getCyclicEnumerationAccess().getRule();
	}

	//CyclicEnumsBuiltInOperator returns terms::Term:
	//
	//	"succ" "(" {cyclicenums::Successor} subterm+=Term ")" | "pred" "(" {cyclicenums::Predecessor} subterm+=Term ")";
	public CyclicEnumsBuiltInOperatorElements getCyclicEnumsBuiltInOperatorAccess() {
		return (pCyclicEnumsBuiltInOperator != null) ? pCyclicEnumsBuiltInOperator : (pCyclicEnumsBuiltInOperator = new CyclicEnumsBuiltInOperatorElements());
	}
	
	public ParserRule getCyclicEnumsBuiltInOperatorRule() {
		return getCyclicEnumsBuiltInOperatorAccess().getRule();
	}

	/// * -------------------------------------------------------------
	// * Concrete syntax for package finite int ranges
	// * ------------------------------------------------------------- * /
	//
	//FiniteIntRange returns finiteintranges::FiniteIntRange:
	//
	//	"[" start=INTEGER ".." end=INTEGER "]";
	public FiniteIntRangeElements getFiniteIntRangeAccess() {
		return (pFiniteIntRange != null) ? pFiniteIntRange : (pFiniteIntRange = new FiniteIntRangeElements());
	}
	
	public ParserRule getFiniteIntRangeRule() {
		return getFiniteIntRangeAccess().getRule();
	}

	//FiniteIntRangeConstant returns finiteintranges::FiniteIntConstant:
	//
	//	value=INTEGER range=FiniteIntRange;
	public FiniteIntRangeConstantElements getFiniteIntRangeConstantAccess() {
		return (pFiniteIntRangeConstant != null) ? pFiniteIntRangeConstant : (pFiniteIntRangeConstant = new FiniteIntRangeConstantElements());
	}
	
	public ParserRule getFiniteIntRangeConstantRule() {
		return getFiniteIntRangeConstantAccess().getRule();
	}

	/// * -------------------------------------------------------------
	// * Concrete syntax for package partitions
	// * ------------------------------------------------------------- * /
	//
	//Partition returns partitions::Partition:
	//
	//	"partition" def=Sort "in" name=ID "{" partitionElements+=PartitionElement (";" partitionElements+=PartitionElement)*
	//
	//	"}";
	public PartitionElements getPartitionAccess() {
		return (pPartition != null) ? pPartition : (pPartition = new PartitionElements());
	}
	
	public ParserRule getPartitionRule() {
		return getPartitionAccess().getRule();
	}

	//PartitionElement returns partitions::PartitionElement:
	//
	//	name=ID ":" partitionelementconstant+=Term ("," partitionelementconstant+=Term)*;
	public PartitionElementElements getPartitionElementAccess() {
		return (pPartitionElement != null) ? pPartitionElement : (pPartitionElement = new PartitionElementElements());
	}
	
	public ParserRule getPartitionElementRule() {
		return getPartitionElementAccess().getRule();
	}

	//PartitionsBuiltInOperator returns terms::Term:
	//
	//	"partition" ":" {partitions::PartitionElementOf} name=ID "(" subterm+=Term ")";
	public PartitionsBuiltInOperatorElements getPartitionsBuiltInOperatorAccess() {
		return (pPartitionsBuiltInOperator != null) ? pPartitionsBuiltInOperator : (pPartitionsBuiltInOperator = new PartitionsBuiltInOperatorElements());
	}
	
	public ParserRule getPartitionsBuiltInOperatorRule() {
		return getPartitionsBuiltInOperatorAccess().getRule();
	}

	/// * -------------------------------------------------------------
	// * Concrete syntax for package strings
	// * ------------------------------------------------------------- * /
	//
	//StringSort returns strings::String:
	//
	//	"STRING" {strings::String};
	public StringSortElements getStringSortAccess() {
		return (pStringSort != null) ? pStringSort : (pStringSort = new StringSortElements());
	}
	
	public ParserRule getStringSortRule() {
		return getStringSortAccess().getRule();
	}

	//StringsBuiltInOperator returns strings::StringOperator:
	//
	//	"concatstring" "(" {strings::Concatenation} subterm+=Term "," subterm+=Term ")"
	//
	//	// note that we do not have append (does not make sense)
	// | "stringlength" "(" {strings::Length} subterm+=Term ")" |
	//
	//	"substring" {strings::Substring} ":" start=NAT "," length=NAT "(" subterm+=Term ")";
	public StringsBuiltInOperatorElements getStringsBuiltInOperatorAccess() {
		return (pStringsBuiltInOperator != null) ? pStringsBuiltInOperator : (pStringsBuiltInOperator = new StringsBuiltInOperatorElements());
	}
	
	public ParserRule getStringsBuiltInOperatorRule() {
		return getStringsBuiltInOperatorAccess().getRule();
	}

	//StringConstant returns strings::StringConstant:
	//
	//	value=STRING;
	public StringConstantElements getStringConstantAccess() {
		return (pStringConstant != null) ? pStringConstant : (pStringConstant = new StringConstantElements());
	}
	
	public ParserRule getStringConstantRule() {
		return getStringConstantAccess().getRule();
	}

	/// * -------------------------------------------------------------
	// * Concrete syntax for package lists
	// * ------------------------------------------------------------- * /
	//
	//ListSort returns lists::List:
	//
	//	"LIST" ":" basis=Sort;
	public ListSortElements getListSortAccess() {
		return (pListSort != null) ? pListSort : (pListSort = new ListSortElements());
	}
	
	public ParserRule getListSortRule() {
		return getListSortAccess().getRule();
	}

	//ListsBuiltInOperator returns lists::ListOperator:
	//
	//	"concatlists" "(" {lists::Concatenation} subterm+=Term "," subterm+=Term ")" | "appendtolist" "(" {lists::Append}
	//
	//	subterm+=Term "," subterm+=Term ")" | "listlength" "(" {lists::Length} subterm+=Term ")" | "sublist" ":"
	//
	//	{lists::Sublist} start=NAT "," length=NAT "(" subterm+=Term ")" | "memberat" ":" {lists::MemberAtIndex} index=NAT "("
	//
	//	subterm+=Term ")" | "makelist" ":" {lists::MakeList} refsort=Sort "(" (subterm+=Term ("," subterm+=Term)*)? ")";
	public ListsBuiltInOperatorElements getListsBuiltInOperatorAccess() {
		return (pListsBuiltInOperator != null) ? pListsBuiltInOperator : (pListsBuiltInOperator = new ListsBuiltInOperatorElements());
	}
	
	public ParserRule getListsBuiltInOperatorRule() {
		return getListsBuiltInOperatorAccess().getRule();
	}

	//ListConstant returns lists::EmptyList:
	//
	//	"emptylist" ":" refsort=Sort;
	public ListConstantElements getListConstantAccess() {
		return (pListConstant != null) ? pListConstant : (pListConstant = new ListConstantElements());
	}
	
	public ParserRule getListConstantRule() {
		return getListConstantAccess().getRule();
	}

	/// * -------------------------------------------------------------
	// * Concrete syntax for package arbitrary declarations
	// * ------------------------------------------------------------- * /
	//
	//ArbitrarySort returns arbitrary::ArbitrarySort:
	//
	//	name=ID;
	public ArbitrarySortElements getArbitrarySortAccess() {
		return (pArbitrarySort != null) ? pArbitrarySort : (pArbitrarySort = new ArbitrarySortElements());
	}
	
	public ParserRule getArbitrarySortRule() {
		return getArbitrarySortAccess().getRule();
	}

	//ArbitraryOperator returns arbitrary::ArbitraryOperator:
	//
	//	name=ID ":" (input+=Sort ("," input+=Sort)*)? "->" output=Sort;
	public ArbitraryOperatorElements getArbitraryOperatorAccess() {
		return (pArbitraryOperator != null) ? pArbitraryOperator : (pArbitraryOperator = new ArbitraryOperatorElements());
	}
	
	public ParserRule getArbitraryOperatorRule() {
		return getArbitraryOperatorAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
