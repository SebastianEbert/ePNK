/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.pnml.tools.epnk.pntypes.hlpngs.datatypes.multisets.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.pnml.tools.epnk.pntypes.hlpngs.datatypes.multisets.util.MultisetsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MultisetsItemProviderAdapterFactory extends MultisetsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MultisetsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.multisets.Cardinality} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CardinalityItemProvider cardinalityItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.multisets.Cardinality}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCardinalityAdapter() {
		if (cardinalityItemProvider == null) {
			cardinalityItemProvider = new CardinalityItemProvider(this);
		}

		return cardinalityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.multisets.CardinalityOf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CardinalityOfItemProvider cardinalityOfItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.multisets.CardinalityOf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCardinalityOfAdapter() {
		if (cardinalityOfItemProvider == null) {
			cardinalityOfItemProvider = new CardinalityOfItemProvider(this);
		}

		return cardinalityOfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.multisets.Contains} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainsItemProvider containsItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.multisets.Contains}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainsAdapter() {
		if (containsItemProvider == null) {
			containsItemProvider = new ContainsItemProvider(this);
		}

		return containsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.multisets.Add} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddItemProvider addItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.multisets.Add}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddAdapter() {
		if (addItemProvider == null) {
			addItemProvider = new AddItemProvider(this);
		}

		return addItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.multisets.All} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AllItemProvider allItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.multisets.All}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAllAdapter() {
		if (allItemProvider == null) {
			allItemProvider = new AllItemProvider(this);
		}

		return allItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.multisets.NumberOf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumberOfItemProvider numberOfItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.multisets.NumberOf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumberOfAdapter() {
		if (numberOfItemProvider == null) {
			numberOfItemProvider = new NumberOfItemProvider(this);
		}

		return numberOfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.multisets.Subtract} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubtractItemProvider subtractItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.multisets.Subtract}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubtractAdapter() {
		if (subtractItemProvider == null) {
			subtractItemProvider = new SubtractItemProvider(this);
		}

		return subtractItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.multisets.ScalarProduct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScalarProductItemProvider scalarProductItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.multisets.ScalarProduct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScalarProductAdapter() {
		if (scalarProductItemProvider == null) {
			scalarProductItemProvider = new ScalarProductItemProvider(this);
		}

		return scalarProductItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.multisets.Empty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmptyItemProvider emptyItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.multisets.Empty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmptyAdapter() {
		if (emptyItemProvider == null) {
			emptyItemProvider = new EmptyItemProvider(this);
		}

		return emptyItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (cardinalityItemProvider != null) cardinalityItemProvider.dispose();
		if (cardinalityOfItemProvider != null) cardinalityOfItemProvider.dispose();
		if (containsItemProvider != null) containsItemProvider.dispose();
		if (addItemProvider != null) addItemProvider.dispose();
		if (allItemProvider != null) allItemProvider.dispose();
		if (numberOfItemProvider != null) numberOfItemProvider.dispose();
		if (subtractItemProvider != null) subtractItemProvider.dispose();
		if (scalarProductItemProvider != null) scalarProductItemProvider.dispose();
		if (emptyItemProvider != null) emptyItemProvider.dispose();
	}

}
