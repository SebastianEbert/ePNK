/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.pnml.tools.epnk.pntypes.hlpngs.datatypes.terms.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.pnml.tools.epnk.pntypes.hlpngs.datatypes.terms.util.TermsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TermsItemProviderAdapterFactory extends TermsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TermsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.terms.Declarations} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeclarationsItemProvider declarationsItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.terms.Declarations}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeclarationsAdapter() {
		if (declarationsItemProvider == null) {
			declarationsItemProvider = new DeclarationsItemProvider(this);
		}

		return declarationsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.terms.VariableDecl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableDeclItemProvider variableDeclItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.terms.VariableDecl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableDeclAdapter() {
		if (variableDeclItemProvider == null) {
			variableDeclItemProvider = new VariableDeclItemProvider(this);
		}

		return variableDeclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.terms.Variable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableItemProvider variableItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.terms.Variable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableAdapter() {
		if (variableItemProvider == null) {
			variableItemProvider = new VariableItemProvider(this);
		}

		return variableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.terms.NamedSort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedSortItemProvider namedSortItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.terms.NamedSort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedSortAdapter() {
		if (namedSortItemProvider == null) {
			namedSortItemProvider = new NamedSortItemProvider(this);
		}

		return namedSortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.terms.MultiSetSort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiSetSortItemProvider multiSetSortItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.terms.MultiSetSort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiSetSortAdapter() {
		if (multiSetSortItemProvider == null) {
			multiSetSortItemProvider = new MultiSetSortItemProvider(this);
		}

		return multiSetSortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.terms.ProductSort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductSortItemProvider productSortItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.terms.ProductSort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProductSortAdapter() {
		if (productSortItemProvider == null) {
			productSortItemProvider = new ProductSortItemProvider(this);
		}

		return productSortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.terms.UserSort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserSortItemProvider userSortItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.terms.UserSort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserSortAdapter() {
		if (userSortItemProvider == null) {
			userSortItemProvider = new UserSortItemProvider(this);
		}

		return userSortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.terms.Tuple} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TupleItemProvider tupleItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.terms.Tuple}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTupleAdapter() {
		if (tupleItemProvider == null) {
			tupleItemProvider = new TupleItemProvider(this);
		}

		return tupleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.terms.UserOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserOperatorItemProvider userOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.terms.UserOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserOperatorAdapter() {
		if (userOperatorItemProvider == null) {
			userOperatorItemProvider = new UserOperatorItemProvider(this);
		}

		return userOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.terms.NamedOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedOperatorItemProvider namedOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link org.pnml.tools.epnk.pntypes.hlpngs.datatypes.terms.NamedOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedOperatorAdapter() {
		if (namedOperatorItemProvider == null) {
			namedOperatorItemProvider = new NamedOperatorItemProvider(this);
		}

		return namedOperatorItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (declarationsItemProvider != null) declarationsItemProvider.dispose();
		if (variableDeclItemProvider != null) variableDeclItemProvider.dispose();
		if (variableItemProvider != null) variableItemProvider.dispose();
		if (namedSortItemProvider != null) namedSortItemProvider.dispose();
		if (multiSetSortItemProvider != null) multiSetSortItemProvider.dispose();
		if (productSortItemProvider != null) productSortItemProvider.dispose();
		if (userSortItemProvider != null) userSortItemProvider.dispose();
		if (tupleItemProvider != null) tupleItemProvider.dispose();
		if (userOperatorItemProvider != null) userOperatorItemProvider.dispose();
		if (namedOperatorItemProvider != null) namedOperatorItemProvider.dispose();
	}

}
