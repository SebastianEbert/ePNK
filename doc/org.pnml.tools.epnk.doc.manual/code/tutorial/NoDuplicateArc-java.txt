package org.pnml.tools.epnk.tutorials.app.technical.constraints;
// [...]

/**
 * [...]
 *
 * @author ekki@dtu.dk
 * @generated NOT
 */
public class NoDuplicateArcs extends AbstractModelConstraint {

	public IStatus validate(IValidationContext ctx) {
		EObject object = ctx.getTarget();
		if (object instanceof Arc) {
			Arc arc = (Arc) object;
			ArcType arcType = TechnicalNetTypeFunctions.getArcType(arc);
			Node source = NetFunctions.resolve(arc.getSource());
			Node target = NetFunctions.resolve(arc.getTarget());
			
			FlatAccess flatAccess =
				FlatAccess.getFlatAccess(NetFunctions.getPetriNet(arc));
			if ((arcType == ArcType.INHIBITOR ||
			     arcType == ArcType.READ)        ) &&
					source != null && 
					flatAccess != null) {
				for (org.pnml.tools.epnk.pnmlcoremodel.Arc other:
						flatAccess.getOut(source)) {
					if (other != arc) {
						if (other instanceof Arc) {
							Arc arc2 = (Arc) other;
							Node target2 =
								NetFunctions.resolve(arc2.getTarget());
							if (target == target2) {
								if (TechnicalNetTypeFunctions.getArcType(arc) ==
										TechnicalNetTypeFunctions.getArcType(arc2)) {
									return ctx.createFailureStatus(new Object[]{arc});
		}	}	}	}	}	}	} 
		return ctx.createSuccessStatus();
	}

}

